<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>谷中仁的博客</title><description>最近的总结或者思考...</description><follow_challenge><feedId>74621993392456704</feedId><userId>74619979585483776</userId></follow_challenge><link>https://guzhongren.github.io/</link><language>zh-CN</language><managingEditor>guzhongren@live.cn (谷中仁)</managingEditor><webMaster>guzhongren@live.cn (谷中仁)</webMaster><generator>Hugo -- gohugo.io</generator><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 22 Oct 2025 08:39:44 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>腺样体手术</title><link>https://guzhongren.github.io/2025/10/%E8%85%BA%E6%A0%B7%E4%BD%93%E6%89%8B%E6%9C%AF/</link><pubDate>Sun, 19 Oct 2025 07:01:27 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/10/%E8%85%BA%E6%A0%B7%E4%BD%93%E6%89%8B%E6%9C%AF/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>10 月 13 日，周一，西西和妈妈去儿童医院做了腺样体手术住院前的检查，一切顺利，回家吃了焖面。</p>
<hr>
<p>10 月 14 日，周二，西西，妈妈和我带着大包小包去儿童医院住院部。来到新的环境，西西一点都不害怕，还很兴奋的样子，办完入院手续，做了些小检查。西西想吃焖面，然后咨询了住院医生说可以回家，在 4 点前回到医院就可以，于是，我们打车回家吃焖面。因为住院，我们不能回家，西西问：“天黑了没有？”</p>
<p>妈妈说：“黑了。”</p>
<p>西西听到就说：“我想回家。”然后就嚎啕大哭。</p>
<p>妈妈说：“我们要做手术，医生不让回家，我们做完手术就可以回家了。”</p>
<p>&hellip;</p>
<h2 id="又是没午睡的一天病房里也是出奇的安静因为住的两家人也不熟悉西西也是睡的很早">又是没午睡的一天，病房里也是出奇的安静，因为住的两家人也不熟悉，西西也是睡的很早。</h2>
<p>10 月 15 日，周三，做手术前的最后一天，西西还是开开心心的，中午依旧想吃焖面。下午 4 点前，妈妈去医院签了做手术要用麻醉的协议。关于麻醉这个是必选项，医院会咨询你的意见，但只是咨询，你必须同意，不同意就不给你做手术，没得选。又到晚上了，西西又问：“天黑了没？”</p>
<p>妈妈说：“黑了，你看窗子外面，灯都亮了。”</p>
<p>西西说：“我看看。”</p>
<p>于是，我抱起她走到病房窗子边看外面的灯。过了一会，又开启了复读模式：“我们回家吧。”然后就哭了。</p>
<p>我说：“医生说，我们明天做完手术，后天就可以回家了。”</p>
<p>西西还是哭的稀里哗啦。</p>
<hr>
<p>10 月 16 日，周四，西西八点的手术，我们早早被领到了手术室这等着。医生叫了我们，我们给西西脱了衣服，西西给妈妈说：“我有点害怕。”</p>
<p>妈妈说：“不怕啦，一会就出来了。”</p>
<p>医生骗西西说：“来，我抱抱。”</p>
<p>西西就把胳膊张开了，医生就抱了她。西西开始哭的撕心裂肺。医生还是毫不心软的就把她抱走了。</p>
<p>手术室的门也要关了，我和媳妇出来了，找个椅子坐。走到椅子处，媳妇做了下了，我冲媳妇笑了笑，立马眼睛里的眼泪就止不住的流了下来，心里的内疚感一下子就涌了上来。顿时感觉到是我们没有把西西照顾好，让她收了这么长时间的罪，还要做手术。</p>
<p>媳妇安慰了我，但我感觉到她心里也不好受，只是没有表现出来。</p>
<p>手术很快，9 点 50 左右就出来了，西西在手术小推车里哭的稀里哗啦，不停翻滚就要起来，而医生说做完手术只能躺着不能立着，实在没办法，妈妈将西西平躺着抱着，哭声才平稳了下来。因为最近下雨，天冷，西西被裹了她的小被子，又裹了她的粉色小内胆，还加了我的衣服，总之，里三层外三层包裹的只剩脸了。快到住院不了，媳妇抱不动了，我又接过来抱。到了病床，我们要把西西放在病床上躺着，西西不乐意，同时，又有很多医生进来，要输液，要观察，要让我们确认&hellip; 媳妇将西西放在床上，西西却将妈妈的脖子抓的紧紧的，妈妈想起来都不行，一旁的医生却说：“家长，你起来，配合一下我们。”</p>
<p>媳妇说：“不是我不起来，是娃抓着拿不下啦。”说到这，西西哭着又用另一只手也搂住了妈妈的脖子。</p>
<p>医生只能无奈说：“稍等再输液吧。”</p>
<p>做完手术后医生嘱咐术后两小时不能睡觉，两小时后每半小时就要叫醒一下确认一下她是不是认识你们。所有人走了之后，我和媳妇轮流拿着手机放抖音，宝贝 jojo，超级飞侠等等的，叫着西西让她别睡觉。那 2 个小时真实比平常 10 个小时都长啊。</p>
<p>好在西西恢复的很快，期间一句疼都没说过，也可能是坐手术的医生的技术高超。</p>
<p>每到晚上，“我要回家”， “我想吃焖面”都是口头禅。</p>
<hr>
<p>10 月 17 日，周五，术后第二天，西西恢复的依旧很好，早上和前一天晚上一样，只能和大米粥上面那一层汤，好在还有输葡萄糖液，这几天输液都输了有 10 斤了，没隔半小时就要尿一下，对肾都是个不小的考验。</p>
<hr>
<p>10 月 18 日，周六，我们在医生来查房之前就把所有东西收拾好了，能盖章的东西盖了章，能打包的打包了，最后一次洗鼻子也愉快的完成了，还了医院配发的温度计，门禁卡，水壶等，医生看了西西的恢复情况说：“恢复的很不错。”我们等了半小时后拿到出院证明盖章就去医保结算处结算回家了。</p>
<p>手术总共花了 8600+，医保报销 3000+，剩下的就要用我们公司的商业保险和给西西买的保险报了。</p>
]]></description></item><item><title>“笑死我了”</title><link>https://guzhongren.github.io/2025/10/%E7%AC%91%E6%AD%BB%E6%88%91%E4%BA%86/</link><pubDate>Tue, 14 Oct 2025 07:01:27 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/10/%E7%AC%91%E6%AD%BB%E6%88%91%E4%BA%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>西西最近要做腺样体手术，为了防止感冒之类的都没怎么出门，妈妈回来那天我带着西西去地铁站接妈妈，然后要去 MomoPark 吃饭。当我们到出站口的时候，妈妈也到了，我说：“西西，你看到妈妈了么？”</p>
<p>西西看了看出口在哪，然后就看到了妈妈，一个劲的冲了过去，妈妈还没出闸机口，西西一声：“妈妈！”</p>
<p>妈妈答应到：“哎，宝贝。”</p>
<p>妈妈也出来了，西西一头扎进妈妈怀里撒起了娇。</p>
<p>吃完饭后，我们回到家，西西要和妈妈玩拍气球的游戏。她们把气球打得高高的，在落下来前再把它拍高，突然，气球掉到了她的滑滑梯上，西西捂住了自己的嘴说到：“气球想要滑滑梯，笑死我了。”</p>
<p>我们没教过这话，然后我和她妈妈惊奇地相互看了看，只能表示“无语”。</p>
]]></description></item><item><title>“好久没看超级飞侠了”</title><link>https://guzhongren.github.io/2025/10/%E5%A5%BD%E4%B9%85%E6%B2%A1%E7%9C%8B%E8%B6%85%E7%BA%A7%E9%A3%9E%E4%BE%A0%E4%BA%86/</link><pubDate>Tue, 07 Oct 2025 12:23:00 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/10/%E5%A5%BD%E4%B9%85%E6%B2%A1%E7%9C%8B%E8%B6%85%E7%BA%A7%E9%A3%9E%E4%BE%A0%E4%BA%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>刚从外面溜达回来，西西脱了雨靴和外套洗了手，然后就去次卧拿了她的厨师玩具出来了，然后放到了沙发上，顺手拿起了电视遥控板说：“爸爸，看一集超级飞侠好不好，好久没看超级飞侠了。”</p>
<p>我反问道：“好久没看了么？”</p>
<p>西西按开了电视说：“是呀，好久没看了。”</p>
<p>我说：“看几集呀？”</p>
<p>西西说：“一集。”</p>
<p>虽然 2 天前就已经看过几集超级飞侠了，那就虽然吧。</p>
<p>西西拿着从凯德抓到的棒棒糖又说到：“像我这样假吃可以么？”</p>
<p>我没听清它的话然后说：“不行。不能吃！”</p>
<p>西西瞪大眼睛说：“我假吃不真吃。”</p>
<p>我：“对不起，那你假吃可以。”</p>
<p>西西说：“You are welcome.”</p>
]]></description></item><item><title>“爸爸，涂防晒了没”</title><link>https://guzhongren.github.io/2025/10/%E7%88%B8%E7%88%B8%E6%B6%82%E9%98%B2%E6%99%92%E4%BA%86%E6%B2%A1/</link><pubDate>Sun, 05 Oct 2025 10:01:27 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/10/%E7%88%B8%E7%88%B8%E6%B6%82%E9%98%B2%E6%99%92%E4%BA%86%E6%B2%A1/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>国庆西安几乎一直在下雨，不下雨的时间少之又少。在快要结束国庆长假的时候，突然来了一个阴天，于是宅家好几天的西西和我，我们准备去西安电影厂玩一玩。</p>
<p>在出门前，我给西西带了雨衣，雨鞋和厚厚的外套，当一切准备就绪之后，我们准备出发时，西西拿起自己一个白色的小小的手提包就想带着一起走，说：“爸爸，我要带我的小包包，可以么？”</p>
<p>我说：“我们已经背了大包了，而且你的小包你拿了容易丢，我们回家再玩这个小包包好不好？”</p>
<p>西西无奈的还是想拿，我说：“你要是拿了，我们就去不了了。你还要拿么？”</p>
<p>最后只能在我的逼迫下放弃。</p>
<p>&hellip;</p>
<p>到楼下拿了给西西买的自行车上的小板凳，到小区门口找了一个美团自行车，把小板凳也放好了，我们准备出发了，西西说：“爸爸，涂防晒了么？”</p>
<p>感觉好久都没涂防晒了，而且洗完脸都很少抹油，果然是个粗糙的爹呀。</p>
<p>听完后我惊奇的睁大了眼睛看着西西说：“嗯？没有呀，我们这次不涂了，下次一定涂可以么？”</p>
<p>西西也很无奈但时她说：“哦耶，下次涂防晒。”</p>
]]></description></item><item><title>“你真是一个大坏蛋”</title><link>https://guzhongren.github.io/2025/10/%E4%BD%A0%E7%9C%9F%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A4%A7%E5%9D%8F%E8%9B%8B/</link><pubDate>Sun, 05 Oct 2025 10:01:27 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/10/%E4%BD%A0%E7%9C%9F%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A4%A7%E5%9D%8F%E8%9B%8B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>早上 8 点多了，西西就要醒来了，因为我没有刮胡子，脸上的胡子还是比较扎人的，我就把我的脸贴了过去，准备吓唬她一下。</p>
<p>西西醒了，先看到的妈妈，然后就转过了头，我的嘴就在她的头顶，一下就碰到了我的胡子，扎的她立马转了过去跑到了妈妈怀里，然后嘟着嘴说：“爸爸，你没有刮胡子。”</p>
<p>我说：“那你起床帮我刮好不好？”</p>
<p>西西没接我的话说：“爸爸，你去刮胡子，然后我再起床。”</p>
<p>我说：“我们一起吧。”</p>
<p>西西说：“爸爸，你真是一个大坏蛋。”又接着说：“胡子扎疼我了。”</p>
]]></description></item><item><title>“我的好爸爸”</title><link>https://guzhongren.github.io/2025/09/%E6%88%91%E7%9A%84%E5%A5%BD%E7%88%B8%E7%88%B8/</link><pubDate>Sun, 28 Sep 2025 09:14:30 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/09/%E6%88%91%E7%9A%84%E5%A5%BD%E7%88%B8%E7%88%B8/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>昨天下午准备出去玩，我抱着娃下了楼，手里还提着垃圾，到了楼下，我就先去扔垃圾了，媳妇在给娃穿外套。</p>
<p>我一个劲的走向垃圾桶，娃在不停的说：“爸爸，等等我。”</p>
<p>而我没听到，始终没有答应，媳妇就跟娃说：“我们不要爸爸了好不好？”</p>
<p>西西说：“我的好爸爸。”</p>
]]></description></item><item><title>“我想吃吓人水饺”</title><link>https://guzhongren.github.io/2025/09/%E6%88%91%E6%83%B3%E5%90%83%E5%90%93%E4%BA%BA%E6%B0%B4%E9%A5%BA/</link><pubDate>Fri, 26 Sep 2025 08:08:56 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/09/%E6%88%91%E6%83%B3%E5%90%83%E5%90%93%E4%BA%BA%E6%B0%B4%E9%A5%BA/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>昨天 5:45 下班，刚坐上班车西西就拿着媳妇的电话打过来了，开头第一句还是：“爸爸，你到哪了？”</p>
<p>我说：“我刚坐上班车，半个小时后就到了。”</p>
<p>然后西西巴啦巴啦说了一大堆，我们就愉快地挂了电话。</p>
<p>终于坐上地铁了，西西又打来了电话：“爸爸，你到哪了？”</p>
<p>我转换摄像头，照着地铁里的人说：“我刚坐上地铁，你看。”</p>
<p>西西：“地铁上好多人啊！”</p>
<p>我说：“是呀，我再有 15 分钟就到家了。”</p>
<p>然后巴啦巴啦一堆我们又挂了电话。</p>
<p>终于出地铁了，西西又打来了电话，接通视频，只看见西西依偎在媳妇的怀抱里，眼睛里闪着泪花，一句话也不说，媳妇说：“你娃要吃虾仁水饺，我点了水饺，你去店里去一下。”</p>
<p>看到这些我就跟着说：“好，爸爸再有 5 分钟就回来了。不能哭哦。”</p>
<p>西西听到后，眼睛里的泪花更明显了。</p>
<p>出了地铁，我扫了个美团单车赶紧去店里去水饺。</p>
<p>取了水饺，刚进门，西西就赶紧赶过来，开心地说：“爸爸回来了，我的虾仁水饺也来了。”</p>
<p>&hellip;</p>
<p>西西两口一个水饺，连着吃了 10 多个，嗯，真是不费老父亲费力快速蹬自行车的劲呀。</p>
]]></description></item><item><title>“自己的事情自己做”</title><link>https://guzhongren.github.io/2025/09/%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%8B%E6%83%85%E8%87%AA%E5%B7%B1%E5%81%9A/</link><pubDate>Mon, 22 Sep 2025 08:45:00 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/09/%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%8B%E6%83%85%E8%87%AA%E5%B7%B1%E5%81%9A/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>今天西西 6 点多就醒来了，在床上又玩起了新到的巧虎语音笔。</p>
<p>早上准备出门上班去，发现胡子没刮，想到经常和西西说以后和爸爸一起刮胡子好不好，然后就准备叫西西，西西躲在滑滑梯下面倒海底捞的零食，我说：“西西，和爸爸一起刮胡子好不好？”</p>
<p>西西说：“自己的事情自己做。”</p>
<p>我只能一个人去卫生间刮胡子了。</p>
]]></description></item><item><title>“爸爸，你怎么骗我呢？”</title><link>https://guzhongren.github.io/2025/09/%E7%88%B8%E7%88%B8%E4%BD%A0%E6%80%8E%E4%B9%88%E9%AA%97%E6%88%91%E5%91%A2/</link><pubDate>Sun, 21 Sep 2025 07:12:53 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/09/%E7%88%B8%E7%88%B8%E4%BD%A0%E6%80%8E%E4%B9%88%E9%AA%97%E6%88%91%E5%91%A2/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>昨晚下雨，西西的巧虎玩具也终于到了，放到丰巢快递柜了，这几天心心念念的玩具终于到了，吃完饭，我就下楼去取了。当然我也顺便夹带了点私货，那就是去华润超市取媳妇给买的 2 箱 NFC 芒果汁。</p>
<p>在华润超市取到果汁后，媳妇打来了电话，一想就知道是西西要打的，接通后只见西西坐在她的马桶上哭成了一个小泪人。第一句话就是：“爸爸，你在哪儿？”</p>
<p>我指着拿到的果汁说：“你看，我取到巧虎了，马上就回来了。”</p>
<p>西西说：“你到哪了呀？”</p>
<p>我举起手说：“我很快就回来了，5 分钟。”</p>
<p>西西还是不依不饶的不挂电话，我只能说，我要骑车了，很快就回来，然后就挂了电话。</p>
<p>我先把 2 大箱果汁拿到楼底下，然后又骑着车去取快递。回来之后，赶紧抱着一箱果汁和巧虎往楼上走。但半路还是接到了媳妇的电话，刚接通电话，我就说：“我已经到 4 楼了。”</p>
<p>媳妇掉转摄像头说：“你看。”</p>
<p>只见西西已经飞蹦到门口那了，还说：“爸爸来喽。”</p>
<p>挂了电话，我继续往上走，过一会就听到： “爸爸，你到几楼了？”</p>
<p>我说：“4 楼了。”</p>
<p>过了不到 1 分钟，西西又说：“爸爸，你到几楼了？”</p>
<p>我说：“5 楼了。”</p>
<p>我赶紧爬楼梯，走到门，西西和妈妈在哪等着说：“哇，巧虎！”</p>
<p>&hellip;</p>
<p>晚上 10 点了该睡觉了，她要看书就哪个 3 本新书，突然说：“爸爸，你怎么骗我呢？”</p>
<p>我一脸蒙蔽。</p>
<p>媳妇说：“你出门取快递那么长时间没回来，人家就一直在说，爸爸骗我。”</p>
<p>我只能瞪大眼睛做个鬼脸。</p>
]]></description></item><item><title>“爸爸，你怎么可以说我呢”</title><link>https://guzhongren.github.io/2025/09/%E7%88%B8%E7%88%B8%E4%BD%A0%E6%80%8E%E4%B9%88%E5%8F%AF%E4%BB%A5%E8%AF%B4%E6%88%91%E5%91%A2/</link><pubDate>Wed, 17 Sep 2025 07:01:56 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/09/%E7%88%B8%E7%88%B8%E4%BD%A0%E6%80%8E%E4%B9%88%E5%8F%AF%E4%BB%A5%E8%AF%B4%E6%88%91%E5%91%A2/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>最近天黑的越来越早了，我们回家吃完饭都快 7 点了，天也黑了，我们就不出去浪了。</p>
<p>吃饭完，西西就把之前看的电视关了，然后实在没事干，我们又打开了电视看了 YeekDe。</p>
<p>学了袜子的英语单词，她高兴地找到了自己地袜子，然后要给她穿上；学了钥匙的英语，她要拿着家里的钥匙跟 YeekDe 一起跳&hellip;</p>
<p>看了快半小时了，我走过去说：“西西该关电视了。”</p>
<p>西西说：“爸爸，你怎么可以说我呢？”</p>
<p>我说：“嗯？”</p>
<p>躺在沙发上睡觉的妈妈也惊呆了地看着我。</p>
]]></description></item><item><title>“妈妈，请你吃”</title><link>https://guzhongren.github.io/2025/09/%E5%A6%88%E5%A6%88%E8%AF%B7%E4%BD%A0%E5%90%83/</link><pubDate>Tue, 09 Sep 2025 09:07:02 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/09/%E5%A6%88%E5%A6%88%E8%AF%B7%E4%BD%A0%E5%90%83/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>西西将给她买的蘑菇零食倒在了沙发上。</p>
<p>一会儿，她又拿着给她买的做饭玩具的小盘子走到沙发边，然后将蘑菇放了上去，又将一张零食有鸣商店的一张结账清单放了上去。</p>
<p>她端着盘子，慢悠悠的走到妈妈面前说：“妈妈，请你吃，这是我们家的。”</p>
<p>过了一会，又端着相同的东西来到阳台我跟前说：“爸爸，你吃吧，这是我们家的，还有一块钱。”</p>
]]></description></item><item><title>“我要去三楼”</title><link>https://guzhongren.github.io/2025/09/%E6%88%91%E8%A6%81%E5%8E%BB%E4%B8%89%E6%A5%BC/</link><pubDate>Sun, 07 Sep 2025 06:32:19 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/09/%E6%88%91%E8%A6%81%E5%8E%BB%E4%B8%89%E6%A5%BC/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>昨天和沐沐一家在宜家荟聚，游乐场，长安公园完了一天，可开心了。</p>
<p>因为是中元节，晚上小孩子不能在外面溜达，所以天黑了我们就坐着沐沐家的车往回赶，都快要到家了，西西一直在重复着今天下午的一句话：“我要去三楼！”</p>
<p>这句话背后的故事就是想用几个游戏币，抓几个棒棒糖，然后和沐沐分享。</p>
<p>快到家了，西西突然歇斯底里的哭起来，边哭边说：“我要去三楼！”</p>
<p>以前从来见过她这么哭过，妈妈都吓坏了，还以为是中元节回家太晚导致的。</p>
<p>到小区门口下车了还一直哭，死活就要去凯德广场三楼取币抓棒棒糖，直到妈妈打印她要去凯德才不哭。</p>
<p>到了凯德一个劲的往三楼跑，这次取了平时 4 倍的币，一个人开心的就抓乐起来。</p>
<p>后来沐沐一家也来了，妈妈给他们又取了 20 个币一起玩。</p>
<p>玩完游戏机就去吃饭了，点了虾仁水饺，毕竟饿了一下午，饺子上来一个劲的吃，基本三口一个，而且一吃一个不吱声，就是干饭。</p>
<p>吃完回到家，睡觉前的流程一个还是没少，只不过最后我在讲军事科普书的时候躺下了，不到一分钟就开始打呼噜了。</p>
]]></description></item><item><title>“爸爸一口气就抱到 7 楼了”</title><link>https://guzhongren.github.io/2025/09/%E7%88%B8%E7%88%B8%E4%B8%80%E5%8F%A3%E6%B0%94%E5%B0%B1%E6%8A%B1%E5%88%B07%E6%A5%BC%E4%BA%86/</link><pubDate>Thu, 04 Sep 2025 07:01:56 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/09/%E7%88%B8%E7%88%B8%E4%B8%80%E5%8F%A3%E6%B0%94%E5%B0%B1%E6%8A%B1%E5%88%B07%E6%A5%BC%E4%BA%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>现在，娃已经有了自己的想法，而且还非常的犟。</p>
<p>每天都有自己的流程，我们下班吃完饭必须出去玩，要么去 Momopark, 要么去凯德广场，大的地方必须选一个，等到回到小区门口，非要逛一遍“零食有鸣”，即使只会买一两个小零食，小推车也必须得装满。</p>
<p>回到小区，六楼的小姐姐捡了个鹅在养，非要去看，看完还不回家，精力真的太旺盛了。</p>
<p>真被上楼了，大家一起走，妈妈说：“西西，可以自己走，不用抱。”</p>
<p>西西说：“嗯，我会自己走。”</p>
<p>然后就一步一步的爬楼梯了。</p>
<p>爬到了 5 楼，爬不动了，然后就想让抱抱，之后就主动等我上来张开手臂。</p>
<p>我抱起了她，慢慢爬到了 7 楼，西西突然来了一句：“爸爸一口气就抱到 7 楼了。”</p>
<p>我和她妈妈只能笑了。</p>
]]></description></item><item><title>“有一个 bird”</title><link>https://guzhongren.github.io/2025/09/%E6%88%91%E6%83%B3%E5%87%BA%E5%8E%BB%E7%8E%A9/</link><pubDate>Thu, 04 Sep 2025 07:01:56 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/09/%E6%88%91%E6%83%B3%E5%87%BA%E5%8E%BB%E7%8E%A9/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>最近上了新项目，再也不用早上 8 点半就开站会了，然而需要 5 点半以后才能下班，通常都要到 6 点左右。</p>
<p>快 6 点了了，像往常一样，西西拿着妈妈的手机就给我打了视频电话，然而我不是在班车上就是在地铁上。昨天下午我更是刚坐上班车。</p>
<p>接通视频电话，他第一句就是：“爸爸，你到哪了？我想出去玩。”</p>
<p>我轻声说：“爸爸还在路上。”</p>
<p>她又重复道：“爸爸，你到哪了？”</p>
<p>我打开手机后置摄像头让她看了看我坐班车的场景，然后说：“我马上做地铁了。”</p>
<p>西西说：“哦耶，爸爸马上做地铁了。”</p>
<p>因为昨天下午在下雨，我不敢答应她是不是要出去玩。</p>
]]></description></item><item><title>“有一个 bird”</title><link>https://guzhongren.github.io/2025/09/%E6%9C%89%E4%B8%80%E4%B8%AAbird/</link><pubDate>Thu, 04 Sep 2025 07:01:56 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/09/%E6%9C%89%E4%B8%80%E4%B8%AAbird/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>昨天九月三日，国家主题：纪念中国人民抗日战争暨世界反法西斯战争胜利 80 周年。</p>
<p>9 点，阅兵开幕式就要开始了，娃还没醒，为了让娃看阅兵，打开了电视，走到娃边上，说你看电视，果然娃就精神了。</p>
<p>看阅兵的时候，她找到了妈妈给她买的军事科普书，一边对着书上的图片和模型一边看这电视，有时候还说：“我也有。”意外的是 1 个多小时的阅兵，她竟然几乎全程看下来了。</p>
<p>看完阅兵后，我们骑车去体育场转转。在路上，她坐在给她买的小凳子上，突然来了一句：“爸爸，看，有一个 bird。”</p>
<p>我朝路边看去，看到了一只小鸟，惊喜的说：“哦，真的哦，那里确实有一只 bird。西西真厉害！”</p>
]]></description></item><item><title>“爸爸，你到哪了”</title><link>https://guzhongren.github.io/2025/09/%E7%88%B8%E7%88%B8%E4%BD%A0%E5%88%B0%E5%93%AA%E4%BA%86/</link><pubDate>Tue, 02 Sep 2025 17:14:58 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/09/%E7%88%B8%E7%88%B8%E4%BD%A0%E5%88%B0%E5%93%AA%E4%BA%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>平时，我和娃她妈妈一般都是差不多同时到家，昨天我晚了会。</p>
<p>坐在地铁上，媳妇发来了微信视频，肯定是西西发来的。打开毫不意外的就看到了西西，。</p>
<p>西西说：“爸爸，你到哪了？”</p>
<p>我竖起 3 个手指说：&ldquo;科技路，还有三站哦。&rdquo;</p>
<p>西西说： “三站么？”</p>
<p>我说：“嗯，等会爸爸就回来了。”</p>
<p>西西说：“等会么？”</p>
<p>我说：“嗯。”</p>
]]></description></item><item><title>“我爸爸呢”</title><link>https://guzhongren.github.io/2025/09/%E6%88%91%E7%88%B8%E7%88%B8%E5%91%A2/</link><pubDate>Mon, 01 Sep 2025 08:10:45 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/09/%E6%88%91%E7%88%B8%E7%88%B8%E5%91%A2/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>每到周末，娃都是白天不睡觉，晚上依旧像周内一样，永远在线，永远精神慢慢。</p>
<p>昨晚，西西睡觉前要拉着我的手，说是方式我从床上掉下去。过了一会确实是睡着了。趁着还早，我就准备去码我的代码。刚过去 1 分钟不到，西西就醒了，媳妇说是没摸到我的胳膊。如下是媳妇口述的场景在线。</p>
<p>西西说：“我爸爸呢？”</p>
<p>媳妇说：“爸爸去外面驱动吸了，马上就回来了。”</p>
<p>西西的泪花已经在眼眶里打转了。</p>
<p>我听到后立马赶回主卧。</p>
<hr>
<p>我握着西西的手，虽然她背着我，但 1 分钟就睡着了。</p>
<p>然后又给她修剪了一下指甲。</p>
]]></description></item><item><title>“爸爸呢”</title><link>https://guzhongren.github.io/2025/08/%E7%88%B8%E7%88%B8%E5%91%A2/</link><pubDate>Sat, 30 Aug 2025 06:43:52 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E7%88%B8%E7%88%B8%E5%91%A2/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>昨晚凌晨 2 点左右，西西可能是做梦了突然醒来了一下，过了一会有哭了，嘟嘟囔囔的说了一些听不清的话，妈妈拍了几下还是没睡踏实。</p>
<p>过了一会又醒了，嘟嘟囔囔地说：“爸爸呢？”</p>
<p>妈妈说：“爸爸在呢。 “人之初&hellip;”</p>
<p>西西说：“嗯。”</p>
<p>然后突然就哭了，又说：“爸爸呢？”</p>
<p>我睡地比较死，媳妇说：“你给娃回一声。”</p>
<p>我回了一声：“在这呢。”</p>
<p>西西还是苦的不行，最后妈妈只好抱起她到怀里哄。</p>
<p>还是不行，应该是穿着睡袋睡太热了，于是我和妈妈给他换了个平时晚上穿的吊带。</p>
<p>不一会儿在妈妈的怀里就睡着了，直到今天早上。</p>
]]></description></item><item><title>“有爸爸保护我呢”</title><link>https://guzhongren.github.io/2025/08/%E6%9C%89%E7%88%B8%E7%88%B8%E4%BF%9D%E6%8A%A4%E6%88%91%E5%91%A2/</link><pubDate>Fri, 29 Aug 2025 08:04:28 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%9C%89%E7%88%B8%E7%88%B8%E4%BF%9D%E6%8A%A4%E6%88%91%E5%91%A2/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>昨天下午带着西西去 Momopark 玩，由于路上人多，天还下着毛毛细雨，于是我抱着她走。</p>
<p>妈妈挑逗地偷偷的戳了一下西西。</p>
<p>西西嘻嘻笑着说：“有爸爸保护我呢。”</p>
<p>然后把手缩到了我的怀里，笑着看着妈妈。</p>
]]></description></item><item><title>“人之初...”</title><link>https://guzhongren.github.io/2025/08/%E4%BA%BA%E4%B9%8B%E5%88%9D.../</link><pubDate>Thu, 28 Aug 2025 06:40:19 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E4%BA%BA%E4%B9%8B%E5%88%9D.../</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>昨晚给西西洗完澡，他就是不想把浴巾脱下来，而是要把自己包裹起来，像个毛毛虫一样。</p>
<p>过了一会儿，西西开始背三字经。</p>
<p>“人之初，性本善。”</p>
<p>“性相近，习相远。”</p>
<p>“苟不教，性乃迁。”</p>
<p>“教之道，贵以专。”</p>
<p>“昔孟母，择邻处。”</p>
<p>“子不学，断机杼。”</p>
<p>而妈妈拿着手机录下了这一瞬间。</p>
<p>&hellip;</p>
<p>10 点不到，竟然在妈妈的怀里离奇的早早睡着了。</p>
]]></description></item><item><title>“这样不好”</title><link>https://guzhongren.github.io/2025/08/%E8%BF%99%E6%A0%B7%E4%B8%8D%E5%A5%BD/</link><pubDate>Wed, 27 Aug 2025 08:11:15 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E8%BF%99%E6%A0%B7%E4%B8%8D%E5%A5%BD/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>今天早上西西 5:50 左右就醒来了，突然说：“妈妈，我想喝水。”</p>
<p>妈妈说：“这里有鸭鸭杯。”</p>
<p>西西说：“不要，我要巧虎杯杯。”</p>
<p>妈妈说：“巧虎杯杯不在这里，先用鸭鸭杯吧。”</p>
<p>西西说：“不要，我要巧虎杯杯。”</p>
<p>我说：“我去给你取。”</p>
<p>西西说：“不要”</p>
<p>我说：“那我抱你去取。”</p>
<p>西西没说话，立马起身走了过来抱住爸爸。</p>
<p>我给她在巧虎杯杯里倒了水，他说他要在地上喝。</p>
<p>拿着巧虎杯杯走到床边慢吞吞的说：“不能再床上喝水，水会倒在床上的。这样不好。”</p>
]]></description></item><item><title>“我会脱衣服了喽”</title><link>https://guzhongren.github.io/2025/08/%E6%88%91%E4%BC%9A%E8%84%B1%E8%A1%A3%E6%9C%8D%E4%BA%86%E5%96%BD/</link><pubDate>Tue, 26 Aug 2025 08:03:57 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%88%91%E4%BC%9A%E8%84%B1%E8%A1%A3%E6%9C%8D%E4%BA%86%E5%96%BD/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>西西玩完沙子回到家，自己脱了鞋，准备脱衣服。</p>
<p>解开了最下面的一个口子。</p>
<p>又一个。</p>
<p>又一个。</p>
<p>到了倒数第二个就怎么也解不开了。</p>
<p>我说：“来，爸爸帮你解。”</p>
<p>西西说：“不要，我能解开。”</p>
<p>然后她开始使用各种动作来解扣子，但始终就差那么一点。</p>
<p>西西说：“妈妈，我解不开这个扣子。”</p>
<p>妈妈说：“我来帮你。”</p>
<p>一会就解开了，接下来就要脱衣服了。</p>
<p>西西扭动着身体，就是脱不下来。</p>
<p>妈妈说：“把手往身体后面放，然后抖一抖就下来了。”</p>
<p>西西开始照着做，果然衣服就脱下来了。</p>
<p>然后她拿着脱下来的衣服在主卧和客厅之间蹦跑，还高兴的说：“我会脱衣服喽！我会脱衣服喽！&hellip;”</p>
]]></description></item><item><title>“这个海螺可以听到声音哎”</title><link>https://guzhongren.github.io/2025/08/%E8%BF%99%E4%B8%AA%E6%B5%B7%E8%9E%BA%E5%8F%AF%E4%BB%A5%E5%90%AC%E5%88%B0%E5%A3%B0%E9%9F%B3%E5%93%8E/</link><pubDate>Mon, 25 Aug 2025 08:09:30 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E8%BF%99%E4%B8%AA%E6%B5%B7%E8%9E%BA%E5%8F%AF%E4%BB%A5%E5%90%AC%E5%88%B0%E5%A3%B0%E9%9F%B3%E5%93%8E/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>带着西西去合生汇看贝壳展览。</p>
<p>妈妈说：“可以听海螺的声音。”</p>
<p>西西拿起一个海螺放在耳朵边上说：“这个可以听到声音哎。”</p>
<p>妈妈接过来一听说：“真的哎，真棒！”</p>
<p>接下来西西就一发不可收拾的去听了能拿到的所有的海螺。</p>
<p>&hellip;</p>
<p>妈妈说：“谁给你买的海螺？”</p>
<p>西西说：“妈妈。”</p>
<p>妈妈说：“爸爸给你要的。”</p>
<p>妈妈说：“那妈妈再问你谁给你买的海螺？”</p>
<p>西西说： “爸爸，妈妈和西西。”</p>
<p>&hellip;</p>
]]></description></item><item><title>“我教你折吊车”</title><link>https://guzhongren.github.io/2025/08/%E6%88%91%E6%95%99%E4%BD%A0%E6%8A%98%E5%90%8A%E8%BD%A6/</link><pubDate>Sun, 24 Aug 2025 06:14:38 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%88%91%E6%95%99%E4%BD%A0%E6%8A%98%E5%90%8A%E8%BD%A6/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>西西说：“爸爸，我教你折吊车。”</p>
<p>又说：“像这样，像这样，就好了。”</p>
<p>我：“嗯，跟着西西做。”</p>
<p>西西说：“看，你学会了吧。”</p>
]]></description></item><item><title>“找到一个好爸爸”</title><link>https://guzhongren.github.io/2025/08/%E6%89%BE%E5%88%B0%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%88%B8%E7%88%B8/</link><pubDate>Sat, 23 Aug 2025 19:57:48 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%89%BE%E5%88%B0%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%88%B8%E7%88%B8/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>西西新歌：</p>
<p>找呀找呀找爸爸</p>
<p>找到一个好爸爸</p>
<p>敬个礼呀握握手</p>
<p>笑嘻嘻呀点点头</p>
<p>你是我的好爸爸</p>
]]></description></item><item><title>“自己的事情自己做”</title><link>https://guzhongren.github.io/2025/08/%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%8B%E6%83%85%E8%87%AA%E5%B7%B1%E5%81%9A/</link><pubDate>Fri, 22 Aug 2025 08:07:48 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%8B%E6%83%85%E8%87%AA%E5%B7%B1%E5%81%9A/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>妈妈手里拿着刚吃完枣的零食袋。</p>
<p>西西说：“自己的事情自己做。你去把垃圾扔进垃圾桶！”</p>
<p>妈妈&hellip;</p>
]]></description></item><item><title>“我坐自行车一会儿就到了”</title><link>https://guzhongren.github.io/2025/08/%E6%88%91%E5%9D%90%E8%87%AA%E8%A1%8C%E8%BD%A6%E4%B8%80%E4%BC%9A%E5%84%BF%E5%B0%B1%E5%88%B0%E4%BA%86/</link><pubDate>Thu, 21 Aug 2025 08:11:23 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%88%91%E5%9D%90%E8%87%AA%E8%A1%8C%E8%BD%A6%E4%B8%80%E4%BC%9A%E5%84%BF%E5%B0%B1%E5%88%B0%E4%BA%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>妈妈说：“今天晚上出去吗？”</p>
<p>西西说： “出去。”</p>
<p>妈妈说：“去哪呀？”</p>
<p>西西说： “体育场”</p>
<p>妈妈说：“太远了，爸爸也没回来。”</p>
<p>西西说： “不远，我坐自行车一会就到了。”</p>
]]></description></item><item><title>“我不会走”</title><link>https://guzhongren.github.io/2025/08/%E6%88%91%E4%B8%8D%E4%BC%9A%E8%B5%B0/</link><pubDate>Wed, 20 Aug 2025 07:48:58 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%88%91%E4%B8%8D%E4%BC%9A%E8%B5%B0/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>西西想走的时候：</p>
<p>西西说：“我会走，不要妈妈抱。”</p>
<p>西西不想走的时候：</p>
<p>西西说：“我不会走”</p>
]]></description></item><item><title>“真的么”</title><link>https://guzhongren.github.io/2025/08/%E7%9C%9F%E7%9A%84%E4%B9%88/</link><pubDate>Tue, 19 Aug 2025 07:56:19 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E7%9C%9F%E7%9A%84%E4%B9%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>妈妈说：“你真漂亮啊！”</p>
<p>西西说： “真的吗？”</p>
<p>妈妈说：&ldquo;真的呀！&quot;；又说：“你去问爸爸呀。”</p>
<p>西西手：“爸爸，我漂亮吗？”</p>
<p>我说：“真漂亮呀！”</p>
]]></description></item><item><title>“妈妈，我想你了”</title><link>https://guzhongren.github.io/2025/08/%E5%A6%88%E5%A6%88%E6%88%91%E6%83%B3%E4%BD%A0%E4%BA%86/</link><pubDate>Mon, 18 Aug 2025 08:01:17 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E5%A6%88%E5%A6%88%E6%88%91%E6%83%B3%E4%BD%A0%E4%BA%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>西西说：“妈妈, 我想你了。”</p>
<p>妈妈说：“我也想你了。”</p>
]]></description></item><item><title>“爸爸真是个大坏蛋</title><link>https://guzhongren.github.io/2025/08/%E7%88%B8%E7%88%B8%E7%9C%9F%E6%98%AF%E4%B8%AA%E5%A4%A7%E5%9D%8F%E8%9B%8B/</link><pubDate>Mon, 18 Aug 2025 07:58:34 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E7%88%B8%E7%88%B8%E7%9C%9F%E6%98%AF%E4%B8%AA%E5%A4%A7%E5%9D%8F%E8%9B%8B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>西西说：“爸爸又去买西瓜了。”</p>
<p>又说：“爸爸真是个大坏蛋。”</p>
]]></description></item><item><title>“我要快快长大”</title><link>https://guzhongren.github.io/2025/08/%E6%88%91%E8%A6%81%E5%BF%AB%E5%BF%AB%E9%95%BF%E5%A4%A7/</link><pubDate>Sat, 16 Aug 2025 06:15:19 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%88%91%E8%A6%81%E5%BF%AB%E5%BF%AB%E9%95%BF%E5%A4%A7/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>西西说： “我要快快长大.”</p>
<p>我说：“你要慢慢长大.”</p>
<p>西西说：“我要像奶奶一样.”</p>
<p>我说：“为什么？”</p>
<p>西西说：“我要像妈妈一样。”</p>
]]></description></item><item><title>故乡是什么</title><link>https://guzhongren.github.io/2025/08/%E6%95%85%E4%B9%A1%E6%98%AF%E4%BB%80%E4%B9%88/</link><pubDate>Fri, 15 Aug 2025 07:07:08 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%95%85%E4%B9%A1%E6%98%AF%E4%BB%80%E4%B9%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>故乡，是你一个人的相思，是你一个人的热爱，是你一个人的回不去的远方&hellip;</p>
<p>也是别人眼里再陌生不过的话语，也是别人嘴里不会提起的字眼，更是别人心里永远不会有一席之地的地方&hellip;</p>
<p>&hellip;</p>
]]></description></item><item><title>Vibe Coding：提升 Code Review 体验的 VSCode 插件</title><link>https://guzhongren.github.io/2025/07/vibe-coding-%E4%B8%80%E4%B8%AA%E6%8F%90%E5%8D%87-code-review-comments-%E7%9A%84-vscode%E6%8F%92%E4%BB%B6/</link><pubDate>Sat, 26 Jul 2025 16:36:01 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/07/vibe-coding-%E4%B8%80%E4%B8%AA%E6%8F%90%E5%8D%87-code-review-comments-%E7%9A%84-vscode%E6%8F%92%E4%BB%B6/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="痛点">痛点</h2>
<p>在日常的 Code Review 过程中，我们经常需要记录审查过程中发现的问题和建议。目前常见的做法主要有两种：</p>
<ol>
<li>让他人代为记录，可能是通过 Todolist 或纸质形式的文字记录</li>
<li>自己手动记录，通常使用各种笔记工具，如 Raycast Note</li>
</ol>
<p>这两种方式都存在信息丢失的风险，可能由于时间推移或其他因素导致记录不完整或遗失。最理想的方式是建立一套自己的记录系统，使得回顾时能够一目了然地看到当时的审查意见。</p>
<h2 id="解决方案">解决方案</h2>
<p>针对这一需求，我开发了一个 VSCode 插件来专门记录 Code Review 过程中的反馈。这个项目使用了最近非常热门的 Vibe Coding 技术&hellip;</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/plugins/code-review-comments/code-review-comments.6bhdgqda0w.gif" alt="Code Review Comments" /></p>
<h2 id="实现细节">实现细节</h2>
<h3 id="系统提示词设计">系统提示词设计</h3>
<p>以上展示的功能就是通过 Vibe Coding 技术实现的。所有代码都是由 AI 自动生成，使用了 <a href="https://www.npmjs.com/package/@google/gemini-cli">Gemini CLI</a><sup>[1]</sup>
 工具。</p>
<p>在开始开发前，我创建了一个 gemini.md 文件，在其中详细描述了项目需求：</p>
<ul>
<li>系统角色定义：为 AI 设定一个专业的角色定位</li>
<li>系统目标：明确说明这个系统要解决的问题</li>
<li>技术栈选择：指定使用的开发技术</li>
<li>功能需求：详细列出系统需要实现的功能</li>
<li>系统特性：进一步细化系统的功能特性</li>
<li>开发要求：如每次完成功能后需要自行编译检查等</li>
<li>其他约束条件</li>
</ul>
<p>这样设置后，每次启动 gemini cli 时，工具会默认读取该文件，大大节省了重复输入提示词的时间。</p>
<p>示例提示词：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-md">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-md" data-lang="md"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">system</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">你是一个专业且资深的 VSCode 插件开发者；请对每次的更改都做编译检查。
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">system</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">user</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">这是一个用于记录 code review 过程中产生的 comment 的插件，这样可以很方便在 code review 后对提交的代码进行更改，功能类似 GitHub PR 的 comment。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">在修复 bug 或者开发新功能的时候，尽量不要让我给你提供除了提示词以外的其他内容。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">requirements：
</span></span><span class="line"><span class="cl"><span class="k">-</span> 使用 TypeScript 编写的 VSCode 插件
</span></span><span class="line"><span class="cl"><span class="k">-</span> 需要使用 VSCode 的 API 来实现功能
</span></span><span class="line"><span class="cl"><span class="k">-</span> 遵循 VS Code 插件开发的最佳实践
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">features:
</span></span><span class="line"><span class="cl"><span class="k">-</span> 只有在用户创建 comment 时才会记录到本地文件中
</span></span><span class="line"><span class="cl"><span class="k">-</span> 需要使用 VSCode 自己的 working tree diff，而不是执行 git diff 命令
</span></span><span class="line"><span class="cl"><span class="k">-</span> 记录的 comment 需要在 VSCode 的侧边栏中显示，可以对某个 comment 进行操作，如删除、标记为已完成、更改 comment 内容等
</span></span><span class="line"><span class="cl"><span class="k">-</span> 数据存储在本地文件中，格式为 YAML，文件名为 diff-comments.yaml
</span></span><span class="line"><span class="cl"><span class="k">-</span> 记录的 comment 需要包含文件名、行号、comment 内容、git hash、git parent hash、创建时间等；排序按照未完成、已完成且倒序排列
</span></span><span class="line"><span class="cl"><span class="k">-</span> 当用户在侧边栏中点击某个 comment 时，右侧应出现添加 comment 时的 diff view，且跳转到对应的文件和行号
</span></span><span class="line"><span class="cl"><span class="k">-</span> 当用户在 diff view 添加 comment 时，插件会自动记录当前的 git hash 和时间戳，且在 diff view 右侧文件的行号前面（可以添加 debug icon 的位置）显示一个小图标，表示有 comment 记录；鼠标移动到这个小图标上时，会显示 comment 的内容摘要
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">user</span><span class="p">&gt;</span></span></span></code></pre></div></div>
<h3 id="有效的-prompt-工程">有效的 Prompt 工程</h3>
<p>Vibe Coding 的核心在于与 AI 工具进行持续的对话，通过精心设计的提示词让 AI 实现我们的需求。在实现过程中会遇到各种问题，这时需要详细描述场景，并尽可能提供错误日志，让 AI 能够准确分析并提出解决方案。</p>
<p>在具体实现过程中，某些功能可能存在多种实现方案，AI 可能会选择不合适的方案导致需求无法实现。例如，在实现 diff view 时，如何获取当前文件的 git commit hash？Gemini 最初建议在程序运行时执行 <code>git log ...</code> 命令，但对于有合并 PR 的 Commit 来说，获取正确的 git commit hash 很复杂，因为 <code>git log</code> 命令会返回所有父 Commit 的 hash，而不是当前 Commit 的 hash。这样获取到的 commit hash 在做 diff view 显示时就会找不到对应的 commit。如果不深入了解 VSCode 的 git diff 实现机制，很容易陷入这个误区。</p>
<h2 id="总结">总结</h2>
<ul>
<li>强大的 Vibe Coding 和大模型技术主要用于提升效率，而非替代程序员。工具只是让产出更快，但准确性仍需人工关注。</li>
<li>再好的工具也需要开发者对相关技术有充分了解，需要给 AI 提供尽可能准确的实现方案，使其能更好地理解和生成代码。</li>
<li>使用 Vibe Coding，我们可以更快地获得产品原型，同时也能更快地学习我们不熟悉的知识和技能。</li>
<li>但所有生成的代码都需要良好且可维护的架构设计，而不是流水账式的代码堆砌。</li>
</ul>
<div class="references">
                <h2>参考</h2>
                <ol><li>Gemini CLI: <a href="https://www.npmjs.com/package/@google/gemini-cli" rel="noopener noreferrer">https://www.npmjs.com/package/@google/gemini-cli</a></li></ol>
            </div>]]></description></item><item><title>使用uv来更好的管理你的python依赖</title><link>https://guzhongren.github.io/2025/06/%E4%BD%BF%E7%94%A8uv%E6%9D%A5%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84python%E4%BE%9D%E8%B5%96/</link><pubDate>Mon, 30 Jun 2025 20:43:58 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/06/%E4%BD%BF%E7%94%A8uv%E6%9D%A5%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84python%E4%BE%9D%E8%B5%96/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="痛点">痛点</h2>
<p>在Python 项目开发过程中，我们肯定会用到<code>requirements.txt</code> 来管理项目中所用到的第三方库，这么多年都是这么过来的，那有什么痛点呢？</p>
<ul>
<li>你的<code>requirements.txt</code> 中是不是多了一些莫名其妙的依赖，你还不敢删除</li>
<li>你不知道其中的某个依赖是因为哪个依赖引入进来的，或者被哪个依赖所引用</li>
<li>每次运行命令生成这个文件，还得去瞅一下是不是正确，有时候，不同的人生成的顺序还不一样</li>
</ul>
<p>你是不是也是经常遇到？</p>
<h2 id="工具介绍">工具介绍</h2>
<h3 id="pyprojecttoml">pyproject.toml</h3>
<p><a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/">pyproject.toml</a><sup>[1]</sup>
 文件是定义项目配置的 Python 标准。</p>
<p>与 <code>NodeJS</code> 项目中的 <code>package.json</code> 一样，可以管理第三方依赖，可以存储可以运行的命令，所使用的 Runtime 的版本号限制和项目的基本信息等等的，功能强大可见一斑。</p>
<h3 id="uv">uv</h3>
<p><img src="https://github.com/astral-sh/uv/assets/1309177/03aa9163-1c79-4a87-a31d-7a9311ed9310#only-dark" alt="uv" /></p>
<blockquote>
<p>An extremely fast Python package and project manager, written in Rust.(一个极快的 Python 包和项目管理器，用 Rust 编写。) &ndash; <a href="https://docs.astral.sh/uv/">https://docs.astral.sh/uv/</a><sup>[2]</sup>
</p></blockquote>
<p>速度快是其特点，但是使用也是相当方便。而且文档相当详细。</p>
<h2 id="如何使用">如何使用</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">mkdir py-uv
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> py-uv/
</span></span><span class="line"><span class="cl">uv init
</span></span><span class="line"><span class="cl"><span class="c1"># Initialized project `py-uv`</span>
</span></span><span class="line"><span class="cl">uv venv
</span></span><span class="line"><span class="cl"><span class="c1"># Using CPython 3.13.2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Creating virtual environment at: .venv</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Activate with: source .venv/bin/activate</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/bin/activate
</span></span><span class="line"><span class="cl">gst
</span></span><span class="line"><span class="cl"><span class="c1"># On branch main</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># No commits yet</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Untracked files:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   (use &#34;git add &lt;file&gt;...&#34; to include in what will be committed)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	.gitignore</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	.python-version</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	README.md</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	hello.py</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	pyproject.toml</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#nothing added to commit but untracked files present (use &#34;git add&#34; to track)</span>
</span></span><span class="line"><span class="cl">uv run hello.py
</span></span><span class="line"><span class="cl"><span class="c1"># Using CPython 3.13.2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Creating virtual environment at: .venv</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Hello from py-uv!</span>
</span></span><span class="line"><span class="cl">uv add pyfiglet
</span></span><span class="line"><span class="cl"><span class="c1"># Resolved 2 packages in 515ms</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Prepared 1 package in 532ms</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Installed 1 package in 7ms</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  + pyfiglet==1.0.3</span></span></span></code></pre></div></div>
<p>这时，我们可以看看 <code>pyproject.toml</code> 中有哪些内容</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-toml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;py-uv&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">version</span> <span class="p">=</span> <span class="s2">&#34;0.1.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">description</span> <span class="p">=</span> <span class="s2">&#34;Add your description here&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">readme</span> <span class="p">=</span> <span class="s2">&#34;README.md&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">requires-python</span> <span class="p">=</span> <span class="s2">&#34;&gt;=3.13&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">dependencies</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pyfiglet&gt;=1.0.3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span></span></span></code></pre></div></div>
<p>可以看到 <code>pyfiglet</code> 被添加到了 <code>dependencies</code> 中；其他的内容字如其意，就不展开讲了。</p>
<p>在源文件中添加一点 python 代码</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-diff">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gh">diff --git a/hello.py b/hello.py
</span></span></span><span class="line"><span class="cl"><span class="gh">index b18db96..204b9e3 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/hello.py
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/hello.py
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -1,6 +1,12 @@
</span></span></span><span class="line"><span class="cl"><span class="gu"></span><span class="gi">+import pyfiglet
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> def main():
</span></span><span class="line"><span class="cl">     print(&#34;Hello from py-uv!&#34;)
</span></span><span class="line"><span class="cl"><span class="gi">+    ascii_art = pyfiglet.figlet_format(&#34;MyApp Started!&#34;)
</span></span></span><span class="line"><span class="cl"><span class="gi">+    print(ascii_art)
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> if __name__ == &#34;__main__&#34;:
</span></span><span class="line"><span class="cl">     main()
</span></span><span class="line"><span class="cl">~
</span></span></code></pre></div></div>
<p>再次运行</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">uv run hello.py
</span></span><span class="line"><span class="cl"><span class="c1"># Hello from py-uv!</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  __  __          _                  ____  _             _           _ _</span>
</span></span><span class="line"><span class="cl"><span class="c1"># |  \/  |_   _   / \   _ __  _ __   / ___|| |_ __ _ _ __| |_ ___  __| | |</span>
</span></span><span class="line"><span class="cl"><span class="c1"># | |\/| | | | | / _ \ | &#39;_ \| &#39;_ \  \___ \| __/ _` | &#39;__| __/ _ \/ _` | |</span>
</span></span><span class="line"><span class="cl"><span class="c1"># | |  | | |_| |/ ___ \| |_) | |_) |  ___) | || (_| | |  | ||  __/ (_| |_|</span>
</span></span><span class="line"><span class="cl"><span class="c1"># |_|  |_|\__, /_/   \_\ .__/| .__/  |____/ \__\__,_|_|   \__\___|\__,_(_)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         |___/        |_|   |_|</span></span></span></code></pre></div></div>
<p>至此，我们的项目已经使用 <code>uv</code> 运行起来了，但是在真正部署的时候我们需要生成 <code>requirement.txt</code> 然后启动程序。</p>
<h3 id="生成-requirementtxt">生成 <code>requirement.txt</code></h3>
<p>在正式的开发项目中，我们不可能每个人手动生成一次，然后再提交，这样很可能忘记这个操作，最好的就是将其放在在 git hooks 中，在每次 push 代码之前生成并检查其已经存在且是最新的，这样每个人都避免了手动生成和校验。如下是一段 shell 脚本来实现该功能</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># generate-requirements.sh</span>
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/basa</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -euo pipefail
</span></span><span class="line"><span class="cl">uv pip compile pyproject.toml --quiet --output-file requirements.txt
</span></span><span class="line"><span class="cl"><span class="c1"># Check for uncommitted changes</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> -n <span class="k">$(</span>git status --porcelain<span class="k">)</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;Error: There are uncommitted changes. Please commit or stash them before running this script.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre></div></div>
<p>然后将其集成到 <code>pre-commit</code> 中, 使其在 push 前执行这个操作</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">generate requirement.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Generate requirements.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">entry</span><span class="p">:</span><span class="w"> </span><span class="l">./scripts/git-hooks/generate-requirements.sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">language</span><span class="p">:</span><span class="w"> </span><span class="l">script</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">always_run</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">stages</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">pre-push]</span></span></span></code></pre></div></div>
<p>如此可以将该流程完全自动化。</p>
<p>运行 <code>git push</code> 或者 <code>./scripts/git-hooks/generate-requirements.sh</code>, 会自动生成 <code>requirement.txt</code> 文件, 内容如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl"># This file was autogenerated by uv via the following command:
</span></span><span class="line"><span class="cl">#    uv pip compile pyproject.toml --output-file requirements.txt
</span></span><span class="line"><span class="cl">pyfiglet==1.0.3
</span></span><span class="line"><span class="cl">    # via py-uv (pyproject.toml)</span></span></code></pre></div></div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Note<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">我从哪里来，我要去哪里</div>
        </div>
    </div>
<p>其中的最后一行表明，<code>pyfiglet</code> 是被 <code>py-uv</code> 这个项目依赖的，也就是我们刚创建的这个项目；而在多个依赖的项目中，生成的 <code>requirement.txt</code> 也可能出现，一个不知名的依赖被多个依赖再次依赖，这就是使用 <code>uv</code> 工具生成 <code>requirement.txt</code>的好处。</p>
<h2 id="总结">总结</h2>
<p>好的工具的选择可以为工程构建增速提效。
工具的组合更是可以产生解放生产力。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>pyproject.toml: <a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/" rel="noopener noreferrer">https://packaging.python.org/en/latest/guides/writing-pyproject-toml/</a></li><li>https://docs.astral.sh/uv/: <a href="https://docs.astral.sh/uv/" rel="noopener noreferrer">https://docs.astral.sh/uv/</a></li></ol>
            </div>]]></description></item><item><title>基于Strapi开发Headless CMS的基建入门</title><link>https://guzhongren.github.io/2025/05/%E5%9F%BA%E4%BA%8Estrapi%E5%BC%80%E5%8F%91headless-cms%E7%9A%84%E5%9F%BA%E5%BB%BA%E5%85%A5%E9%97%A8/</link><pubDate>Fri, 16 May 2025 10:15:31 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/05/%E5%9F%BA%E4%BA%8Estrapi%E5%BC%80%E5%8F%91headless-cms%E7%9A%84%E5%9F%BA%E5%BB%BA%E5%85%A5%E9%97%A8/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="简介">简介</h2>
<p>在现代电商和企业网站中，内容需要频繁变更。理想的系统应支持后台灵活编辑内容，前端自动渲染，无需频繁重构和部署。以电商为例，产品信息、价格、描述等常常调整，页面布局也需随时优化。对于缺乏开发经验的运营人员，易用的 CMS 能极大提升效率和响应速度。</p>
<h2 id="strapi简介">Strapi简介</h2>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Tips<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><a href="https://strapi.io/">Strapi</a><sup>[3]</sup>
 是一个 API 级低代码内容管理系统（Headless CMS）。</div>
        </div>
    </div>
<p>Strapi 是开源、灵活的 Headless CMS，支持多数据库和多前端框架。它提供内容建模、权限管理、插件扩展等能力，适合各种规模项目。前后端分离架构让前端可用 React/Vue/Angular 等技术开发，后端通过 Strapi API 提供数据，提升开发效率、降低维护成本。</p>
<p>主要特性包括：</p>
<ul>
<li><strong>开源</strong>，可自由使用和定制</li>
<li><strong>灵活内容建模</strong>，支持多数据类型和关系</li>
<li><strong>自动生成 RESTful/GraphQL API</strong></li>
<li><strong>插件机制</strong>，可扩展功能和集成第三方服务</li>
<li><strong>多数据库支持</strong>（MongoDB、PostgreSQL、MySQL 等）</li>
<li><strong>权限管理</strong>，细粒度控制访问</li>
<li><strong>多语言内容管理</strong></li>
<li><strong>活跃社区与丰富文档</strong></li>
</ul>
<h2 id="主要流程">主要流程</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/How-to/Strapi/dev-with-strapi.2ks52vmd6j.webp" alt="dev-with-strapi" /></p>
<ol>
<li>设计内容模型（Content Types/Components）
<ul>
<li>使用内容类型构建器（Content-Type Builder）将页面的内容抽象出来，形成如 Design Token 级别的组件，和可复用的中度复杂的组件。</li>
</ul>
</li>
<li>创建网站结构及内容
<ul>
<li>构建网站结构，可通过组合之前创建的各种组件来形成结构。</li>
<li>创建网站的具体内容，如文章、产品、用户等，并使他们关联起来，比如博客需要有作者、分类、标签等。</li>
</ul>
</li>
<li>配置 API 权限与插件
<ul>
<li>配置 API 的权限，决定哪些用户可以访问、修改、删除内容，一般情况会将所有的内容以只读的方式暴露给前端。</li>
</ul>
</li>
<li>通过 API 管理和获取内容
<ul>
<li>前端通过 Strapi 提供的 RESTful， StrapiClient 或 GraphQL API 获取内容。</li>
</ul>
</li>
<li>前端动态渲染内容
<ul>
<li>前端根据内容类型和结构动态渲染页面。</li>
</ul>
</li>
</ol>
<h2 id="主要概念">主要概念</h2>
<h3 id="content-types-builder">Content Types Builder</h3>
<p>内容类型构建器是 Strapi 的核心，可视化创建和管理内容类型。支持灵活定义字段、数据类型、验证规则，便于内容建模和结构调整。</p>
<h3 id="components">Components</h3>
<p>组件实现内容结构复用。可将常用结构（如作者信息、SEO 配置等）封装为组件，在多个内容类型中引用，支持嵌套组合，提升建模灵活性。</p>
<h3 id="single-types">Single Types</h3>
<p>单一类型（Single Type）适合全站唯一内容，如“关于我们”、“站点设置”等。每种单一类型仅有一个条目，结构可自定义，便于集中管理全局内容。</p>
<h3 id="collections">Collections</h3>
<p>集合类型（Collection Type）用于管理多条同类内容，如文章、产品、用户等。每个集合类型可包含多个字段和组件，是内容批量管理和 API 构建的基础。</p>
<h3 id="dynamic-zones">Dynamic Zones</h3>
<p>动态区域（Dynamic Zone）允许在单字段中组合多种组件，实现内容结构高度自定义。适用于富文本、页面构建器等场景，支持多类型组件共存和嵌套。</p>
<h3 id="api">API</h3>
<p>Strapi 自动为每个内容类型生成 RESTful 或 GraphQL API，支持内容的增删改查，便于前后端分离和多端接入。</p>
<h3 id="plugins">Plugins</h3>
<p>插件用于扩展 Strapi 功能，如权限管理、内容版本控制、第三方集成等。官方和社区插件丰富，也支持自定义开发。</p>
<h2 id="进阶">进阶</h2>
<p>使用Strapi API 时有时需要对请求参数进行预处理，比如验证、转换等。可以通过中间件（Middleware）来实现。</p>
<h3 id="将请求参数置于-strapi-middleware-中">将请求参数置于 <a href="https://docs.strapi.io/cms/backend-customization/middlewares">Strapi Middleware</a><sup>[1]</sup>
 中</h3>
<p>如果要获取一个 Global Page的内容，普通情况下，我们会把查询参数放在URL 的query中，比如：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>http://localhost:1337/api/global?populate[header][populate][0]=navItems&amp;populate[footer][populate][0]=socialLinks.Link</code></pre></div>
<p>通常情况呢，这个 url 的请求参数一般不会改变，每次都要返回Global Page 的所有内容，那么我们就可以把这个请求参数放在中间件中，避免每次都要在 URL 中传递。我们在请求时直接使用url <code>http://localhost:1337/api/global</code> 即可，而不用带query参数。
这样做的好处是：</p>
<ol>
<li>代码可读性更高</li>
<li>减少了 URL 的复杂度</li>
<li>方便后期维护和修改</li>
</ol>
<p>可通过中间件（Middleware）统一处理请求参数。基本步骤：</p>
<ol>
<li>可使用 <a href="https://docs.strapi.io/cms/cli#strapi-generate">strapi generate:middleware</a><sup>[2]</sup>
 命令生成中间件
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">pnpm run strapi generate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; my-strapi-project@0.1.0 strapi ~/01.Personal/tmp/my-strapi-project
</span></span><span class="line"><span class="cl">&gt; strapi <span class="s2">&#34;generate&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">? Strapi Generators middleware - Generate a middleware <span class="k">for</span> an API
</span></span><span class="line"><span class="cl">? Middleware name global-page-populate
</span></span><span class="line"><span class="cl">? Where <span class="k">do</span> you want to add this middleware? Add middleware to an existing API
</span></span><span class="line"><span class="cl">? Which API is this <span class="k">for</span>? global
</span></span><span class="line"><span class="cl">✔  ++ /api/global/middlewares/global-page-populate.ts</span></span></code></pre></div></div>
</li>
<li>定义中间件函数并处理 <code>ctx.query</code>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"> <span class="kr">import</span> <span class="kr">type</span> <span class="p">{</span> <span class="nx">Core</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;@strapi/strapi&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="kr">const</span> <span class="nx">populate</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nx">header</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">populate</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;navItems&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">   <span class="p">},</span>
</span></span><span class="line"><span class="cl">   <span class="nx">banner</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nx">footer</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">populate</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;logo&#34;</span><span class="p">,</span> <span class="s2">&#34;navItems&#34;</span><span class="p">,</span> <span class="s2">&#34;socialLinks&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="c1">// 获取 dynamic zone 的内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">// const populate = {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//   blocks: {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//     on: {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//       &#34;blocks.hero&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//         populate: {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//           links: true,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//           image: {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//             fields: [&#34;url&#34;, &#34;name&#34;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//           }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//         },
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//       },
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//       &#34;blocks.heading-section&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//         populate: &#39;*&#39;,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//       }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//     }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//   }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"> <span class="kr">export</span> <span class="k">default</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="p">{</span> <span class="nx">strapi</span> <span class="p">}</span><span class="o">:</span> <span class="p">{</span> <span class="nx">strapi</span>: <span class="kt">Core.Strapi</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">ctx</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">populate</span> <span class="o">=</span> <span class="nx">populate</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="nx">strapi</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">&#39;In global-page-populate middleware.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="k">await</span> <span class="nx">next</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">   <span class="p">};</span>
</span></span><span class="line"><span class="cl"> <span class="p">};</span></span></span></code></pre></div></div>
</li>
<li>在 <code>src/api/global/routes/global.ts</code> 注册中间件
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl">  <span class="kr">import</span> <span class="p">{</span> <span class="nx">factories</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;@strapi/strapi&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">export</span> <span class="k">default</span> <span class="nx">factories</span><span class="p">.</span><span class="nx">createCoreRouter</span><span class="p">(</span><span class="s1">&#39;api::global.global&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">config</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">find</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">middlewares</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;api::global.global-page-populate&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span></span></span></code></pre></div></div>
</li>
<li>使用API 请求测试等工具测试
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">curl <span class="s1">&#39;http://localhost:1337/api/global&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 应该返回Global Page 的所有内容</span></span></span></code></pre></div></div>
</li>
</ol>
<h3 id="前端动态渲染-dynamic-zone-组件">前端动态渲染 Dynamic Zone 组件</h3>
<p>前端可根据后端返回的 Dynamic Zone 数据动态渲染组件，为代码如下：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-tsx">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">componentMap</span>: <span class="kt">Record</span><span class="p">&lt;</span><span class="nt">ComponentType</span><span class="p">,</span> <span class="na">any</span><span class="p">&gt;</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.hero&#34;</span><span class="o">:</span> <span class="nx">Hero</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.heading-section&#34;</span><span class="o">:</span> <span class="nx">HeadingSection</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.card-grid&#34;</span><span class="o">:</span> <span class="nx">CardGrid</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.content-with-image&#34;</span><span class="o">:</span> <span class="nx">ContentWithImage</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.faqs&#34;</span><span class="o">:</span> <span class="nx">Faqs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.person-card&#34;</span><span class="o">:</span> <span class="nx">PersonCard</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.markdown&#34;</span><span class="o">:</span> <span class="nx">Markdown</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.featured-articles&#34;</span><span class="o">:</span> <span class="nx">FeaturedArticles</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.newsletter&#34;</span><span class="o">:</span> <span class="nx">Newsletter</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">...</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">blocksFromAPI</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">block</span>: <span class="kt">BlockData</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">Component</span> <span class="o">=</span> <span class="nx">componentMap</span><span class="p">[</span><span class="nx">block</span><span class="p">.</span><span class="nx">__component</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">Component</span> <span class="o">?</span> <span class="p">&lt;</span><span class="nt">Component</span> <span class="na">data</span><span class="o">=</span><span class="p">{</span><span class="nx">block</span><span class="p">}</span> <span class="p">/&gt;</span> <span class="o">:</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span></span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<p>Strapi 是一个强大的 Headless CMS，适合快速构建和管理内容驱动的应用。通过灵活的内容建模、API 生成和插件扩展，Strapi 能满足各种项目需求。本文介绍了 Strapi 的基本概念、主要流程和进阶用法，希望能帮助你快速上手。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Strapi Middleware: <a href="https://docs.strapi.io/cms/backend-customization/middlewares" rel="noopener noreferrer">https://docs.strapi.io/cms/backend-customization/middlewares</a></li><li>strapi generate:middleware: <a href="https://docs.strapi.io/cms/cli#strapi-generate" rel="noopener noreferrer">https://docs.strapi.io/cms/cli#strapi-generate</a></li><li>Strapi: <a href="https://strapi.io/" rel="noopener noreferrer">https://strapi.io/</a></li></ol>
            </div>]]></description></item><item><title>软件开发中的跨功能性需求（RFC）</title><link>https://guzhongren.github.io/2025/04/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E8%B7%A8%E5%8A%9F%E8%83%BD%E6%80%A7%E9%9C%80%E6%B1%82rfc/</link><pubDate>Mon, 28 Apr 2025 08:40:12 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/04/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E8%B7%A8%E5%8A%9F%E8%83%BD%E6%80%A7%E9%9C%80%E6%B1%82rfc/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="引言">引言</h2>
<p>作为程序员的你，正在开发一款基于全球地图的某资源分布网站，你的产品会被各个国家的人使用，而每个国家都有不同的法律法规和文化习惯。你需要考虑到这些因素，以确保你的产品在全球范围内都能正常使用。比如有争议的边界不能让用户看到对自己国家不利的标记，那么你需要怎么做呢？这时候，你就需要考虑跨功能性需求了。</p>
<h3 id="什么是跨功能性需求">什么是跨功能性需求</h3>
<p>跨功能性需求（Cross-Functional Requirements, CFRs）是指那些不直接与特定功能相关，但对整个系统的质量、性能和用户体验有重要影响的需求。例如，性能、安全性和可扩展性等。这些需求通常被称为“非功能性需求”，但它们对系统的成功至关重要。</p>
<h3 id="其在软件开发中的重要性">其在软件开发中的重要性</h3>
<p>跨功能性需求贯穿于软件开发的各个阶段，直接影响系统的稳定性、用户满意度和长期维护成本。例如，在一个实时通信应用中，低延迟（性能需求）和数据加密（安全性需求）是用户体验的核心。如果忽视这些需求，可能导致系统在高负载或恶意攻击下崩溃，甚至无法满足用户的基本期望。</p>
<h2 id="跨功能性需求详细讨论">跨功能性需求详细讨论</h2>
<table>
  <thead>
      <tr>
          <th>需求类别</th>
          <th>具体问题</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>可扩展性（Extensibility）</strong></td>
          <td>是否需要组件化？是否需要提供一个插件功能，由谁来实施？</td>
      </tr>
      <tr>
          <td><strong>可移植性（Portability）</strong></td>
          <td>是否有迁移到另一个数据库产品或操作系统的必要性？</td>
      </tr>
      <tr>
          <td><strong>可安装性和可部署性（Installability &amp; Deployment）</strong></td>
          <td>需要提供什么样的基础设施？需要什么样的安装便利性？是否支持持续交付？如何回滚或升级版本？</td>
      </tr>
      <tr>
          <td><strong>兼容性（Compatibility）</strong></td>
          <td>需要与哪些其他系统集成？需要遵循哪些行业标准？是否需要考虑现有数据格式？</td>
      </tr>
      <tr>
          <td><strong>可集成性和互操作性（Integratability &amp; Interoperability）</strong></td>
          <td>是否需要提供 API 或库供其他系统使用？版本管理和升级策略是什么？</td>
      </tr>
      <tr>
          <td><strong>可复用性（Leveragability &amp; Reuse）</strong></td>
          <td>是否能够复用企业现有组件/库，或者当前组件/库是否将被重用？</td>
      </tr>
      <tr>
          <td><strong>可伸缩性（Scalability）</strong></td>
          <td>如何根据不断变化的用户量来提高吞吐量？如何对此进行测试？</td>
      </tr>
      <tr>
          <td><strong>版本化和升级策略（Versioning and upgrades）</strong></td>
          <td>版本化策略是什么？如何跟踪内部/外部的版本？有没有向后兼容的限制？</td>
      </tr>
      <tr>
          <td><strong>可访问性（Accessibility）</strong></td>
          <td>是否支持有特殊需要的用户（如读屏）？</td>
      </tr>
      <tr>
          <td><strong>本地化和国际化（Localisation &amp; Internationalisation）</strong></td>
          <td>是否支持多语言？日期/时间/货币的转换和翻译？</td>
      </tr>
      <tr>
          <td><strong>可用性和用户体验（Usability and user experience）</strong></td>
          <td>用户体验对系统有多重要？是否有公司用户体验准则？是否支持多设备？</td>
      </tr>
      <tr>
          <td><strong>分布性（Distributability）</strong></td>
          <td>系统是否能在特定区域使用？是否支持离线运行？如何同步信息？</td>
      </tr>
      <tr>
          <td><strong>帮助与支持（Help &amp; Support）</strong></td>
          <td>是否需要用户文档、教程或支持团队？是否需要计划培训？</td>
      </tr>
      <tr>
          <td><strong>可配置性（Configurability）</strong></td>
          <td>用户或管理员是否可以配置功能？如何进行配置管理？</td>
      </tr>
      <tr>
          <td><strong>支持性（Supportability）</strong></td>
          <td>用户/操作支持的级别是什么？如何提供支持？</td>
      </tr>
      <tr>
          <td><strong>归档（Archiving）</strong></td>
          <td>归档什么信息？何时归档？如何归档？谁可以访问归档信息？</td>
      </tr>
      <tr>
          <td><strong>可用性（Availability）</strong></td>
          <td>是否有可用性目标？需要什么架构来满足这些要求？是否有高峰负载需求？</td>
      </tr>
      <tr>
          <td><strong>容量（Capacity）</strong></td>
          <td>是否有存储要求？高峰负载如何处理？系统需要处理的数据量和用户数量？</td>
      </tr>
      <tr>
          <td><strong>连续性（Continuity）</strong></td>
          <td>是否有灾难恢复计划？</td>
      </tr>
      <tr>
          <td><strong>数据完整性和一致性（Data Integrity and Consistency）</strong></td>
          <td>是否需要数据校验、日志追踪或数据恢复机制？</td>
      </tr>
      <tr>
          <td><strong>可维护性（Maintainability）</strong></td>
          <td>最大可容忍停机时间是什么？是否有停机通知要求？错误页面如何处理？</td>
      </tr>
      <tr>
          <td><strong>监控（Monitoring）</strong></td>
          <td>应该衡量哪些业务/技术指标？如何监测？需要哪些警报？</td>
      </tr>
      <tr>
          <td><strong>多环境支持（Multiple Environment Support）</strong></td>
          <td>需要多少环境？如何配置和管理这些环境？</td>
      </tr>
      <tr>
          <td><strong>性能（Performance）</strong></td>
          <td>吞吐量/响应时间要求是什么？是否需要性能测试？是否需要考虑异步场景？</td>
      </tr>
      <tr>
          <td><strong>弹性和容错性（Resilience &amp; Fault Tolerance）</strong></td>
          <td>如果外部依赖失效，系统如何降级？</td>
      </tr>
      <tr>
          <td><strong>可靠性（Reliability）</strong></td>
          <td>不可靠的成本是什么？需要多少成本来保证可靠？</td>
      </tr>
      <tr>
          <td><strong>可审计性（Auditability）</strong></td>
          <td>哪些操作需要被跟踪？是否有法律或监管要求？</td>
      </tr>
      <tr>
          <td><strong>认证（Authentication）</strong></td>
          <td>如何鉴别用户身份？是否遵循标准或使用现有认证系统？</td>
      </tr>
      <tr>
          <td><strong>授权（Authorisation）</strong></td>
          <td>哪些角色和权限是必要的？如何维护和应用权限？</td>
      </tr>
      <tr>
          <td><strong>法律合规性（Legal Compliance）</strong></td>
          <td>是否有数据/系统或软件交付过程的法律限制？</td>
      </tr>
      <tr>
          <td><strong>数据隐私（Data Privacy）</strong></td>
          <td>哪些数据需要加密？哪些数据对用户和操作人员可见/隐藏？如何处理脱敏？</td>
      </tr>
      <tr>
          <td><strong>安全性（Security）</strong></td>
          <td>是否需要安全审计或渗透测试？企业的安全准则是什么？是否有 SSL 或 VPN 要求？</td>
      </tr>
  </tbody>
</table>
<h2 id="跨功能性需求的挑战">跨功能性需求的挑战</h2>
<h3 id="难以量化和验证">难以量化和验证</h3>
<p>跨功能性需求的定义通常较为模糊。例如：</p>
<ul>
<li>性能需求可能以“系统应快速响应”描述，但“快速”缺乏具体标准。</li>
<li>安全性需求可能以“系统应安全”描述，但安全的程度难以量化。</li>
</ul>
<h4 id="解决方法">解决方法</h4>
<ul>
<li>使用具体的指标定义需求，例如“响应时间小于 200 毫秒”。</li>
<li>借助工具（如 JMeter）进行性能测试，或使用安全扫描工具（如 OWASP ZAP）验证安全性。</li>
</ul>
<h3 id="与功能性需求的冲突">与功能性需求的冲突</h3>
<p>跨功能性需求可能与功能性需求发生冲突。例如：</p>
<ul>
<li>为了提高性能，可能需要简化某些功能。</li>
<li>为了增强安全性，可能会增加用户操作的复杂性。</li>
</ul>
<h4 id="实例权衡性能与安全性">实例：权衡性能与安全性</h4>
<p>某在线支付系统在设计时，为了提高性能，采用了分布式架构；但为了保证安全性，又引入了多层加密和双因子认证。</p>
<h2 id="如何发现跨功能性需求">如何发现跨功能性需求</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Software-Engineering/CFR/crf.1e8tg7u4l3.webp" alt="CFR" /></p>
<p>跨功能需求影响着软件的整个生命周期，在项目交付过程中，可以根据软件产品的目标和特点，从以下几个视角来收集和确定跨功能需求：</p>
<ul>
<li><strong>研发团队视角</strong>，关注软件研发过程中的跨功能特性，包括软件架构设计相关的一些特性，如可扩展性、可移植性、可伸缩性、兼容性等。</li>
<li><strong>用户视角</strong>，关注软件使用过程中的跨功能特性，关注用户体验，如设备兼容性、可访问性、可配置性等。</li>
<li><strong>运维团队视角</strong>，关注软件维护过程中的跨功能特性，包括基础设施运营维护、数据维护、故障恢复相关的一些特性，如性能、可用性、容量、监控、熔断降级策略等。</li>
<li><strong>安全审计团队视角</strong>，关注软件全生命周期的安全相关的跨功能特性，大部分企业有专门的安全审计部门，会对软件产品的安全提出很多需求，如可审计性，法律合规性，数据隐私性。</li>
</ul>
<h2 id="解决方案与实践">解决方案与实践</h2>
<h3 id="需求优先级的设定">需求优先级的设定</h3>
<p>通过与利益相关者协商，明确跨功能性需求的优先级。例如：</p>
<ul>
<li>使用 MoSCoW 方法（Must, Should, Could, Won&rsquo;t）分类需求。</li>
<li>在项目初期定义关键性能指标（KPIs）和安全目标。</li>
</ul>
<h4 id="实例敏捷开发中的需求优先级">实例：敏捷开发中的需求优先级</h4>
<p>某团队在敏捷开发中，每个迭代周期都会评估跨功能性需求的优先级，并在冲刺计划中分配资源。</p>
<h3 id="跨团队协作的重要性">跨团队协作的重要性</h3>
<p>跨功能性需求通常涉及多个团队的协作。例如：</p>
<ul>
<li>开发团队需要与运维团队合作，确保系统的可扩展性。</li>
<li>安全团队需要与开发团队合作，进行代码审查和漏洞修复。</li>
</ul>
<h4 id="实例devsecops-实践">实例：DevSecOps 实践</h4>
<p>某企业通过 DevSecOps 实践，将安全性集成到开发和运维流程中，确保跨功能性需求在整个生命周期内得到满足。</p>
<h2 id="案例分析">案例分析</h2>
<h3 id="实际项目中的跨功能性需求处理">实际项目中的跨功能性需求处理</h3>
<p>在某大型电商平台的开发中，性能和安全性是两个关键的跨功能性需求。通过以下措施，成功满足了这些需求：</p>
<ol>
<li>
<p><strong>性能优化</strong>：</p>
<ul>
<li>使用 Redis 缓存机制减少数据库查询。</li>
<li>部署 Nginx 负载均衡器分发流量。</li>
</ul>
</li>
<li>
<p><strong>安全性增强</strong>：</p>
<ul>
<li>引入 Web 应用防火墙（WAF）防止常见攻击（如 SQL 注入）。</li>
<li>定期进行渗透测试，发现并修复漏洞。</li>
</ul>
</li>
</ol>
<blockquote>
<p>来源：<a href="https://redis.io/documentation">Redis 官方文档</a><sup>[1]</sup>

来源：<a href="https://nginx.org/en/docs/">Nginx 官方文档</a><sup>[2]</sup>
</p></blockquote>
<h3 id="性能">性能</h3>
<p>性能需求通常包括以下几个方面：</p>
<ol>
<li><strong>响应时间</strong>：用户操作后系统的响应速度。例如，搜索引擎的响应时间通常需要在几百毫秒内完成。</li>
<li><strong>吞吐量</strong>：系统在单位时间内能够处理的请求数量。例如，支付网关需要支持每秒数千笔交易。</li>
<li><strong>资源利用率</strong>：系统在运行时对 CPU、内存和网络等资源的使用效率。</li>
</ol>
<h4 id="实例高性能电商平台">实例：高性能电商平台</h4>
<p>某电商平台在促销活动期间，通过以下措施优化性能：</p>
<ul>
<li>使用 Redis 缓存热门商品数据，减少数据库查询压力。</li>
<li>部署 CDN（内容分发网络）加速静态资源加载。</li>
</ul>
<blockquote>
<p>来源：<a href="https://redis.io/documentation">Redis 官方文档</a><sup>[1]</sup>
</p></blockquote>
<h3 id="可扩展性">可扩展性</h3>
<p>可扩展性需求确保系统能够随着用户数量或数据量的增长而扩展。主要包括：</p>
<ol>
<li><strong>水平扩展</strong>：通过增加更多服务器来提升系统能力。</li>
<li><strong>垂直扩展</strong>：通过升级硬件资源（如 CPU 和内存）来提升性能。</li>
</ol>
<h4 id="实例分布式数据库">实例：分布式数据库</h4>
<p>某社交媒体平台采用分布式数据库（如 MongoDB）来存储用户数据，支持动态扩展以应对用户增长。</p>
<blockquote>
<p>来源：<a href="https://www.mongodb.com/docs/">MongoDB 官方文档</a><sup>[3]</sup>
</p></blockquote>
<h3 id="安全性">安全性</h3>
<p>安全性需求包括以下几个方面：</p>
<ol>
<li><strong>数据加密</strong>：保护敏感数据在传输和存储中的安全性。</li>
<li><strong>身份验证</strong>：确保只有授权用户能够访问系统。</li>
<li><strong>权限管理</strong>：限制用户对系统资源的访问范围。</li>
</ol>
<h4 id="实例oauth-20">实例：OAuth 2.0</h4>
<p>某金融应用通过 OAuth 2.0 实现第三方登录，同时保护用户的敏感信息。</p>
<blockquote>
<p>来源：<a href="https://oauth.net/2/">OAuth 2.0 规范</a><sup>[4]</sup>
</p></blockquote>
<h2 id="总结">总结</h2>
<p>回到开头的问题，如何处理全球地图资源分布网站的跨功能性需求？可以通过以下步骤：</p>
<ol>
<li><strong>需求收集</strong>：与各国法律法规专家沟通，了解不同国家的要求，比如使用不同国家官方支持的地图地址。</li>
<li><strong>需求优先级</strong>：使用 MoSCoW 方法确定哪些需求是必须的，哪些是可选的， 这里就是国界。</li>
<li><strong>跨团队协作</strong>：与开发、运维和安全团队密切合作，确保需求在设计和实现中得到满足, 最好实现配置即代码。</li>
<li><strong>测试与验证</strong>：在不同国家的环境中进行测试，确保系统符合各国的法律法规。</li>
</ol>
<p>当然还有一种最简单的方法，只提供卫星影像地图，不提供边界图层。</p>
<h3 id="关键点回顾与未来展望">关键点回顾与未来展望</h3>
<p>跨功能性需求是软件开发中不可忽视的一部分。通过合理的需求优先级设定和跨团队协作，可以有效应对这些挑战。未来，随着技术的进步，跨功能性需求的管理将更加智能化和自动化。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Redis 官方文档: <a href="https://redis.io/documentation" rel="noopener noreferrer">https://redis.io/documentation</a></li><li>Nginx 官方文档: <a href="https://nginx.org/en/docs/" rel="noopener noreferrer">https://nginx.org/en/docs/</a></li><li>MongoDB 官方文档: <a href="https://www.mongodb.com/docs/" rel="noopener noreferrer">https://www.mongodb.com/docs/</a></li><li>OAuth 2.0 规范: <a href="https://oauth.net/2/" rel="noopener noreferrer">https://oauth.net/2/</a></li></ol>
            </div>]]></description></item><item><title>基于AI大模型开发一个Slack Bot的总结</title><link>https://guzhongren.github.io/2025/03/%E5%9F%BA%E4%BA%8Eai%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAslack-bot%E7%9A%84%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 28 Mar 2025 22:32:34 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/03/%E5%9F%BA%E4%BA%8Eai%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAslack-bot%E7%9A%84%E6%80%BB%E7%BB%93/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="起因">起因</h2>
<p>最近一个半月都在Beach，虽然离开了项目，但每天的生活比项目期间还要忙碌，同时也学到了很多新知识。</p>
<hr>
<p>在Beach期间，我参与了两个与AI相关的项目。虽然AI功能的开发占比不大，但通过代码学习了AI开发的相关模式，例如Google Cloud Platform、Terraform、Vertex AI、CrewAI以及Agent的编排。Agent编排在正式项目中尤为重要，因为AI无法一次性理解并完成复杂任务，需要将任务（Work）拆分为多个子任务（Task），通过编排的Agent组合完成。这种编排的控制逻辑和编码逻辑基本一致，主要包括顺序、循环和组合等基本形式。</p>
<hr>
<p>第一个项目是关于遗留系统维护质量评估的，涉及了许多新技术，例如 CrewAI、Vertex AI、Streamlit、Hugging Face 和 Agent 编排。在这个项目中，我首次使用 Python Flask 独立构建了一个后端服务，并结合 Streamlit 开发了服务端渲染的前端，为用户提供了优秀的交互体验。简单来说，这个功能类似于一个聊天记录的展示。</p>
<hr>
<p>第二个项目与SRE相关，目标是将可观测链路上的 Alert 转换为 Incident，并通过<code>ChatOps</code>形式处理这些 Incident。为此，我们需要一个集成AI功能的 Bot 来提升 Incident 处理效率。例如，当一个 Manager 加入 Incident Channel 时，需要一个简要的总结（当前 Incident 的情况总结）。这也是本文的来源。</p>
<h2 id="需求">需求</h2>
<p>在<code>ChatOps</code>中，当 Manager 加入 Incident 处理的聊天组时，需要及时获取当前 Incident 的处理情况，包括实时状态、关键行为以及可能的建议。</p>
<h2 id="基本流程">基本流程</h2>
<p>基于上述需求，我们需要为 Chat 设计一个 Bot。这个 Bot 在接收到简单指令后，可以生成当前 Incident 的关键数据报告，类似于 PIR（Post-Incident Report），但不需要那么详细。</p>
<div class="mermaid" id="id-1"></div><h2 id="开发流程">开发流程</h2>
<p>在开发过程中，我们需要完成以下任务：</p>
<ol>
<li>在 Slack 上创建一个 Bot，作为用户与 Slack 之间的沟通桥梁。</li>
<li>使用无服务器函数处理 Bot 发送的请求，获取 AI 所需数据，并将其传递给 AI 模型，最终将AI返回的内容发送回 Slack。</li>
</ol>
<h3 id="创建slack-bot">创建Slack Bot</h3>
<p>在<a href="https://api.slack.com/apps">Slack官网</a><sup>[1]</sup>
上创建 Bot 有两种方式： 1, Manifest， 2，Scratch 方式</p>
<div class="mermaid" id="id-2"></div><div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw" aria-hidden="true"></i>提示<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">创建Slack Bot需要Slack Workspace的管理员权限。</div>
        </div>
    </div>
<h4 id="manifest方式">Manifest方式</h4>
<p>这种方式相对简单，支持 JSON 和 YAML 格式，所有配置都集中在 Manifest文件中。以下是一个 YAML 格式的示例：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">display_information</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">XBot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">bot_user</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">display_name</span><span class="p">:</span><span class="w"> </span><span class="l">XBot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">always_online</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">slash_commands</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">/summary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;ServerLess HTTPS URL&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="l">summary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">usage_hint</span><span class="p">:</span><span class="w"> </span><span class="l">it</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">should_escape</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">oauth_config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scopes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">bot</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">app_mentions:read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">channels:history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">channels:join</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">channels:read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">chat:write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">chat:write.public</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">commands</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">incoming-webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">groups:history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">im:history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">mpim:history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">users:read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">settings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">event_subscriptions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">request_url</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;ServerLess HTTPS URL&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">bot_events</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">app_mention</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">interactivity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">is_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">request_url</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;ServerLess HTTPS URL&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">org_deploy_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">socket_mode_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">token_rotation_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span></span></span></code></pre></div></div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>示例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">ServerLess HTTPS URL: <a href="https://serverless.functions.url/x-bot">https://serverless.functions.url/x-bot</a><sup>[2]</sup></div>
        </div>
    </div>
<p>这种方式适合已经创建过一个 Bot，需要重新创建的情况，例如测试完成后需要创建正式的 Bot。</p>
<h4 id="scratch方式">Scratch方式</h4>
<p>按照提示逐步完成配置，涉及多个模块，例如<code>Basic Information</code>、<code>Socket Mode</code>、<code>Incoming Webhooks</code>、<code>Slash Command</code>、<code>OAuth &amp; Permissions</code>和<code>Event Subscriptions</code>等。具体权限可参考 Manifest 的 YAML 配置。</p>
<p>通过上述两种方式之一创建Bot后，需要获取以下Token，这些Token将在无服务器函数中使用：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">项目</th>
          <th style="text-align: left">位置</th>
          <th style="text-align: left">操作</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">SIGNING_SECRET</td>
          <td style="text-align: left"><code>Basic Information</code> -&gt; <code>Signing Secret</code></td>
          <td style="text-align: left">复制</td>
      </tr>
      <tr>
          <td style="text-align: left">SLACK_APP_TOKEN</td>
          <td style="text-align: left"><code>Basic Information</code> -&gt; <code>App-Level Tokens</code></td>
          <td style="text-align: left">点击<code>Generate Token and Scope</code>，命名并赋予<code>connections:write</code>权限</td>
      </tr>
      <tr>
          <td style="text-align: left">SLACK_BOT_TOKEN</td>
          <td style="text-align: left"><code>OAuth &amp; Permissions</code> -&gt; <code>OAuth Tokens</code></td>
          <td style="text-align: left">复制</td>
      </tr>
  </tbody>
</table>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>重要提示<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>在本地开发代码并与Slack测试时，启用<code>Socket Mode</code>可以避免每次都部署代码，从而节省时间和资源</li>
<li>启用<code>Socket Mode</code>时，如果多人开发同一个Bot，可能会收到彼此的请求返回结果。建议每人创建一个独立的Workspace以避免冲突</li>
<li>更改完配置之后，需要将 App 安装到你的 Workspace 中</li>
</ul>
</div>
        </div>
    </div>
<h3 id="创建无服务器函数处理用户请求">创建无服务器函数处理用户请求</h3>
<p>这里选择使用 Python 来作为 Serferless 处理工具，并将其部署在云服务器上，比如 AWS Lambda, Azure Function， 或者 Google Cloud Platform 的 Cloud Run Functions中，这里不讲工程构建之类的，直接给出部分参考代码。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">slack_bolt</span> <span class="kn">import</span> <span class="n">App</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">slack_bolt.adapter.flask</span> <span class="n">imp</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">vertexai</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">vertexai.preview.generative_models</span> <span class="kn">import</span> <span class="n">GenerativeModel</span><span class="p">,</span> <span class="n">GenerationConfig</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">token</span><span class="o">=</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;SLACK_BOT_TOKEN&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">signing_secret</span><span class="o">=</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;SIGNING_SECRET&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">raise_error_for_unhandled_request</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="nd">@app.command</span><span class="p">(</span><span class="s2">&#34;/summary&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">handle_summary_command</span><span class="p">(</span><span class="n">ack</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">say</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">ack</span><span class="p">(</span><span class="s2">&#34;Thinking...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">channel_id</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s2">&#34;channel_id&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">check_channel_membership</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">channel_id</span><span class="p">,</span> <span class="n">say</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">slack_channel_histories</span> <span class="o">=</span> <span class="n">get_chat_history</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">channel_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">input</span> <span class="o">=</span> <span class="n">format_events</span><span class="p">(</span><span class="n">incident_id</span><span class="p">,</span> <span class="n">slack_channel_histories</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Use AI to summarize</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">system_prompt</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;</span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="s1">    You are an operations analysis expert. You .....
</span></span></span><span class="line"><span class="cl"><span class="s1">    ......
</span></span></span><span class="line"><span class="cl"><span class="s1">    Output format:
</span></span></span><span class="line"><span class="cl"><span class="s1">    ......
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">vertexai</span><span class="o">.</span><span class="n">init</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">project</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;GCP_PROJECT&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">location</span><span class="o">=</span><span class="s2">&#34;us-central1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span> <span class="o">=</span> <span class="n">GenerativeModel</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">model_name</span><span class="o">=</span><span class="s2">&#34;gemini-2.0-flash&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">system_instruction</span><span class="o">=</span><span class="p">[</span><span class="n">system_prompt</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">gen_config</span> <span class="o">=</span> <span class="n">GenerationConfig</span><span class="p">(</span><span class="n">temperature</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">generate_content</span><span class="p">([</span><span class="n">prompt</span><span class="p">],</span> <span class="n">generation_config</span><span class="o">=</span><span class="n">gen_config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span>
</span></span><span class="line"><span class="cl">    <span class="n">say</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">blocks</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;header&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;plain_text&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;Here is the summary of the incident:&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;section&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;mrkdwn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="n">summary</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">handler</span> <span class="o">=</span> <span class="n">SlackRequestHandler</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Main</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">slack_bot</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="n">handle</span><span class="p">(</span><span class="n">request</span><span class="p">)</span></span></span></code></pre></div></div>
<p>比如使用如下命令将这个程序部署在 GCP 中：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gcloud functions deploy x-bot <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --runtime python310 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --trigger-http <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --allow-unauthenticated <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --entry-point slack_bot <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --timeout<span class="o">=</span>120s <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --set-env-vars <span class="nv">GCP_PROJECT</span><span class="o">=</span><span class="s1">&#39;&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --set-env-vars <span class="nv">SLACK_BOT_TOKEN</span><span class="o">=</span><span class="s1">&#39;&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --set-env-vars <span class="nv">SIGNING_SECRET</span><span class="o">=</span><span class="s1">&#39;&#39;</span></span></span></code></pre></div></div>
<h2 id="注意事项">注意事项</h2>
<p>部署好 Serverless Function 之后，需要将Serverless Function 的访问的 URL 添加到 Slack App 的配置中；</p>
<ul>
<li>将 <code>Socket Mode</code> 关闭</li>
<li>将 URL 填到 <code>Event Subscriptions</code>, 需要通过其校验</li>
<li>将 URL 填到 <code>Slash Commands</code> 添加的那个Command（<code>/summary</code>） 中</li>
</ul>
<h2 id="总结">总结</h2>
<p>Slack bot 的开发相对简单，大部分内容是简单的配置；重要的是将获取到的数据以某种特定的 Prompt ，并将其传递给 AI model 获取到准确的结果。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Slack官网: <a href="https://api.slack.com/apps" rel="noopener noreferrer">https://api.slack.com/apps</a></li><li>https://serverless.functions.url/x-bot: <a href="https://serverless.functions.url/x-bot" rel="noopener noreferrer">https://serverless.functions.url/x-bot</a></li></ol>
            </div>]]></description></item><item><title>本地跑deepseek 7b模型</title><link>https://guzhongren.github.io/2025/02/%E6%9C%AC%E5%9C%B0%E8%B7%91deepseek-7b%E6%A8%A1%E5%9E%8B/</link><pubDate>Tue, 11 Feb 2025 22:31:58 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/02/%E6%9C%AC%E5%9C%B0%E8%B7%91deepseek-7b%E6%A8%A1%E5%9E%8B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="背景">背景</h2>
<p>最近，Deepseek 因其卓越的性能和高效的推理速度在技术圈内引起了广泛关注。</p>
<p>Deepseek 采用了先进的算法(使用汇编和 CUDA 混编的方式调用 GPU)和训练方法(蒸馏)，不仅显著提升了推理速度，还降低了对硬件配置的要求，使其能够在更多设备上运行。</p>
<p>然而，使用在线 Deepseek 服务时，用户可能会遇到“服务器繁忙，请稍后再试”的问题。</p>
<p>作为程序员，我们自然不能忍受这种情况，因此本文将指导你如何在本地搭建 Deepseek 模型。</p>
<h2 id="搭建步骤">搭建步骤</h2>
<h3 id="所需软件及环境">所需软件及环境</h3>
<h4 id="环境">环境</h4>
<ul>
<li><strong>操作系统</strong>: MacOS M1 (Sequoia [Version 15.3])</li>
</ul>
<h4 id="软件">软件</h4>
<ul>
<li><strong><a href="https://ollama.com/">Ollama</a><sup>[1]</sup>
</strong>: 用于管理和运行大模型。</li>
<li><strong><a href="https://chatboxai.app/">Chatbox AI</a><sup>[2]</sup>
</strong>: 提供与大模型交互的界面。</li>
</ul>
<h3 id="安装步骤">安装步骤</h3>
<h4 id="安装-ollama">安装 Ollama</h4>
<p>Ollama 可以通过命令行或手动下载安装包进行安装。手动安装后，系统会自动启动 Ollama 服务；而通过命令行安装后，则需要手动启动服务。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">brew install ollama
</span></span><span class="line"><span class="cl"><span class="c1"># 安装完成后，启动 Ollama 服务</span>
</span></span><span class="line"><span class="cl">ollama serve</span></span></code></pre></div></div>
<h4 id="运行-deepseek模型">运行 deepseek模型</h4>
<ol>
<li>访问 Ollama 模型库，搜索 deepseek。</li>
<li>选择 deepseek-r1 模型，并选择 7b 版本。</li>
<li>点击复制按钮，将命令行粘贴到终端中运行。Ollama 将自动拉取并启动该模型。</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ollama run deepseek-r1:7b</span></span></code></pre></div></div>
<h4 id="安装-chatbox">安装 Chatbox</h4>
<p>Chatbox 是与大模型进行交互的界面。你可以选择直接安装软件或通过 Docker 运行。推荐使用软件安装，以便快速启动和操作。</p>
<p>可安装软件或者通过docker 运行，推荐软件安装，可以快速启动软件来提速。</p>
<h4 id="配置">配置</h4>
<p>Chatbox 安装完成并且 deepseek 大模型运行起来后，在 Chatbox -&gt; Settings 中选择本地启动的模型即可。</p>
<h2 id="总结">总结</h2>
<p>随着人工智能技术的快速发展，社会分工可能会发生显著变化, 最明显的是人工智能会淘汰掉社会分工的中间层。</p>
<p>未来的趋势可能是：要么成为顶层的规则设计者，要么成为底层的实践者。通过本地搭建和运行 Deepseek 模型，我们不仅能够避免在线服务的限制，还能更深入地理解和掌握这一前沿技术。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Ollama: <a href="https://ollama.com/" rel="noopener noreferrer">https://ollama.com/</a></li><li>Chatbox AI: <a href="https://chatboxai.app/" rel="noopener noreferrer">https://chatboxai.app/</a></li></ol>
            </div>]]></description></item><item><title>Home Assistant搭建和配置并配置米家集成极简教程</title><link>https://guzhongren.github.io/2025/01/home-assistant%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%B1%B3%E5%AE%B6%E9%9B%86%E6%88%90%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/</link><pubDate>Sun, 05 Jan 2025 21:55:05 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/01/home-assistant%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%B1%B3%E5%AE%B6%E9%9B%86%E6%88%90%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="小米发布home-assistant-集成">小米发布Home Assistant 集成</h2>
<p>2024年底，小米突然在 GitHub 上开源了<a href="https://github.com/XiaoMi/ha_xiaomi_home">基于Home Assistant的米家集成</a><sup>[1]</sup>
，顿时引起热议，正好我家里也是小米的设备，并且也是个Home Assistant 小白，所以正好可以探索一波。</p>
<p>因为网上有很多关于Home Assistant的说明及安装教程, 在这推荐<a href="https://sspai.com/post/95117">正是入坑好时节：在米家官方支持之际，再聊新人 Home Assistant 入门</a><sup>[2]</sup>
，我就不赘述了。</p>
<h2 id="基于-docker-的home-assistant-安装并集成小米集成">基于 Docker 的Home Assistant 安装并集成小米集成</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 创建本地路径用于挂在其道 Docker container 中</span>
</span></span><span class="line"><span class="cl">mkdir -p home-assistant/custom_components/hacs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启动 Home assistant 最新的镜像</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 设置时区</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 配置目录映射</span>
</span></span><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --name homeassistant <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --privileged <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --restart<span class="o">=</span>unless-stopped <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -e <span class="nv">TZ</span><span class="o">=</span>Asia/Shanghai <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v ~/home-assistant:/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --network<span class="o">=</span>host <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>homeassistant/home-assistant
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在容器中安装HACS</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it homeassistant sh -c <span class="s2">&#34;mkdir -p /config/custom_components &amp;&amp; cd /config/custom_components &amp;&amp; wget -O - https://get.hacs.xyz | bash -&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">##===NOT IMPORTANT===</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Restart HA</span>
</span></span><span class="line"><span class="cl"><span class="c1"># `Add Intergration` to use HACS</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Authrizate HACS with GitHub</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Add `Custom repositories`</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Download</span>
</span></span><span class="line"><span class="cl"><span class="c1"># `Add Intergration` to use Xiaomi Home</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Auth via OAuth2 of xiaomi</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Chose phone or email</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Change url of `homeassistant.local` to localhost</span></span></span></code></pre></div></div>
<p>在正确操作如上步骤，重启Home Assistant 容器之后，访问 http://localhost:8123/ 就可以体验连接了自己家的小米账号的 Home Assistant 了。</p>
<h2 id="总结">总结</h2>
<p>小米发布的 Home Assistant集成确实很简单，实用, 就像大家说的，通过这次开源和发布，小米已经在家庭物联网这块占据了领导地位，为其后续各种设备集成，扩展奠定了坚实的基础。</p>
<p>如果小米后续推出其 NAS 集成，肯定又会收割一波 <code>流量</code>。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>基于Home Assistant的米家集成: <a href="https://github.com/XiaoMi/ha_xiaomi_home" rel="noopener noreferrer">https://github.com/XiaoMi/ha_xiaomi_home</a></li><li>正是入坑好时节：在米家官方支持之际，再聊新人 Home Assistant 入门: <a href="https://sspai.com/post/95117" rel="noopener noreferrer">https://sspai.com/post/95117</a></li></ol>
            </div>]]></description></item><item><title>Git多 user 管理</title><link>https://guzhongren.github.io/2024/08/git%E5%A4%9Auser%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 17 Aug 2024 07:53:16 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2024/08/git%E5%A4%9Auser%E7%AE%A1%E7%90%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="痛点">痛点</h2>
<p>平时在一个电脑上会有不同的项目开发，尤其是个人项目和公司项目；</p>
<ul>
<li>通常，我们不希望工作在公司项目上的时候用自己个人的git 信息提交commit, 相反也是一样</li>
<li>在不同目录下，在命令行中切换git config 也是个重复劳动的工作，比较费精力</li>
</ul>
<h2 id="方案">方案</h2>
<h3 id="方案1不同的gitconfig配置">方案1：不同的gitconfig配置</h3>
<p>此方案的实现思路是，git 检测当前目录是否是已经配置的目录，如果是配置的目录，那么就加载对应的gitconfig</p>
<h4 id="步骤">步骤</h4>
<ul>
<li>更新<code>~/.gitconfig</code>, 按需追加并修复如下内容</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-git">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-git" data-lang="git">[includeIf &#34;gitdir:~/01.Project/&#34;]
  path = ~/.gitconfigs/.gitconfig-personal

[includeIf &#34;gitdir:~/04.company/&#34;]
  path = ~/.gitconfigs/.gitconfig-company</code></pre></div>
<ul>
<li>建立相应的目录和文件，如~/.gitconfigs/.gitconfig-personal</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">mkdir -p ~/.gitconfigs1 <span class="o">&amp;&amp;</span> touch ~/.gitconfigs1/.gitconfig-personal</span></span></code></pre></div></div>
<ul>
<li>配置个人信息</li>
</ul>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-git">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-git" data-lang="git">[user]
	email = personal@email.com
	name = personalName
	signingkey = signingkey
[commit]
	gpgsign = true
[init]
	defaultBranch = main
[tag]
	forceSignAnnotated = true
[pull]
	rebase = true
[gpg]
	program = gpg
[core]
	sshCommand = ssh -i ~/.ssh/id_github
	ignorecase = false</code></pre></div>
<p>如上内容根据自己的需求更改即可。</p>
<h3 id="方案2简化git-config-命令">方案2：简化git config 命令</h3>
<h4 id="思路">思路</h4>
<p>使用git alias 执行命令加载不同的配置</p>
<h4 id="步骤-1">步骤</h4>
<ul>
<li>在~/.gitconfig中追加如下配置，并按需更改即可</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-git">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-git" data-lang="git">
[alias]
  personal = &#34;!f() { git config user.name &#39;personalUserName&#39; &amp;&amp; git config user.email &#39;personal@email.com&#39; &amp;&amp; git config --global user.signingkey KEY; }; f&#34;
  company = &#34;!f() { git config user.name &#39;company&#39; &amp;&amp; git config user.email &#39;company@email.com&#39; &amp;&amp; git config --global user.signingkey KEY; }; f&#34;</code></pre></div>
<ul>
<li>使用时只需要执行一个git alias命令，如下</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git company</span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<p>99%的事物皆可自动化！</p>
<p>第一种方案自动化程度更高，更可取。</p>
]]></description></item><item><title>MacOS 使用指纹解锁 Sudo 密码</title><link>https://guzhongren.github.io/2024/07/macos-%E4%BD%BF%E7%94%A8%E6%8C%87%E7%BA%B9%E8%A7%A3%E9%94%81-sudo-%E5%AF%86%E7%A0%81/</link><pubDate>Wed, 17 Jul 2024 13:01:36 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2024/07/macos-%E4%BD%BF%E7%94%A8%E6%8C%87%E7%BA%B9%E8%A7%A3%E9%94%81-sudo-%E5%AF%86%E7%A0%81/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="出发点">出发点</h2>
<p>我们平时用Mac电脑进行命令行操作的时候，可能需要使用<code>sudo</code> 进行操作，那么就得输入密码。但在Mac系统上，我们通常用指纹来作为密码管理器。</p>
<p>其实我们可以通过简单的配置就可以实现。</p>
<h2 id="解决步骤">解决步骤</h2>
<ul>
<li>编辑文件</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sha">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-sha" data-lang="sha">sudo vim /etc/pam.d/sudo</code></pre></div>
<ul>
<li>在文件最前面加入如下代码</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-text">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">auth       sufficient     pam_tid.so</span></span></code></pre></div></div>
<ul>
<li><code>wq!</code> 保存推出即可。</li>
</ul>
<h2 id="总结">总结</h2>
<p>配置即生产力。</p>
]]></description></item><item><title>研发效能之度量</title><link>https://guzhongren.github.io/2024/03/%E7%A0%94%E5%8F%91%E6%95%88%E8%83%BD%E4%B9%8B%E5%BA%A6%E9%87%8F/</link><pubDate>Sun, 31 Mar 2024 22:06:49 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2024/03/%E7%A0%94%E5%8F%91%E6%95%88%E8%83%BD%E4%B9%8B%E5%BA%A6%E9%87%8F/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>在当前复杂的商业环境下，企业普遍倡导内部降本增效。在这种背景下，研发活动也越来越倾向于数字化度量和呈现。通过研发效能度量，组织能够获取更准确、全面的研发数据，从而更好地制定优化研发的决策和计划。</p>
<p>利用研发效能度量数据，组织可以更合理地管理和分配研发资源，进而提高研发效率和品质。这种优化不仅为企业在激烈的市场竞争中脱颖而出提供了有力支持，还为其展现更强的核心竞争力创造了更有利的条件。</p>
<h2 id="研发效能的范围">研发效能的范围</h2>
<p>研发效能的范围涵盖了研发活动的各个方面，主要包括以下几个方面：</p>
<ul>
<li>
<p>效率：评估需求前置时间，流动时间，流动速率等。</p>
</li>
<li>
<p>成本效能：衡量完成项目所需的成本，包括人力资源、设备、材料等方面的费用。</p>
</li>
<li>
<p>质量效能：评估研发产品或服务的质量水平，包括产品的可靠性、性能、用户体验等方面。</p>
</li>
<li>
<p>技术能力：评估组件或产品的可复用能力，可配置能力和可扩展能力等。</p>
</li>
<li>
<p>工程能力：评估变更前置时间，部署频率和测试覆盖率等。</p>
</li>
<li>
<p>协作能力：评估团队工作的流动效率，流动负载和流动分布等。</p>
</li>
</ul>
<p>这些方面共同构成了研发效能的范围，通过对这些方面的度量和评估，可以全面了解研发活动的表现和效果，从而进行有效的管理和优化。</p>
<p>这么多的效能面，从产品研发迭代过程来看，我们可以直接量化的是效率，工程能力和协作能力。</p>
<h2 id="当前研发效能的问题">当前研发效能的问题</h2>
<p>人人都在说效能，可没有人拿出数据来展示自己的效能。</p>
<p>人人都在说效能，可没有人说，除了 DORA Metrics 可以衡量部署，恢复等工作效率之外，还有哪些指标可以衡量团队所有人的效能。</p>
<p>人人都在说提效，但没人能说清楚使用了某个方法论之后，到底提效了多少。</p>
<h2 id="研发效能的难点">研发效能的难点</h2>
<h3 id="工具不统一">工具不统一</h3>
<p>大多数组织都在使用不用的工具进行项目管理和产品构建部署等，并没有统一的套件来组织整个流程; 比如有的组织在用 Jira 管理需求，也有的组织在用 Trello, 也有开源组织在用 GitHub 的 Issues 或者 <a href="https://github.com/kubernetes/kubernetes/projects/10">Projects</a><sup>[1]</sup>
; 在部署工具中，有的组织在用Jenkins, Buildkite，有的组织也在用 <a href="">GitHub Actions</a><sup>[2]</sup>
,<a href=""> GitLab Suites</a><sup>[2]</sup>
; 在源代码控制方面，各个组织也有不同的选择，比如GitHub, GitLab 等版本控制工具。</p>
<h3 id="数据关系复杂">数据关系复杂</h3>
<p>一个组织下肯定会有不同的项目组或者团队，每个团队在看板上对每一列的定义可能不尽相同，那么在计算效能的时候就需要定制化地去选择对应的数据。比如一个Account 大家都在用Jira, 每个团队有自己的定义过的看板，那么在最终统计看板效能的时候，大家的维度都不一样，可想而知，其最终的结果肯定也是不准确的。</p>
<h3 id="统计维度多样">统计维度多样</h3>
<p>对于管理者，不同的人需要看到不同的维度，这样的统计才有意义。比如：</p>
<ul>
<li>作为项目经理(Project Manager)，我想知道团队交付趋势(Momentum), 从而可以看出项目是否有风险</li>
<li>作为交付经理(Delivery Manager)，我想知道当前迭代团队的交付指标(Metrics)，从而知道团队交付速率，数据和质量等</li>
<li>作为技术领导(Tech Lead)，我想知道团队冲刺速度(Velocity)和周期时间(Cycle time)，从而分析出每个超出预定目标卡的原因并找到对应的提升办法，并在下个迭代改进</li>
<li>&hellip;&hellip;</li>
</ul>
<h3 id="指标收集粗略且范围单一">指标收集粗略且范围单一</h3>
<p>当然，市场上存在多种收集，统计工具，比如</p>
<ul>
<li><a href="https://web.techdash.thoughtworks.net/">Tech Dash</a><sup>[3]</sup>
 Thoughtworks 内部统计 DORA Metrics 的统计工具</li>
<li><a href="https://www.sleuth.io/">Sleuth</a><sup>[4]</sup>
 统计 DORA Metrics 的工具</li>
<li><a href="https://polaris.thoughtworks.net/">polaris</a><sup>[5]</sup>
 Thoughtworks 内部统计 DORA Metrics 的统计工具</li>
<li><a href="https://github.com/thoughtworks/metrik">Metrik</a><sup>[6]</sup>
 Thoughtworks 开源的 DORA Metrics 统计工具</li>
<li><a href="https://devlake.apache.org/">DevLake</a><sup>[7]</sup>
, 收集，分析和可视化 DevOps 工具的零散数据，以提取卓越工程的洞见。</li>
<li><a href="https://github.com/GoogleCloudPlatform/fourkeys">Four Keys</a><sup>[8]</sup>
, measures the four key metrics.</li>
<li><a href="https://github.com/kuona/kuona-project">Kuona project for IT Analytics</a><sup>[9]</sup>
, provides a dashboard on data from various sources.</li>
<li><a href="https://github.com/anandbagmar/tta">Test Trend Analyzer</a><sup>[10]</sup>
, consumes test results for test trends.</li>
<li><a href="https://github.com/thetestpeople/trt">TRT</a><sup>[11]</sup>
, consumes test results for test trends.</li>
<li><a href="https://extensions-docs.gocd.org/analytics/current/">GoCD&rsquo;s analytics extension</a><sup>[12]</sup>
, collects and displays build metrics for GoCD.</li>
<li><a href="https://www.pulse.codacy.com">pulse</a><sup>[13]</sup>
, support the continuous improvement of your engineering teams with data-driven insights.</li>
<li><a href="https://jellyfish.co">Jellyfish</a><sup>[14]</sup>
, translate and maximize the business impact of engineering.</li>
<li><a href="https://github.com/marketplace/buildpulse">BuildPulse</a><sup>[15]</sup>
, automatically detects flaky tests.</li>
</ul>
<p>在此，我们选择如下部分工具进行对比并说明。</p>
<h2 id="解决方案对比">解决方案对比</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left"></th>
          <th style="text-align: left">Heartbeat</th>
          <th style="text-align: left">Sleuth</th>
          <th style="text-align: left">Metrik</th>
          <th style="text-align: left">DevLake</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">开源</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">免费</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">自动统计</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">人工表单收集</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
      </tr>
      <tr>
          <td style="text-align: left">社区活跃程度</td>
          <td style="text-align: left">🔋</td>
          <td style="text-align: left">🪫</td>
          <td style="text-align: left">➖</td>
          <td style="text-align: left">🔋</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 GitHub 作为版本控制工具</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 GitLab 作为版本控制工具</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 GitHub Actions 作为 Pipeline 工具</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 BuildKite 作为 Pipeline 工具</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 GitLab 套件作为 Pipeline 工具</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 Jenkins 作为 Pipeline 工具</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持度量 PR/MR 的前置时间</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持度量基于版本控制工具的特定分支的 DORA Metrics</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持自定义仓库统计</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 Jira 作为项目管理工具</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持度量迭代完成点数</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持度量迭代完成卡数</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持按人统计迭代卡的时间分配</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
      </tr>
      <tr>
          <td style="text-align: left">支持度量每张卡在每个状态中的时间消耗</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
      </tr>
      <tr>
          <td style="text-align: left">支持度量返工（Rework）</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
      </tr>
      <tr>
          <td style="text-align: left">导出 DORA Metrics 报告</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td></td>
      </tr>
      <tr>
          <td style="text-align: left">导出迭代内项目管理工具每张卡的时间消耗报告</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">多个迭代的图表展示</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
      </tr>
  </tbody>
</table>
<p>从组织精准度量研发效能角度看，Heartbeat 统计的数据来源更多，比如统计 DORA Metrics 的数据源 Pipeline(BuildKite), 项目管理工具(Jira) 和版本控制工具(GitHub)，并且各个部分的自定义能力较强, 更能体现出交付质量和价值。</p>
<h3 id="heartbeat-的解决方案">Heartbeat 的解决方案</h3>
<h4 id="heartbeat-是什么">Heartbeat 是什么</h4>
<table>
  <thead>
      <tr>
          <th style="text-align: left"></th>
          <th></th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">对于</br> 目标用户/客户</td>
          <td style="text-align: left">TL, BA, PM, PO</td>
      </tr>
      <tr>
          <td style="text-align: left">谁</br> 需求/机会</td>
          <td style="text-align: left">1. 更好的了解交付效能</br> 2. 提高团队生产力和效率</td>
      </tr>
      <tr>
          <td style="text-align: left">产品</td>
          <td style="text-align: left">Heartbeat</td>
      </tr>
      <tr>
          <td style="text-align: left">是一个</br></td>
          <td style="text-align: left">可视化项目交付效能的开源工具</td>
      </tr>
      <tr>
          <td style="text-align: left">它可以</br>关键好处，使用的竞争理由</td>
          <td style="text-align: left">1. 整合3个开发与进度管理产品</br> 2. 自动计算8个交付性能指标</br> 3. 可以导出相关数据报告</td>
      </tr>
      <tr>
          <td style="text-align: left">相比于</br>主要竞争替代方案</td>
          <td style="text-align: left">Sleuth, Metrics 和 DevLake</td>
      </tr>
      <tr>
          <td style="text-align: left">优势</br>差异点</td>
          <td style="text-align: left">1. 自动从第三方获取数据并计算交付效能指标</br> 2. 从数据源获取的最真实的交付效能指标，而不是通过手动收集所得</td>
      </tr>
  </tbody>
</table>
<h4 id="为什么会有-heartbeat">为什么会有 Heartbeat</h4>
<p>在 Thoughtworks， 我们有 SDP(Sensible Default Practice) 来指导日常的软件工程开发工作，通过遵循 SDP 的最佳实践，组织可以提高研发效能；反之，通过分析收集到的各个指标，作为 TL 等角色的人，可以分析出哪些行为是团队所需要提升的，从而针对性地在找到最佳实践，近而采取行动来促进研发效能。</p>
<p><img src="..." alt="研发效能反馈图" /></p>
<h2 id="总结">总结</h2>
<div class="references">
                <h2>参考</h2>
                <ol><li>Projects: <a href="https://github.com/kubernetes/kubernetes/projects/10" rel="noopener noreferrer">https://github.com/kubernetes/kubernetes/projects/10</a></li><li>GitHub Actions: <a href="https://guzhongren.github.io/" rel="noopener noreferrer"></a></li><li>Tech Dash: <a href="https://web.techdash.thoughtworks.net/" rel="noopener noreferrer">https://web.techdash.thoughtworks.net/</a></li><li>Sleuth: <a href="https://www.sleuth.io/" rel="noopener noreferrer">https://www.sleuth.io/</a></li><li>polaris: <a href="https://polaris.thoughtworks.net/" rel="noopener noreferrer">https://polaris.thoughtworks.net/</a></li><li>Metrik: <a href="https://github.com/thoughtworks/metrik" rel="noopener noreferrer">https://github.com/thoughtworks/metrik</a></li><li>DevLake: <a href="https://devlake.apache.org/" rel="noopener noreferrer">https://devlake.apache.org/</a></li><li>Four Keys: <a href="https://github.com/GoogleCloudPlatform/fourkeys" rel="noopener noreferrer">https://github.com/GoogleCloudPlatform/fourkeys</a></li><li>Kuona project for IT Analytics: <a href="https://github.com/kuona/kuona-project" rel="noopener noreferrer">https://github.com/kuona/kuona-project</a></li><li>Test Trend Analyzer: <a href="https://github.com/anandbagmar/tta" rel="noopener noreferrer">https://github.com/anandbagmar/tta</a></li><li>TRT: <a href="https://github.com/thetestpeople/trt" rel="noopener noreferrer">https://github.com/thetestpeople/trt</a></li><li>GoCD&rsquo;s analytics extension: <a href="https://extensions-docs.gocd.org/analytics/current/" rel="noopener noreferrer">https://extensions-docs.gocd.org/analytics/current/</a></li><li>pulse: <a href="https://www.pulse.codacy.com" rel="noopener noreferrer">https://www.pulse.codacy.com</a></li><li>Jellyfish: <a href="https://jellyfish.co" rel="noopener noreferrer">https://jellyfish.co</a></li><li>BuildPulse: <a href="https://github.com/marketplace/buildpulse" rel="noopener noreferrer">https://github.com/marketplace/buildpulse</a></li></ol>
            </div>]]></description></item><item><title>2023 年终总结</title><link>https://guzhongren.github.io/2024/02/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 03 Feb 2024 22:45:07 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2024/02/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="女儿">女儿</h2>
<p>新年开始，女儿就出生了，从刚开始的毫无力气到现在单手可以拿起手机，在家里随处乱跑，每一天都是新的一天。</p>
<p>娃很爱笑，从出生到现在感觉也就是屈指可数的哭过几次，要么是第一次打针疼了，要么是第一次从床上掉下来。</p>
<p>以前上班，我们跟她说再见，她几乎没有什么反应，但现在，每天早上我们快要出门的时候，就会缠着你让你抱抱，不抱的话还会哭。</p>
<p>从此，人的感情也越累越脆弱了。</p>
<h2 id="忙忙碌碌却也碌碌无为">忙忙碌碌，却也碌碌无为</h2>
<p>2023 年，项目一塌糊涂。</p>
<h2 id="2024">2024</h2>
<p>&ldquo;家人最重要&rdquo; - 《燃爆点》，正在看的一部电影。</p>
]]></description></item><item><title>使用 setuptools 工具搭建 Python 工程</title><link>https://guzhongren.github.io/2023/10/%E4%BD%BF%E7%94%A8setuptools%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BApython%E5%B7%A5%E7%A8%8B/</link><pubDate>Fri, 13 Oct 2023 21:26:15 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/10/%E4%BD%BF%E7%94%A8setuptools%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BApython%E5%B7%A5%E7%A8%8B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>最近运维项目上要使用Pyspark进行报告生成，嗯，是的，运维项目的技术栈永远是你想象不到的。</p>
<p>有活就干，这形势只能“狗着”。</p>
<p>技术栈是Python, 硅基生命时代的基础之一； 工程化管理工具是<a href="https://setuptools.pypa.io/en/latest/userguide/index.html">setuptools</a><sup>[1]</sup>
, 嗯，对我来说是新工具，在工作的8年里，第一次听说这个。这次的重点就是利用它来构建一个模块化的工程。 相对于前端架构而言，其就相当于 <code>package.json</code>。</p>
<h2 id="期望">期望</h2>
<p>基于 setuptools 产出一个模块化的工程，高级模块要依赖通用模块(commons)。</p>
<h2 id="工具介绍">工具介绍</h2>
<p>按照 setuptools 官网介绍，我们需要更新最新的 setuptools，安装 <code>build</code> 和 <code>whell</code>, 依赖管理会在 setuptools 的 <code>install_requires</code> 中体现，如下;</p>
<blockquote>
<p>pip 最好是 pip3, Python 最好是最新版的 Python3。</p></blockquote>
<h2 id="代码实践">代码实践</h2>
<h3 id="虚拟环境">虚拟环境</h3>
<p>在 Python 工程中，虚拟环境是一个非常重要的概念。 你可以随时创建纯净的虚拟环境开始你的（已有/新的）工程。 最简单的好处就是不会在系统级别相互影响。</p>
<p>在我们这个示例中，最简单的好处就是生成的包不会影响系统中已有的包。退出虚拟环境后，在虚拟环境中安装的包不会在系统中出现。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 在你合适的位置创建目录管理 Python 虚拟环境</span>
</span></span><span class="line"><span class="cl">mkdir myenv
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> myenv
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 Python 自带的 venv 来创建全新的虚拟环境</span>
</span></span><span class="line"><span class="cl">python3 -m venv myenv
</span></span><span class="line"><span class="cl"><span class="c1"># 激活当前环境，然后就可以切换目录到工程目录进行编码了</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> bin/activate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 退出当前虚拟环境</span>
</span></span><span class="line"><span class="cl">deactivate</span></span></code></pre></div></div>
<h3 id="setuptools">setuptools</h3>
<p>setuptools 是 Python 官方的工程构建工具。 其可以打包项目、打包 lib等。有三种配置格式， 分别为<code>pyproject.toml</code>、 <code>setup.cfg</code> 和 <code>setup.py</code>, 竟然不支持 yaml 语法。 官方不推荐 <code>setup.py</code> 这种形式，但其可读性真的好啊，因为我不是很喜欢 <code>toml</code>。</p>
<h3 id="目标工程">目标工程</h3>
<h4 id="文件结构">文件结构</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">tree -L <span class="m">3</span>
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── LICENSE
</span></span><span class="line"><span class="cl">├── setup.py
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── commons
</span></span><span class="line"><span class="cl">│   │   └── __init__.py
</span></span><span class="line"><span class="cl">│   ├── module1
</span></span><span class="line"><span class="cl">│   │   ├── __init__.py
</span></span><span class="line"><span class="cl">│   │   └── __main__.py
</span></span><span class="line"><span class="cl">│   └── timmins
</span></span><span class="line"><span class="cl">│       ├── __init__.py
</span></span><span class="line"><span class="cl">│       └── __main__.py
</span></span><span class="line"><span class="cl">└── tests
</span></span><span class="line"><span class="cl">    └── test.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">6</span> directories, <span class="m">8</span> files</span></span></code></pre></div></div>
<h3 id="setuppy">setup.py</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">setup</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;zhongren&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">version</span><span class="o">=</span><span class="s1">&#39;0.1.1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry_points</span><span class="o">=</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;console_scripts&#39;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hello-world = timmins:hello_world&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;module = module1:say_hello&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="n">install_requires</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;build&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;wheel&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></div></div>
<p>这个文件主要描述了工程的名字和版本，最重要的是 <code>entry_points</code> 和 <code>install_requires</code>。</p>
<ul>
<li><code>entry_points</code> 数组中的每一条记录都会被打包成一个可执行程序，在这里将会产生 <code>hell-world</code>和 <code>module</code> 两个可执行程序。</li>
<li><code>install_requires</code> 指定依赖的第三方库，这里不指定版本，使用最新版。</li>
</ul>
<h5 id="commons">commons</h5>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __init.py</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">something</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;commons say: &#34;</span> <span class="o">+</span> <span class="n">something</span><span class="p">)</span></span></span></code></pre></div></div>
<p><code>commons</code> 是项目公共方法，供高层模块调用。</p>
<h5 id="module1">module1</h5>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __init__.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">commons</span> <span class="kn">import</span> <span class="n">say</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">say_hello</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">say</span><span class="p">(</span><span class="s1">&#39;zhongren world&#39;</span><span class="p">)</span></span></span></code></pre></div></div>
<p>在 <code>__init__.py</code> 中，我们通过加载指定的绝对路径的方法，调用了 commons 模块中的 say 方法，实现了 <code>低耦合</code>。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __main__.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">say_hello</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">say_hello</span><span class="p">()</span></span></span></code></pre></div></div>
<p>在同样的工程下面，为什么还要有 <code>__main__.py</code>呢？</p>
<p>因为我们要将工程打包，并生成多个模块，在这里是模块 <code>module1</code>
和 <code>timmins</code>；并在模块中调用了底层模块的 <code>say</code> 方法。并且这部分会是可运行程序的<code>入口</code>。</p>
<h5 id="timmins">timmins</h5>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __init__.py</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello world&#34;</span><span class="p">)</span></span></span></code></pre></div></div>
<p>此模块只是暴露方法出去，相当于 lib。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __main__.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">hello_world</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello_world</span><span class="p">()</span></span></span></code></pre></div></div>
<p>此模块和 module1 的功能相同，只是调用了自己目录下 <code>Lib</code> 的方法。</p>
<h4 id="构建">构建</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python setup.py install
</span></span><span class="line"><span class="cl">......
</span></span><span class="line"><span class="cl">Processing zhongren-0.1.1-py3.11.egg
</span></span><span class="line"><span class="cl">Removing /usr/local/lib/python3.11/site-packages/zhongren-0.1.1-py3.11.egg
</span></span><span class="line"><span class="cl">Copying zhongren-0.1.1-py3.11.egg to /usr/local/lib/python3.11/site-packages
</span></span><span class="line"><span class="cl">Adding zhongren 0.1.1 to easy-install.pth file
</span></span><span class="line"><span class="cl">Installing hello-world script to /usr/local/bin
</span></span><span class="line"><span class="cl">Installing module script to /usr/local/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Installed /usr/local/lib/python3.11/site-packages/zhongren-0.1.1-py3.11.egg
</span></span><span class="line"><span class="cl">Processing dependencies <span class="k">for</span> <span class="nv">zhongren</span><span class="o">==</span>0.1.1
</span></span><span class="line"><span class="cl">Finished processing dependencies <span class="k">for</span> <span class="nv">zhongren</span><span class="o">==</span>0.1.1</span></span></code></pre></div></div>
<p>按照提示，打包后的模块已经被安装在了 <code>/usr/local/bin</code> 中了。我们可以使用两种方式进行验证。</p>
<ol>
<li>CMD</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">module
</span></span><span class="line"><span class="cl">&gt; commons say: zhongren world
</span></span><span class="line"><span class="cl">hello-world
</span></span><span class="line"><span class="cl">&gt; Hello world</span></span></code></pre></div></div>
<p>可以看到两个 <code>entry_points</code> 模块运行后的输出和我们在程序中定义的一致。</p>
<ol start="2">
<li>测试</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># test.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">timmins</span> <span class="kn">import</span> <span class="n">hello_world</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">module1</span> <span class="kn">import</span> <span class="n">say_hello</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">hello_world</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">say_hello</span><span class="p">()</span></span></span></code></pre></div></div>
<p>通过执行<code>python3 test</code>, 输出如下</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python3 tests/test.py
</span></span><span class="line"><span class="cl">&gt; Hello world
</span></span><span class="line"><span class="cl">&gt; commons say: zhongren world</span></span></code></pre></div></div>
<h4 id="wheel-构建">wheel 构建</h4>
<p>我们最终想要的肯定是一个可以部署的包（package）,在 Python 里，通常使用 <code>.whl</code> wheel 包来分享或者部署。</p>
<h5 id="打包-whl-包">打包 whl 包</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python3 setup.py bdist_wheel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">running bdist_wheel
</span></span><span class="line"><span class="cl">running build
</span></span><span class="line"><span class="cl">running build_py
</span></span><span class="line"><span class="cl">......
</span></span><span class="line"><span class="cl">running install_scripts
</span></span><span class="line"><span class="cl">creating build/bdist.macosx-13-x86_64/wheel/zhongren-0.1.1.dist-info/WHEEL
</span></span><span class="line"><span class="cl">creating <span class="s1">&#39;dist/zhongren-0.1.1-py3-none-any.whl&#39;</span> and adding <span class="s1">&#39;build/bdist.macosx-13-x86_64/wheel&#39;</span> to it
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;commons/__init__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;module1/__init__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;module1/__main__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;timmins/__init__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;timmins/__main__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/LICENSE&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/METADATA&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/WHEEL&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/entry_points.txt&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/top_level.txt&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/RECORD&#39;</span>
</span></span><span class="line"><span class="cl">removing build/bdist.macosx-13-x86_64/wheel</span></span></code></pre></div></div>
<p>可以看到 <code>zhongren-0.1.1-py3-none-any.whl</code> 在 <code>dist</code> 目录下被成功构建。</p>
<p>同样，可以使用安装命令来测试安装, 并用上面的<code>python3 tests/test.py</code> 来验证。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">pip3 install dist/zhongren-0.1.1-py3-none-any.whl
</span></span><span class="line"><span class="cl">Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
</span></span><span class="line"><span class="cl">Processing ./dist/zhongren-0.1.1-py3-none-any.whl
</span></span><span class="line"><span class="cl">Installing collected packages: zhongren
</span></span><span class="line"><span class="cl">Successfully installed zhongren-0.1.1</span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<p>学习最佳实践，可以节约时间，同时，也是真爱生命。</p>
<p>项目工程地址: <a href="https://github.com/beef-noodles/py-project">https://github.com/beef-noodles/py-project</a><sup>[2]</sup>
</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>setuptools: <a href="https://setuptools.pypa.io/en/latest/userguide/index.html" rel="noopener noreferrer">https://setuptools.pypa.io/en/latest/userguide/index.html</a></li><li>https://github.com/beef-noodles/py-project: <a href="https://github.com/beef-noodles/py-project" rel="noopener noreferrer">https://github.com/beef-noodles/py-project</a></li></ol>
            </div>]]></description></item><item><title>使用Google Sheet Apps Script提升工作效率</title><link>https://guzhongren.github.io/2023/09/%E4%BD%BF%E7%94%A8google-sheet-apps-script%E6%8F%90%E5%8D%87%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/</link><pubDate>Wed, 13 Sep 2023 22:44:56 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/09/%E4%BD%BF%E7%94%A8google-sheet-apps-script%E6%8F%90%E5%8D%87%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>一切总是在往熵增大的方向发展。</p>
<h2 id="遇到的问题">遇到的问题</h2>
<p>团队周内每天需要都有个Code Diff 的会议来进行代码review, 但是不是每个人都有代码要被Review, 如果有个工具每天在Code Diff 前进行统计，大家有需要代码Review 的就在消息下面标记一下，或者回复一哈；如果大家有标记，那么再进行代码Review，是不是就可以省下一部分时间了？</p>
<p>团队内每周站会的主持人要轮流，要是大家轮流记，估计很快就乱了，如果有个工具，每周一早上在群里自动更新一哈是不是就更好了？对于Oncall 等活动也是一样，是不是就完美了？</p>
<p>这么多问题怎么解决呢？</p>
<p>肯定就是各种机器人啦。我们团队用的都是Google 的那套办公软件，而Google Sheet 是我们经常用来流程化记录内容的工具；同时Google Chat 是我们团队的沟通协作工具。</p>
<p>而Google 全家桶的好处就是其各个应用之间调用协作非常方便。那么我们就用Google Sheet 和Google Chat 来实现一个简单的机器人应用来干上面各种麻烦的事吧。</p>
<h2 id="google-chat-webhooks">Google Chat Webhooks</h2>
<p>Google Chat 的Webhooks 允许其他应用程序调用，并可以对消息进行<code>创建</code>、<code>读取</code> 、<code>更新</code> 和<code>删除</code>。如同对数据库的增删改差一般。</p>
<p><img src="https://developers.google.com/static/chat/images/arch-pat-notifier.svg" alt="Google Chat Webhooks" /></p>
<p>关于如何创建Google Chat webhooks 可以参考<a href="https://ploi.io/documentation/notifications/how-do-i-create-a-google-chat-webhook">这里</a><sup>[1]</sup>
; 如果不想看这个链接，可以往下，在实践部分会有操作。</p>
<h2 id="google-sheet-apps-script">Google Sheet Apps Script</h2>
<p>Google Sheet 之于 Google Suite,就像 Excel 之于 Miscrosoft Office。Google Sheet 最强大的地方在于他支持自定义脚本，虽然其名为<code>Apps Script</code>, 文件格式为<code>.gs</code>， 但是其就是一些简单的<code>JavaScript</code> API, 其请求也是同步的API, 而且没有跨域问题，这就让其作为一个机器人有了初步条件。</p>
<p>当然 Google Sheet Apps Script 最基本的对 Sheet 的读写删都是非常容易的，但在这里需要明白其 API 结构。</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/GoogleSheet/AppsScript.7401tjjcz9g0.webp" alt="Google Sheet API Structure" /></p>
<p>从上图中可以看到</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">序号</th>
          <th style="text-align: left">说明</th>
          <th style="text-align: left">Note</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">1</td>
          <td style="text-align: left">SpreadsheetApp</td>
          <td></td>
      </tr>
      <tr>
          <td style="text-align: left">2</td>
          <td style="text-align: left">ActiveSheet</td>
          <td></td>
      </tr>
      <tr>
          <td style="text-align: left">3</td>
          <td style="text-align: left">DataRange</td>
          <td></td>
      </tr>
      <tr>
          <td style="text-align: left">4</td>
          <td style="text-align: left">Value</td>
          <td></td>
      </tr>
  </tbody>
</table>
<h2 id="实践">实践</h2>
<p>如下，我们实现一个每周一提醒团队谁是本周的站会主持人的机器人。</p>
<h3 id="创建google-chat-webhooks">创建Google Chat Webhooks</h3>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/GoogleSheet/chat-webhooks.1mqmo1im34g0.webp" alt="Google chat webhooks" /></p>
<p>点击创建好的Webhooks, 拷贝URL即可。</p>
<h3 id="创建google-sheet-轮转数据">创建Google Sheet 轮转数据</h3>
<p>新建Google Sheet，直接写入如下数据</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>xiaoming1
xiaoming2
xiaoming3
xiaoming4
xiaoming5
xiaoming6	current
xiaoming7
xiaoming8
xiaoming9
xiaoming10</code></pre></div>
<h3 id="创建google-sheet-处理脚本">创建Google Sheet 处理脚本</h3>
<p>接下来在Google Sheet 中创建Apps Script; 位置：Menu-&gt;Extention-&gt; Apps Script;</p>
<p>在编辑器里可以编写处理Google Sheet 的代码，比如有个sheet.gs 里面处理Sheet 相关的操作，如下</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">CURRENT</span> <span class="o">=</span> <span class="s1">&#39;current&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">getTheNextStandupPerson</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">activeSheet</span> <span class="o">=</span> <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getActiveSheet</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">dataRange</span> <span class="o">=</span> <span class="nx">activeSheet</span><span class="p">.</span><span class="nx">getDataRange</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">standupList</span> <span class="o">=</span> <span class="nx">dataRange</span><span class="p">.</span><span class="nx">getValues</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">currentStandupPersonIndex</span> <span class="o">=</span> <span class="nx">standupList</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="nx">person</span> <span class="p">=&gt;</span> <span class="nx">person</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">===</span> <span class="nx">CURRENT</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">tempStandupPersonIndex</span> <span class="o">=</span> <span class="nx">currentStandupPersonIndex</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">nextStandupPersonIndex</span> <span class="o">=</span>  <span class="nx">tempStandupPersonIndex</span> <span class="o">&gt;=</span> <span class="nx">standupList</span><span class="p">.</span><span class="nx">length</span> <span class="o">?</span> <span class="mi">0</span><span class="o">:</span> <span class="nx">tempStandupPersonIndex</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">nextStandupPerson</span> <span class="o">=</span> <span class="nx">standupList</span><span class="p">.</span><span class="nx">find</span><span class="p">((</span><span class="nx">_</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">index</span> <span class="o">===</span> <span class="nx">nextStandupPersonIndex</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">currentStandupPersonIndex</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nextStandupPersonIndex</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nextStandupPerson</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">updateRecord</span><span class="p">(</span><span class="nx">currentStandupPersonIndex</span><span class="p">,</span> <span class="nx">nextStandupPersonIndex</span><span class="p">,</span> <span class="nx">nextperson</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Logger</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Start to update the latest standup person to </span><span class="si">${</span><span class="nx">nextperson</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">currentRow</span> <span class="o">=</span> <span class="nx">currentStandupPersonIndex</span> <span class="o">+</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">nextRow</span> <span class="o">=</span> <span class="nx">nextStandupPersonIndex</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">activeSheet</span> <span class="o">=</span> <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getActiveSheet</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">activeSheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">currentRow</span><span class="p">,</span> <span class="mi">2</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">activeSheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">nextRow</span><span class="p">,</span> <span class="mi">2</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">CURRENT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">Logger</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Successfully update the latest standup person to </span><span class="si">${</span><span class="nx">nextperson</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>main.gs 处理整个流程，并且在里面发送消息到刚才的Space中，</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">WEBHOOK_URL</span> <span class="o">=</span> <span class="s2">&#34;https://chat.googleapis.com/v1/spaces/AAAAPhOvPUg/messages?key=AIzaSxxxxxxxxxxxxxxxxxxxxxxxx&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// main function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">sendMessageToChat</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isMonday</span><span class="p">())</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span><span class="nx">currentStandupPersonIndex</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nextStandupPersonIndex</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nextStandupPerson</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">getTheNextStandupPerson</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">updateRecord</span><span class="p">(</span><span class="nx">currentStandupPersonIndex</span><span class="p">,</span> <span class="nx">nextStandupPersonIndex</span><span class="p">,</span> <span class="nx">nextStandupPerson</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;method&#34;</span><span class="o">:</span> <span class="s2">&#34;post&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;headers&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Content-Type&#34;</span><span class="o">:</span> <span class="s2">&#34;application/json; charset=UTF-8&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;payload&#34;</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;text&#34;</span><span class="o">:</span> <span class="sb">`Hey &lt;users/all&gt;,This week&#39;s standup host is </span><span class="si">${</span><span class="nx">nextStandupPerson</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="s1">&#39;\n&#39;</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="si">}</span><span class="sb"> The sheet: https://docs.google.com/spreadsheets/d/123434234343/edit#gid=0`</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">UrlFetchApp</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="nx">WEBHOOK_URL</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Logger</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">isMonday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">day</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nx">getDay</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">!</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">].</span><span class="nx">includes</span><span class="p">(</span><span class="nx">day</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h3 id="定时执行脚本处理">定时执行脚本处理</h3>
<p>有多种执行方式；</p>
<ol>
<li>直接在代码编辑器顶部运行main.gs 里的sendMessageToChat 方法即可。</li>
<li>定时运行,如下图, 以此，我们可以在特定的实践让其自动执行，实现自动化。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/GoogleSheet/trigger-of-apps-script.5u953kav5cg0.webp" alt="Trigger of Apps Script" /></p>
<h3 id="效果">效果</h3>
<p>可以看到，之前的主持人是xiaoming6, 现在已经是xiaoming7了。
<img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/GoogleSheet/chatbot-message.4w4b6vs80rk0.webp" alt="Chatbot message result" /></p>
<h2 id="总结">总结</h2>
<p>Google Sheet 毕竟是Google 出品，不管是UI 还是API 都很简洁，更是和其自家产品集成的非常紧密；我们在这里实现了Google Sheet 调用Google Chat 来定时给Google Chat 发送消息的功能。当然Google Sheet 还有很多非常优秀的功能，期待你的挖掘。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>这里: <a href="https://ploi.io/documentation/notifications/how-do-i-create-a-google-chat-webhook" rel="noopener noreferrer">https://ploi.io/documentation/notifications/how-do-i-create-a-google-chat-webhook</a></li></ol>
            </div>]]></description></item><item><title>团队能力度量及追踪</title><link>https://guzhongren.github.io/2023/07/%E5%9B%A2%E9%98%9F%E8%83%BD%E5%8A%9B%E5%BA%A6%E9%87%8F%E5%8F%8A%E8%BF%BD%E8%B8%AA/</link><pubDate>Mon, 31 Jul 2023 22:12:36 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/07/%E5%9B%A2%E9%98%9F%E8%83%BD%E5%8A%9B%E5%BA%A6%E9%87%8F%E5%8F%8A%E8%BF%BD%E8%B8%AA/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div>]]></description></item><item><title>端午Incident了</title><link>https://guzhongren.github.io/2023/06/%E7%AB%AF%E5%8D%88incident%E4%BA%86/</link><pubDate>Fri, 30 Jun 2023 23:23:05 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/06/%E7%AB%AF%E5%8D%88incident%E4%BA%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="前言">前言</h2>
<p>现在，我们作为Ops 维护这一个新加坡的项目，项目还是比较复杂的。端午前一天00：00 上线了很多hotfix, 而这里面就隐藏了2个bug。</p>
<h2 id="回顾">回顾</h2>
<p>技术层面，有两个bug，一个Job运行时，数据库CPU 拉满，一个少了Redis 初始化，导致从Event Hub 发送过来的数据无法处理。</p>
<p>业务层面, 数据库CPU 拉满，导致业务数据无法处理；另一个Redis 初始化失败，影响到所有用户数据同步及奖励转换的问题。</p>
<h3 id="数据库cpu-拉满">数据库CPU 拉满</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sql">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="s2">&#34;table&#34;</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">columnName</span><span class="o">=</span><span class="s1">&#39;value&#39;</span></span></span></code></pre></div></div>
<p>新的代码修改是根据数据库某一列去查找对应的数据，然而Dev 对于这一列并没有添加索引，导致在Job 运行，Job 运行时间过长，通过数据库指标的dashboard 查看，数据库CPU 爆满,进而对该Job 的代码重新review， 发现时数据库查询没有加索引的问题。</p>
<p>发现有问题后，我们开始分析是否可以回滚该服务；但是发现该服务还涉及到其他hotfix, 如果这个service rollback，那么还有其他2个service 也需要回滚，影响面比较大。最终，我们的解决方案是，hotfix 依旧上线，但是涉及的Daily Job 从任务中删除，通知客户该incident 的影响面，并且在第二天晚上定时任务执行的时候再次确认是否又执行了; 对于在新的fix 上线之前的报告，我们使用手动生成的方式,以使业务持续。</p>
<p>是不是感觉不应该出现这样的问题？</p>
<p>是的, 但为什么还是出现了这样的事故呢？个人认为原因很简单:</p>
<ul>
<li>在low env 没有足够的数据对新的代码更改做充分的压力测试，只是完成的对应的功能</li>
<li>Review 时没有发现该问题，不可否认，这完全是Reveiwer 的经验问题</li>
</ul>
<h3 id="redis-没有初始化">Redis 没有初始化</h3>
<p>关于这个问题，我们的应用程序在代码层面有两方面的设计，1，启动server, 向外部提供RESTful 服务；2，启动Agendash, 运行一些业务方面的定时任务。</p>
<p>而我们的更新就是去优化这个服务，在应用层面分为2个服务，并且保持运行Agendash 的pod 数量与Event Hub partition 的数量一致，以解决一个消息被重复消费的问题（虽然很tricky）。</p>
<p>团队使用的方式是，参考之前某一个服务的拆分策略，业务代码，Ops 部署代码都进行双份设计，在启动服务时，启动不同的脚本即可。方式很简单，只是<code>抄代码，抄逻辑</code>。</p>
<p>然而，团队在做code fix 时，没有将代码<code>抄</code>全，导致少了 <code>initRedis()</code> 这样的代码；又因为团队对对应的业务了解的不多，没有进行充分的上线前的测试，只是凭<code>Senior dev</code> 的感觉就上线了。</p>
<p>为什么呢？</p>
<ul>
<li>Dev 对<code>抄</code>过来的代码在思想上很有信心，但是没有经过验证</li>
<li>没有在本地测试</li>
<li>没有充分的业务测试，甚至没有测试</li>
<li>Senior dev 可能粗心没发现</li>
</ul>
<p>这个过程中，因为负责这个code fix 的是个Junior Dev, 而在那段时间，我们有新的Senior Dev 要上项目，所以两人Pair 一起修bug。</p>
<h2 id="standby">Standby</h2>
<p>为什么需要Standby 呢？</p>
<h3 id="增强信心">增强信心</h3>
<p>如果你是第一次遇到Incident，是不是会害怕?</p>
<ul>
<li>这个问题到底是怎么发生的？</li>
<li>这么多人问我这么多问题，我忙不过来，会不会被客户投诉？</li>
<li>标准的处理流程是什么？</li>
<li>这个业务我不了解，我该不该叫其他小伙伴一起看？</li>
<li>出了线上事故了，项目组或者公司会不会处理我？</li>
<li>&hellip;&hellip;</li>
</ul>
<p>想到这些，你是不是已经很恐慌了？相反，如果有人和你一起追踪这个问题，你又是什么样的心态呢？</p>
<h3 id="及时响应">及时响应</h3>
<p>正如上面所说，在出现Incident 的时候会有很多事要做，比如查询根因、处理各种leader 发过来的问题，是不是感觉一个人根本忙不过来？</p>
<p>所以，如果有其他小伙伴和你一起standby, 那么是不是可以将工作分配一下，对客户、leader 的问题及时做出响应；起码给别人你很<code>靠谱</code>的印象, 提升自己、团队甚至公司在这方面的声誉。</p>
<h2 id="收获">收获</h2>
<h3 id="在数据库中查询基本都需要考虑加索引">在数据库中查询，基本都需要考虑加索引</h3>
<p>凡事查询，在没有加索引，且数据量上去之后，查询一定会变慢，这种情况下需要根据biz/tech 的策略加索引。</p>
<h3 id="在出现incident-时全员应该随时支持所谓standby">在出现Incident 时，全员应该随时支持，所谓Standby</h3>
<p>在这次的Incident中，团队并没有及时的Standby，需要提升这方面的实践和认知。所以后续需要在团队内进行Incident 培训，让大家知道如何处理Incident。同时Standby 是一种负责人的态度。</p>
<h3 id="没有所谓的简单的工作">没有所谓的简单的工作</h3>
<p>不要在不了解事情的情况下，随便说&quot;这不是很简单么&quot;这样的话；说的越轻松，打脸往往来的越快。</p>
<h3 id="不要责备">不要责备</h3>
<p>就像Thoughtworks 所倡导的，出了问题, 不要针对个人，不要问&quot;9：00～10：00, 你在干嘛&quot; 这样&quot;地震级&quot;的问题；而应该去分析为什么会出现这个Incident, 以后怎么避免。</p>
<h2 id="总结">总结</h2>
<p>在Ops 项目中遇到Incident 应该是在平常不过的了，那么处理Incident 的过程中，流程和人才是最重要的。将流程标准化（SOP）,鼓励团队积极响应，认真分析，产出修复方案，做好事后事故报告(Incident Report)这些才是最重要的。</p>
]]></description></item><item><title>OAuth2.0和OIDC流程梳理</title><link>https://guzhongren.github.io/2023/06/oauth2.0%E5%92%8Coidc%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86/</link><pubDate>Sat, 03 Jun 2023 10:31:28 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/06/oauth2.0%E5%92%8Coidc%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="场景">场景</h2>
<p>在日常生活中，有许多使用OAuth 2.0或OIDC的案例。例如，小明使用团建费用在京东商城购买了许多零食，他希望使用第三方软件开发票来报销这部分费用。以下是小明、小票软件和京东商家开放平台之间的对话流程：</p>
<p>小明：“你好，小票软件。我在Google浏览器上需要访问你来处理我在京东商城店铺的订单信息，以生成发票。”</p>
<p>小票软件：“好的，小明，我需要你授权。现在我将引导你前往京东商家开放平台，在那里你可以给我授权。”</p>
<p>京东商家开放平台：“你好，小明。我收到了小票软件的跳转请求，已准备好一个授权页面。请登录并确认后，点击授权按钮即可。”</p>
<p>小明：“好的，京东商家开放平台。我已看到授权页面，并点击了授权按钮。”</p>
<p>京东商家开放平台：“你好，小票软件。我已收到小明的授权请求，现在将为你生成授权码（code）。我会通过浏览器重定向到你的回调URL地址。”</p>
<p>小票软件：“好的，京东商家开放平台。我已从浏览器中获取到授权码，现在将使用该授权码向你请求访问令牌（access_token）。请提供访问令牌给我。”</p>
<p>京东商家开放平台：“好的，小票软件，访问令牌已发送给你。”</p>
<p>小票软件：“太好了，现在我可以使用访问令牌来获取小明店铺的订单信息，并生成发票。”</p>
<p>小明：“我已能够看到我的订单，现在可以开始打印发票了。</p>
<p>在以下的流程中，大家可以使用如<strong>极客时间</strong>使用<strong>微信</strong>登录的流程，或者某业务系统使用<strong>Keycloak</strong>登录的方式来理解整个技术流转过程。</p>
<h2 id="oauth20">OAuth2.0</h2>
<h3 id="4-种授权许可类型">4 种授权许可类型</h3>
<p>OAuth2.0 有4种授权许可类型，分别是<strong>授权码许可(Authorization Code)</strong>， <strong>资源拥有者凭据许可(Resource Owner Password Credential)</strong>, <strong>客户端凭据许可(Client Credential)<strong>和</strong>隐式许可（Implicit）</strong>。</p>
<p>以下是一些进行对应类型的发送请求的伪代码</p>
<h4 id="授权码许可authorization-code">授权码许可(Authorization Code)</h4>
<p>授权码许可是OAuth 2.0中最常用的许可类型。它的流程如下：</p>
<p>小票软件将用户重定向到京东商家开放平台的授权页面。
用户在授权页面登录并点击授权按钮。
京东商家开放平台生成一个授权码，并通过重定向将用户带回小票软件指定的回调URL。
小票软件从回调URL中获取授权码。
小票软件使用授权码向京东商家开放平台请求访问令牌。
京东商家开放平台验证授权码并颁发访问令牌给小票软件。
小票软件使用访问令牌来获取小明店铺的订单信息，并生成发票。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span><span class="w"> </span><span class="n">grantType</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">request</span><span class="p">.</span><span class="na">getParameter</span><span class="p">(</span><span class="s">&#34;grant_type&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">if</span><span class="p">(</span><span class="s">&#34;authorization_code&#34;</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">grantType</span><span class="p">)){</span><span class="w">  </span><span class="p">}</span></span></span></code></pre></div></div>
<h4 id="资源拥有者凭据许可resource-owner-password-credential">资源拥有者凭据许可(Resource Owner Password Credential)</h4>
<p>资源拥有者凭据许可是一种直接使用用户名和密码进行认证的许可类型。该许可类型要求客户端直接获取用户的凭据，并使用这些凭据向授权服务器进行身份验证。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">params</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="s">&#34;grant_type&#34;</span><span class="p">,</span><span class="s">&#34;password&#34;</span><span class="p">);</span></span></span></code></pre></div></div>
<h4 id="客户端凭据许可client-credential">客户端凭据许可(Client Credential)</h4>
<p>客户端凭据许可适用于没有资源拥有者参与的情况下，客户端直接与授权服务器进行身份验证并获取访问令牌。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">params</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="s">&#34;grant_type&#34;</span><span class="p">,</span><span class="s">&#34;client_credentials&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">params</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="s">&#34;app_id&#34;</span><span class="p">,</span><span class="s">&#34;APPIDTEST&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">params</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="s">&#34;app_secret&#34;</span><span class="p">,</span><span class="s">&#34;APPSECRETTEST&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">String</span><span class="w"> </span><span class="n">accessToken</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HttpURLClient</span><span class="p">.</span><span class="na">doPost</span><span class="p">(</span><span class="n">oauthURl</span><span class="p">,</span><span class="n">HttpURLClient</span><span class="p">.</span><span class="na">mapToStr</span><span class="p">(</span><span class="n">params</span><span class="p">));</span><span class="err">”</span></span></span></code></pre></div></div>
<h4 id="隐式许可implicit">隐式许可（Implicit)</h4>
<p>隐式许可是一种在浏览器中直接向授权服务器请求访问令牌的许可类型。这种许可类型通常用于单页应用程序或移动应用程序，因为它们无法安全地保持客户端凭据。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">params</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="s">&#34;response_type&#34;</span><span class="p">,</span><span class="s">&#34;token&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">params</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="s">&#34;app_id&#34;</span><span class="p">,</span><span class="s">&#34;APPIDTEST&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">String</span><span class="w"> </span><span class="n">toOauthUrl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">URLParamsUtil</span><span class="p">.</span><span class="na">appendParams</span><span class="p">(</span><span class="n">oauthUrl</span><span class="p">,</span><span class="n">params</span><span class="p">);</span></span></span></code></pre></div></div>
<h3 id="authorization-code-的实现分类">Authorization Code 的实现分类</h3>
<p>Authorization Code的实现主要分为两类：无服务器实现（使用PKCE）和有服务器实现。</p>
<p>无服务器实现使用PKCE（Proof Key for Code Exchange by OAuth Public Clients）来增加安全性，但应用较少。</p>
<p>有服务器实现广泛使用且更安全。</p>
<h3 id="authorization-code-实现的流程图">Authorization Code 实现的流程图</h3>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Security/OAuth/OAuth2.0-Flow.67h7qmku8ak0.svg" alt="OAuth 2.0 Flow" /></p>
<h2 id="oidc">OIDC</h2>
<p>OAuth2.0 是一种授权协议，而不是身份认证协议。OIDC 才是身份认证协议，而且是基于 OAuth 2.0 来执行用户身份认证的互通协议。更概括地说，OIDC 就是直接基于 OAuth 2.0 构建的身份认证框架协议。</p>
<h3 id="其3个角色与oauth20的4个角色的对应关系">其3个角色与OAuth2.0的4个角色的对应关系</h3>
<p>以下是OIDC 种的三个角色：</p>
<ul>
<li>EU（End User），代表最终用户</li>
<li>RP（Relying Party），代表认证服务的依赖方，就是上面我提到的第三方软件</li>
<li>OP（OpenID Provider），代表提供身份认证服务方</li>
</ul>
<p>OAuth 2.0 的 4 个角色和 OIDC 的 3 个角色之间的对应关系</p>
<ul>
<li>资源拥有者 -&gt; EU</li>
<li>第三方软件-&gt; RP</li>
<li>授权服务 + 受保护资源-&gt; OP</li>
</ul>
<h3 id="oidc-种的id_token">OIDC 种的ID_TOKEN</h3>
<p>OIDC 种有一个非常重要，从认证服务器下发的一个字段，就是OIDC, 其存储了一些非常有用的信息</p>
<ul>
<li>iss，令牌的颁发者，其值就是身份认证服务（OP）的 URL</li>
<li>sub，令牌的主题，其值是一个能够代表最终用户（EU）的全局唯一标识符</li>
<li>aud，令牌的目标受众，其值是三方软件（RP）的 app_id</li>
<li>exp，令牌的到期时间戳，所有的 ID 令牌都会有一个过期时间</li>
<li>iat，颁发令牌的时间戳</li>
</ul>
<h3 id="oidc-的流程图">OIDC 的流程图</h3>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Security/OAuth/OIDC-flow.6le76zwbokc0.svg" alt="OIDC Flow" /></p>
]]></description></item><item><title>解决Podman未挂载Volume的问题</title><link>https://guzhongren.github.io/2023/05/%E8%A7%A3%E5%86%B3podman%E6%9C%AA%E6%8C%82%E8%BD%BDvolume%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 03 May 2023 10:58:17 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/05/%E8%A7%A3%E5%86%B3podman%E6%9C%AA%E6%8C%82%E8%BD%BDvolume%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="问题">问题</h2>
<p>在初次使用<a href="https://podman.io/">podman</a><sup>[1]</sup>
 挂载本地文件系统的时候通常会报如下的一个错误提示；</p>
<blockquote>
<p>Error: statfs /Users/userName/yyy/xxx: no such file or directory</p></blockquote>
<h2 id="解决方案">解决方案</h2>
<p>为 Podman 虚拟机挂载 $HOME 目录并且重启 podman machine 即可。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">podman machine stop podman-machine-default
</span></span><span class="line"><span class="cl">podman machine rm podman-machine-default
</span></span><span class="line"><span class="cl">podman machine init -v <span class="nv">$HOME</span>:<span class="nv">$HOME</span>
</span></span><span class="line"><span class="cl">podman machine start</span></span></code></pre></div></div>
<h2 id="测试">测试</h2>
<p>运行如下命令，可以在命令行里看到本机的目录和文件。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">podman run -ti --rm -v <span class="nv">$HOME</span>:<span class="nv">$HOME</span> busybox</span></span></code></pre></div></div>
<h2 id="add-one">Add one</h2>
<p>如此这样，以后在需要挂载特定目录时，只需要和 docker 的操作一样，只须挂载特定目录即可。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>podman: <a href="https://podman.io/" rel="noopener noreferrer">https://podman.io/</a></li></ol>
            </div>]]></description></item><item><title>成为一个职业的职业人</title><link>https://guzhongren.github.io/2023/04/%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E8%81%8C%E4%B8%9A%E7%9A%84%E8%81%8C%E4%B8%9A%E4%BA%BA/</link><pubDate>Thu, 20 Apr 2023 22:21:35 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/04/%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E8%81%8C%E4%B8%9A%E7%9A%84%E8%81%8C%E4%B8%9A%E4%BA%BA/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>工作多年后，慢慢的人就成熟了，做事慢慢也有了章法，有了自己的方法论；对团队的理解也更深刻了。</p>
<p>近几年随着疫情，大家默默形成了远程办公的习惯，而很多人还是没有从思想上形成远程办公的习惯。</p>
<p>以下是最近工作的一些总结和想法。</p>
<h2 id="事事有响应">事事有响应</h2>
<p>TL 说&quot;@All, 客服团队有人已经按照我们的模板开始提issue了，大家以后收到Ticket第一时间去检查Ticket 的内容是不是符合我们的模板。&quot;</p>
<p>1分钟过去了。</p>
<p>5 分钟过去了。</p>
<p>10 分钟过去了。</p>
<p>&hellip;&hellip;</p>
<p>一天过去了&hellip;&hellip;</p>
<p>就这样，没有人对你的消息做任何回应，即使是消息下面的表情信息也没有任何更新。那么，这是一次无效的沟通。而作为团队的成员，我们应该及时的给予&quot;任何事物&quot;反馈，形成有效沟通。另一方面，我们需要换位思考，为什么有人会在大群里说话，肯定是有重要的事情通知，而对方希望得到对应的响应，无论响应是正向的还是负面的。</p>
<h2 id="事事有始有终">事事有始有终</h2>
<p>现在在公司打两份工，一份是正经的工作，一份是一个公司内部的开源项目，都是作为TL，带领着若干个毕业生，而且一般都是所谓的&quot;非计&quot;，在我司也被称之为&quot;SuperX&quot;。</p>
<p>和我刚开始工作一样，大家都是对一件事不是那么上心，或者是不知道怎么才能把一件事做的漂漂亮亮，导致在后面追问的时候，大家都很茫然。在这里很重要的一点就是，做事要有始有终，以终为始。</p>
<h2 id="全局视角让你更游刃有余">全局视角，让你更游刃有余</h2>
<p>工作的价值就是不要浪费时间且持续输出有价值的内容。比如做一个功能卡，要完成前端的一个展示组件，但是在这个组件背后有个隐形知识，就是需要设计一个全局的存储，将用户选择的内容存储下来，方便后面将其下载为配置文件。</p>
<p>这样的隐形知识只有有全局的功能视角或者路线图的认知下才能想到。如果你有了这样的全局视角，你就会设计更合理的架构，编写更合理的数据结构，从而提升系统的可扩展，易维护的能力。</p>
<p>为了有这样的能力，推荐学习项目在业务方面的&quot;用户旅程&quot;，技术方面的<a href="https://guzhongren.github.io/slides/talks/01.C4-Model">C4 Modeling</a><sup>[1]</sup>
, <a href="https://plantuml.com/sequence-diagram">数据流图</a><sup>[2]</sup>
等等的。使用这些技术，将会加速你对项目的认知，做出更合理业务/架构决策。</p>
<h2 id="挖掘工作背后的真正目的从而向上管理">挖掘工作背后的真正目的，从而&quot;向上管理&quot;</h2>
<p>比如，给你分配了一个统计团队能力结构的一个工作，表格模板也给你了，那么你要怎么做呢？</p>
<p>首先，我们应该将模板调整为我们项目的技术栈、项目信息、人员情况，然后将表分享给组内小伙伴去在规定的时间内完成。等在最终截止日期时，把所有的信息分享给TL。大多时候，我们认为我们的工作就此结束了。</p>
<p>作为领导者，你可能要考虑&quot;向上管理&quot;，将收集到的结果统计并形成最直观、简洁的图表等来展示，且提供你的建议意见，让你的领导节省时间。这才是这份工作的重要性。</p>
<p>去挖掘工作的最终目的吧，那样的工作才有意义。</p>
<h2 id="做事前多想想task">做事前多想想Task</h2>
<p>最近在和team 更新团队情况的时候发现，团队成员总是没有在预估的点数内完成工作，而且情况比较普遍，经过多次反问，得出结论是，对系统和产品没有一个全局的认识，并且对自己的卡在全局中的位置，作用都不是很清楚，更有甚者，对自己开发的接口的上游是什么都不清楚。</p>
<p>这种情况从团队负责人的角度来看是有严重问题的，那么作为团队的负责人，就得想办法解决。上层的问题，可以&quot;胡萝卜大棒&quot;的形式加以&quot;授权和分配&quot;来解决。但是落到具体的个人身上，该如何解决呢？</p>
<p>通常个人一般通过接受外部资源信息和主动获取信息来提升个人能力。在获取到信息后，个人需要对自己所做的工作进行分析，拆分。使用&quot;分而治之&quot;的思想将工作拆分为一个个可衡量，有产出的task, 再开始干活。这样工作将会变得比之前轻松很多。</p>
<h2 id="慢慢来比较快">慢慢来，比较快</h2>
<p>现在，我在负责新加坡的一个运维项目，组里的成员都是新人，而且还有不少毕业生；因为这是一个非常大的项目，我们每个人对整个项目都是只知道一点，虽然有各种各样的KT(Knowledge Transfer), 但是能吸收的少之又少。</p>
<p>在这种情况下，我们每天都要面对来自用户，公民的各种问题，还要接受内部同事的Feedback，这样的运维工作既没有效率，也没有成就感。</p>
<p>&ldquo;慢慢来，比较快&rdquo;。 应对这样的问题我们最好的方式，就是将业务流程梳理清晰，微服务之间的调用关系整理成易于理解的关系图或者数据流图。这样在了解了真正的业务之后，再做决定，将会事半功倍，且在应对任何问题的时候都会信心满满，从而加速工作的推进。</p>
<h2 id="好脑子不如烂笔头">好脑子不如烂笔头</h2>
<p>把你想到的内容尽快写下来, 不然，当你错过那个念头之后，那个想法就会立马变味。</p>
<p>刚刚，我已经忘了一个这个文章的一个&quot;好点子&quot;。</p>
<h2 id="归档">归档</h2>
<p>将日常用到的或者可重复的内容文字化、脚本化，并且保持&quot;Source of Truth&quot;，永远只有一份，且是最新的。</p>
<p>当有人要问你相关的问题，你只需要甩给他一个图，一个链接，或者给他一个图片。</p>
<p>一个人的厚重感，可能就是他脑子里归档好的所有有效的知识和链接吧。</p>
<p>&hellip;&hellip;</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>C4 Modeling: <a href="https://guzhongren.github.io/slides/talks/01.C4-Model" rel="noopener noreferrer">https://guzhongren.github.io/slides/talks/01.C4-Model</a></li><li>数据流图: <a href="https://plantuml.com/sequence-diagram" rel="noopener noreferrer">https://plantuml.com/sequence-diagram</a></li></ol>
            </div>]]></description></item><item><title>忙碌的三月</title><link>https://guzhongren.github.io/2023/03/%E5%BF%99%E7%A2%8C%E7%9A%84%E4%B8%89%E6%9C%88/</link><pubDate>Fri, 31 Mar 2023 22:28:48 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/03/%E5%BF%99%E7%A2%8C%E7%9A%84%E4%B8%89%E6%9C%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="带娃真的很累">带娃真的很累</h2>
<p>娃快3个月了，周末不上班，所以周五和周六晚上就和娃一起睡了。每天晚上娃都会随机的醒来三四次，导致睡眠质量下降。每周末，我都要去打球，然而这周刚上场没打10分钟就累的不行了，整个早上，就有效的打了30分钟左右，整个人都累趴了。</p>
<p>想想媳妇都带了2个月了，每天抱娃，哄娃，喂奶，真是幸苦的无法言语了。</p>
<h2 id="短视频感想">短视频感想</h2>
<p>现在社会被各种短视频充斥着，在这个本就烦躁的世界增添了一份无奈。
对我们来说，短视频更应该是一种有效信息获取的方式，然而很多视频都是掐头去尾，毫无信息可言，大家都被AI 智能推荐到了各自的信息茧房里了。</p>
<p>所以，关注一些有见地的长视频或者一些大品牌的新闻网站，从他们那里获取的新闻质量会比较高。</p>
<h2 id="公众号">公众号</h2>
<p>之前关注了很多公众号，现在看看那些公众号，各个都是新闻的转发者。打开公众号列表，你会青一色看到同一个新闻标题在不同的公众号上显示。</p>
<p>我们当时为什么要有公众号？我想大多都是为了打造自己的影响力。也许在资本的作用下，大家为了挣钱，早已丢失了自己的的初心。</p>
]]></description></item><item><title>开源项目构建及治理之产品构建</title><link>https://guzhongren.github.io/2023/01/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%8F%8A%E6%B2%BB%E7%90%86%E4%B9%8B%E4%BA%A7%E5%93%81%E6%9E%84%E5%BB%BA/</link><pubDate>Mon, 23 Jan 2023 17:22:10 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/01/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%8F%8A%E6%B2%BB%E7%90%86%E4%B9%8B%E4%BA%A7%E5%93%81%E6%9E%84%E5%BB%BA/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1612201598945-f66a763965bd?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1470&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="前言">前言</h2>
<p>计算机世界几乎就是建立在开源项目之上的。近几年，国内外有很多开源项目出圈，例如 CNCF 的Kubernetes, 百度在Apache 毕业的 EChart。开源不仅可以展示自己的技术能力，而且还可以为他人提供免费“物料”，减少重复造轮子的事的发生，“间接为全球碳中和做贡献”。</p>
<p>因为之前有一些开源相关的实践，只是在小范围内实践了部分项目，而最近正在参与并领导一个开源项目，正好把之前的一些实践给应用起来了，同时也在这里做个总结。</p>
<h2 id="一图胜千言">一图胜千言</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Open-Source/%e5%bc%80%e6%ba%90%e9%a1%b9%e7%9b%ae%e6%9e%84%e5%bb%ba%e5%8f%8a%e6%b2%bb%e7%90%86.2witgnrnxzc0.webp" alt="开源项目构建及治理" /></p>
<h2 id="产品product">产品（Product）</h2>
<p>开源的目的为了方便他人以最低的代价实现业务价值增长，或工作效率提升等；那么必须有一个产物（Artifact）,它可能是一个可下载, 可直接运行的软件包，也可能是一个有无服务器运行的在线应用程序，亦或是某一个领域，实践比较好或体验更好的第三方的依赖等。凡此种种，我们都可以称之为 “产品（Production）”。</p>
<p>一个好的开源产品应该包含但不限于以下内容。</p>
<h3 id="产品名称name">产品名称(Name)</h3>
<p>每个事物都有他自己的标识。好的产品名称对产品来说就是如虎添翼，产品名称可以是随心所欲的字符串，也可以是你的小宠物，当然还可以是地名，人物名等。</p>
<p>比如<code>鸿蒙</code>, 原意是远古时期的混沌世界，但在华为当时的情景下代表着希望、梦想；再比如<code>Kubernetes</code>, 原意代表舵手，操作驾驶船舶的人，但在云原生背景下，他是用于自动部署、扩展和管理容器化应用程序的操作系统，Kubernates 和舵手的作用在这不谋而合；再比如开源单元测试报告生成工具<code>Istanbul</code>, 字面意思上，最初它只是土耳其的城市，因其悠久的历史而闻名，而在开源的世界里，可以被用来给开源项目当名称，同样的还有如<code>Cypress</code>等。</p>
<h3 id="产品口号slogen">产品口号(Slogen)</h3>
<p>Slogen 就是一句话，各种类型的都有，有表明态度型的，比如 Apple 的 <code>Think different</code>; 有鼓励用户行动型的，比如耐克的<code>Just do it</code>; 有传达观点型的，比如戴比乐斯的<code>钻石恒久远，一颗永留传</code>; 但在开源的世界里，大家更喜欢用表明态度型，用一句话来说明自己产品的特性，比如 React 的 Slogen: <code>A JavaScript library for building user interfaces</code>,  Jenkins 的 Slogen <code>Build great things at any scale</code>。</p>
<h3 id="标志logo">标志(Logo)</h3>
<p>作为产品，首先被记住的肯定是产品的的使用，然后是标志(Logo)。Logo 有文字型的，有图形型的，也有两者都有的。但是一个不复杂，认知度低的Logo 的辨识度是非常高的。</p>
<h3 id="许可证license">许可证(License)</h3>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/86/Open-source-license-chart.svg/1024px-Open-source-license-chart.svg.png" alt="Open Source License" /></p>
<p>在开源的世界里，许可证的选择非常重要；有的是不可商用的，许可证包括GNU通用公共许可证（GPL）、GNU通用公共许可证版本3（GPLv3）、类似GPL的许可证，以及非常严格的自由软件许可证，著名软件如：Linux操作系统内核, GNU工具套件,WordPress博客系统等。也有可商用，但不能被云厂商托管使用的许可证，如<a href="https://opensource.org/licenses/BSD-3-Clause">BSD 3-Clause</a><sup>[1]</sup>
,软件如： <a href="https://github.com/redis/redis">Redis</a><sup>[2]</sup>
; 如<a href="https://www.mongodb.com/licensing/server-side-public-license">Server Side Public License (SSPL)</a><sup>[3]</sup>
，软件如： <a href="https://github.com/mongodb">MongoDB</a><sup>[4]</sup>
。也有可商用也可免费使用的许可证，如：MIT, Apache License 2.0, 开源软件有ECharts等。</p>
<p>许可证的选择可以参考 <a href="https://opensource.org/licenses/category">opensource.org</a><sup>[5]</sup>
和开源工具<a href="https://ufal.github.io/public-license-selector/">License Selector</a><sup>[6]</sup>
来选择合适的许可证。</p>
<h3 id="开发文档readme">开发文档(README)</h3>
<p>长盛不衰的开源项目总是有一个简单直观的开发文档，指导和帮助新加入的贡献者(Contributor)来快速上手项目, 或者记录一些重要的操作步骤，如如何发布版本。当然也可以在 README 里写使用步骤，项目 Roadmap 等。</p>
<p>README 文档非常重要，不管你的开源项目使用范围有多大，请把他当作一个礼仪一样的内容来准备， 为了自己也是为了他人。</p>
<h3 id="产品网站web-site">产品网站(Web site)</h3>
<p>产品网站是宣传产品非常重要的途径。对于开源产品不需要花哨的设计，或者酷炫的交互，只需将产品的名称、Slogen、特性（Feature）、相关文档放在醒目的位置，然后集成一些社交信息，比如GitHub 项目链接，如果有大公司使用你的产品，可以将其单独列出来，来为自己的产品背书。还有，如果有项目捐赠者，一定要将其分类高亮出来，给予捐赠者相应的地位和曝光，说不定他们可以为你的产品吸引来更多的捐赠者。</p>
<p>如下是一些做得比较好的产品网站：</p>
<ul>
<li>Jenkins: <a href="https://www.jenkins.io/">https://www.jenkins.io/</a><sup>[7]</sup>
</li>
<li>Playwright: <a href="https://playwright.dev/">https://playwright.dev/</a><sup>[8]</sup>
</li>
</ul>
<h3 id="产品路线图roadmap">产品路线图(Roadmap)</h3>
<p>产品路线图为项目关注者、贡献者指明产品未来的发展方向，及涉及的技术维度，同时也是一种知识沉淀，可以让后面关注项目的人了解到产品是怎么来的，为什么会是这样以及将来会是什么发展方向。</p>
<p>产品路线图可能会影响到用户的商业决策，也可能会影响到项目贡献者的积极性等，所以在展示你的产品路线图的时候一定要谨慎。</p>
<p>Roadmap 的形式有各种各样的，如下是Jenkins 和 Azure 的 Roadmap。</p>
<ul>
<li>Jenkins: <a href="https://www.jenkins.io/project/roadmap/">https://www.jenkins.io/project/roadmap/</a><sup>[9]</sup>
</li>
<li>Azure: <a href="https://github.com/Azure/AKS/projects/1">https://github.com/Azure/AKS/projects/1</a><sup>[10]</sup>
</li>
</ul>
<h3 id="发布计划release-plan">发布计划(Release plan)</h3>
<p><img src="https://upload.wikimedia.org/wikipedia/en/timeline/gogh13ap32j8q3u985j8sx5r65w01ya.png" alt="Linux Kernel Release" /></p>
<p>发布计划在开源项目里也是一个非常重要项目，有计划地发布周期总是给人以稳定、靠谱的期望，有了期望之后，不管是贡献者还是使用者，大家都有了盼头。</p>
<p>不同的项目有不同的发布方式。比如 <a href="https://www.kernel.org/">Linux Kernal</a><sup>[11]</sup>
 的发布计划，完全取决于 <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a><sup>[12]</sup>
 和 Linux Kernel 社区。其发布计划可在<a href="https://en.wikipedia.org/wiki/Linux_kernel_version_history#:~:text=Property%20Value%20%20Version%20%20%20%20Original,Kroah-Hartman%20%20%20Named%20Blurry%20Fish%20Butt%20">这里</a><sup>[13]</sup>
查看。</p>
<p>当然还有规律性发布的产品，如<a href="https://github.com/golang/go">GoLang</a><sup>[14]</sup>
, 其发布计划如下：总体目标是每6个月发布一次主要版本，然后细分为3个月的常规开发，然后是3个月的测试和优化，即所谓的版本冻结。</p>
<p>还有基于功能的发布计划，大部分产品都使用这种。比如 Kubernetes, 其发布计划就是将所涉及的功能开发完成后才发布的。其发布计划可以查看<a href="https://github.com/kubernetes/kubernetes/milestones">这里</a><sup>[15]</sup>
。</p>
<h3 id="产品版本控制策略version-control">产品版本控制策略(Version control)</h3>
<p>产品的版本控制策略通常是指产品的版本。我们通常使用语义化(<a href="https://semver.org/">Semver</a><sup>[16]</sup>
)的策略来发布产品，比如 <a href="https://github.com/facebook/react/blob/main/packages/react/package.json">React</a><sup>[17]</sup>
; 还有一种基于日期的发布策略，但是一般不常用，比如 <a href="https://ubuntu.com/download/desktop">Ubuntu Desktop</a><sup>[18]</sup>
, 其版本是与年份和月份相关的，如<code>Ubuntu 22.04.1 LTS</code>。</p>
<h3 id="反馈系统feedback">反馈系统(Feedback)</h3>
<p>所谓反馈一般指两种，一种是来自最终用户的反馈，可能包含夸赞、诋毁或者建议意见，良好的反馈循环可以将某些反馈转化为需求；另一种是间接产生的反馈，如贡献者或者使用该项目的开发者发现的不足，这类反馈一般都是比较重要的 bug，作为开源项目的维护者，应及时关注并解决。</p>
<p>反馈系统的类型也是多种多样，通常是在产品官网或者产品社区网站提供一个对话框或者留言板，允许用户进行留言, 这种方式主要针对最终用户；还有一种通过使用代码托管平台创建 Issue, 这种方式主要针对开发者。这里可以使用其他开发者开源的一些应用，如：<a href="https://utteranc.es/">uterance.es</a><sup>[19]</sup>
、 <a href="https://github.com/imsun/gitment">gitment</a><sup>[20]</sup>
和 <a href="https://github.com/gitalk/gitalk">gitalk</a><sup>[21]</sup>
。</p>
<h3 id="代码code">代码(Code)</h3>
<p>作为开源项目，毋庸置疑必须以代码为基础，但是在写代码之前一定要考虑一些事，比如项目组的行为规范(Code of conduct)、贡献策略(Contributing)、代码请求(PR)、安全(Security)、合规性(Compliance)、及产品文档(Doc as code)……</p>
<h4 id="行为规范code-of-conduct">行为规范(Code of Conduct)</h4>
<p>&ldquo;无规矩不成方圆&rdquo;。好的开源社区的特质总是相似的，平等、没有各种歧视、激励性发言和没有骚扰等等的，在社区内容是一些默认&quot;规矩&quot;，大家都默认遵守。Code of Conduct 包含各个方面，人文、政治、地理、宗教和性别等。这里可以参考 Microsoft 和 Thoughtworks 与 <a href="https://www.contributor-covenant.org/">Contributor Convenant</a><sup>[22]</sup>
的行为规范。</p>
<ul>
<li><a href="https://github.com/microsoft/playwright/blob/main/CODE_OF_CONDUCT.md">Microsoft Open Source Code of Conduct: https://github.com/microsoft/playwright/blob/main/CODE_OF_CONDUCT.md</a><sup>[23]</sup>
</li>
<li><a href="https://www.thoughtworks.com/content/dam/thoughtworks/documents/guide/tw_guide_code_of_conduct_en_aug_2021.pdf">Thoughtworks Code of Conduct: https://www.thoughtworks.com/content/dam/thoughtworks/documents/guide/tw_guide_code_of_conduct_en_aug_2021.pdf</a><sup>[24]</sup>
</li>
<li><a href="https://www.contributor-covenant.org/">Contributor Convenant</a><sup>[22]</sup>
</li>
</ul>
<h4 id="贡献策略contributing">贡献策略(Contributing)</h4>
<p>开源项目总是欢迎来自世界各地的贡献者(Contributor)。为了更好地协作或者减少认知负载，开源社区一般会有自己的贡献策略，比如代码风格是什么样的，API 该怎么规范，如何做Code Review, 以及需要满足什么样的代码测试覆盖率等等。一般会在项目的README 中强调出来，当然也可以将其代码化，通过 CI 工具来实现自动化检查。比如 Playwright 就在自己的 <a href="https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md">Contributing</a><sup>[25]</sup>
 文档里阐述了如何为其项目贡献的贡献策略。</p>
<p><img src="https://allcontributors.org/img/icons/android-icon-192x192.png" alt="Allcontributors" /></p>
<p>同时，如果你将项目的贡献者添加到项目中醒目的位置，让所有人看到他为这个项目贡献了内容，这将激励更多的贡献者为项目做贡献。这里推荐使用<a href="https://allcontributors.org/">Allcontributors</a><sup>[26]</sup>
, 通过为你的开源项目集成这个工具，在项目的README 中可以显示共享者的头像及贡献类型，让贡献者感觉到参与开源项目的荣耀感。</p>
<h4 id="代码请求pr">代码请求(PR)</h4>
<p>在开源项目中，大家通常使用 PR (Pull Request) 来贡献代码, 所以项目的维护者(Maintainer)要将一部分精力放在 Reveiw 别的贡献者的PR 上，同时给予鼓励性的言语评语(Comment), 或者给予适当的建议意见。要相信正向的鼓励总是会带来不一样的额外收获。</p>
<p>当然，我们也要推荐大家使用一些约定俗成的简写，如：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">简写</th>
          <th style="text-align: left">英语全拼</th>
          <th style="text-align: left">中文释义</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">PR</td>
          <td style="text-align: left">Pull request</td>
          <td style="text-align: left">请求合并代码</td>
      </tr>
      <tr>
          <td style="text-align: left">WIP</td>
          <td style="text-align: left">Work in progress</td>
          <td style="text-align: left">贡献者做了很大的改动，但部分完成了，这里就是WIP,这样就方便别人知道你的提交的进展，审核已经完成的部分</td>
      </tr>
      <tr>
          <td style="text-align: left">PTAL</td>
          <td style="text-align: left">Please take a look</td>
          <td style="text-align: left">请求别人进行 Code Review</td>
      </tr>
      <tr>
          <td style="text-align: left">TBR</td>
          <td style="text-align: left">To be reviewed</td>
          <td style="text-align: left">提示别人这些代码要被Review</td>
      </tr>
      <tr>
          <td style="text-align: left">TL/DR</td>
          <td style="text-align: left">Too long, Don&rsquo;t read</td>
          <td style="text-align: left">太长了，懒得看</td>
      </tr>
      <tr>
          <td style="text-align: left">LGTM</td>
          <td style="text-align: left">Look good to me</td>
          <td style="text-align: left">通常是指Review 通过</td>
      </tr>
      <tr>
          <td style="text-align: left">SGTM</td>
          <td style="text-align: left">Sound good to me</td>
          <td style="text-align: left">和LGTM 同义</td>
      </tr>
      <tr>
          <td style="text-align: left">AFAIK</td>
          <td style="text-align: left">As far as I know</td>
          <td style="text-align: left">据我所知</td>
      </tr>
      <tr>
          <td style="text-align: left">CC</td>
          <td style="text-align: left">Carbon Copy</td>
          <td style="text-align: left">抄送</td>
      </tr>
  </tbody>
</table>
<h4 id="安全security">安全(Security)</h4>
<p>安全问题不管是在开源项目还是商业项目中都非常重要，我们可以将其分为<code>静态应用安全测试</code>、<code>动态应用安全测试</code>和<code>依赖安全检查</code>几大类。</p>
<h5 id="静态应用安全测试">静态应用安全测试</h5>
<p>静态应用安全测试(Static Application Security Testing),简称 <code>SAST</code>，也称之为源码安全扫描。</p>
<p>SAST 主要是通过使用工具来对源代码进行分析，找出源代码中存在的安全问题，比如密钥, 或者存在安全问题的对象的方法等。</p>
<p>使用SATS, 我们能够:</p>
<ul>
<li>让安全问题提早暴露出来，从而降低修复成本</li>
<li>降低开发团队对于安全专业技能的要求</li>
<li>用事半功倍的方式获取源码对安全质量的反馈</li>
</ul>
<p>做静态应用安全测试的工具有很多，主要分为开源免费和商业授权使用两类；并且可以将其集成到 IDE 或者 Pipeline 中。</p>
<h6 id="开源免费">开源免费</h6>
<ul>
<li><a href="https://www.sonarsource.com/">SonarQube</a><sup>[27]</sup>
</li>
<li><a href="https://spotbugs.github.io/">Spot Bugs</a><sup>[28]</sup>
</li>
<li><a href="https://find-sec-bugs.github.io/">Find-Sec-Bugs</a><sup>[29]</sup>
</li>
<li><a href="https://github.com/PyCQA/bandit">Bandit</a><sup>[30]</sup>
</li>
<li><a href="https://github.com/presidentbeef/brakeman">Brakeman</a><sup>[31]</sup>
</li>
<li><a href="https://github.com/trufflesecurity/trufflehog">trufflehog</a><sup>[32]</sup>
</li>
<li><a href="https://github.com/thoughtworks/talisman">Talisman</a><sup>[33]</sup>
</li>
</ul>
<h6 id="商业授权">商业授权</h6>
<ul>
<li><a href="https://www.microfocus.com/en-us/cyberres/application-security">Fortify</a><sup>[34]</sup>
</li>
<li><a href="https://checkmarx.com/">CheckMarx</a><sup>[35]</sup>
</li>
</ul>
<h5 id="动态应用安全测试">动态应用安全测试</h5>
<p>动态应用安全测试， Dynamic Application Security Testing,简称 <code>DAST</code>。</p>
<p>DAST 主要是使用第三方漏洞工具对正在运行的应用程序及其环境进行扫描，并将扫描到的安全问题可视化处理的过程。</p>
<p>DAST 通常在项目运行起来之后进行，是对应用程序的<em>行为</em>进行测试。</p>
<p>可使用的工具有：</p>
<h6 id="开源免费-1">开源免费</h6>
<ul>
<li><a href="https://www.zaproxy.org/">OWASP® Zed Attack Proxy (ZAP)</a><sup>[36]</sup>
</li>
<li><a href="https://www.arachni-scanner.com/">Arachni</a><sup>[37]</sup>
</li>
</ul>
<h5 id="商业授权-1">商业授权</h5>
<ul>
<li><a href="https://www.acunetix.com/">Acunetix</a><sup>[38]</sup>
</li>
<li><a href="https://www.rapid7.com/">Rapid7</a><sup>[39]</sup>
</li>
</ul>
<h5 id="依赖安全检查">依赖安全检查</h5>
<p>现代应用程序大都是基于已有的第三方框架(Framework) 和包(package)来构建的。在开发过程中，我们更关注我们的功能的实现，容易忽略第三方依赖的安全问题，比如 2021 年的 <a href="https://en.wikipedia.org/wiki/Log4j#Log4Shell_vulnerability">Log4Shell 漏洞问题</a><sup>[40]</sup>
, 由于这个<a href="https://logging.apache.org/log4j/2.x/">Log4j</a><sup>[41]</sup>
 常用包被集成到全球很多项目中，而其某些版本是有安全漏洞的，如果不能及时修复，那么可能会出现很多问题，包括政治，经济，安全等等。</p>
<p>对于依赖安全来说，也有很多工具可以使用：</p>
<h6 id="开源免费-2">开源免费</h6>
<ul>
<li><a href="https://www.mend.io/free-developer-tools/renovate/">Mend renovate</a><sup>[42]</sup>
, 注：商业收费，但对开源项目免费</li>
<li><a href="https://docs.npmjs.com/cli/v6/commands/npm-audit">npm-autit</a><sup>[43]</sup>
</li>
<li><a href="https://owasp.org/www-project-dependency-check/">OWASP DependencyCheck</a><sup>[44]</sup>
</li>
<li><a href="https://github.com/dependabot">GitHub Dependabot</a><sup>[45]</sup>
</li>
<li><a href="https://realpython.com/pipenv-guide/">Pipen</a><sup>[46]</sup>
 - Python</li>
<li><a href="https://github.com/rubysec/bundler-audit">bundle-audit</a><sup>[47]</sup>
 - Ruby</li>
<li><a href="https://github.com/hawkeyesec/scanner-cli">Hawkeye</a><sup>[48]</sup>
, 注：作者正在转手这个项目</li>
<li><a href="https://github.com/aquasecurity/trivy">Trivy</a><sup>[49]</sup>
</li>
<li><a href="https://snyk.io/">Snyk</a><sup>[50]</sup>
</li>
</ul>
<h6 id="商业授权-2">商业授权</h6>
<ul>
<li><a href="https://www.synopsys.com/software-integrity/security-testing/software-composition-analysis.html">BlackDuck</a><sup>[51]</sup>
</li>
<li><a href="https://snyk.io/">Snyk</a><sup>[50]</sup>
</li>
</ul>
<h4 id="合规性compliance">合规性(Compliance)</h4>
<p>开源项目的合规性不仅是自身产品代码的合规性，还有一部分是第三方依赖的合规性。</p>
<p>如果你的开源项目使用了受版权保护的依赖，那么，你很可能会收到有版权依赖公司的律师函或者邮件，轻则什么事都没有，重则倾家荡产，牢底坐穿。比如，2018年 Facebook 将 React 的许可证由 MIT 许可证变更为 Facebook 公司的许可证，这个变更带来了一些问题，其中一些是：</p>
<ul>
<li>
<p>遵循新许可证的限制： 新许可证要求在使用React的代码的同时，必须在应用程序中明确标识&quot;Powered by React&quot;。这可能会对一些公司或组织带来麻烦，因为他们可能不想在应用程序中显示这个标识。</p>
</li>
<li>
<p>对第三方库的影响： 由于React是一个流行的JavaScript库，很多第三方库都依赖于它。因此，这次许可证变更可能会影响到这些第三方库的使用。</p>
</li>
<li>
<p>法律纠纷风险： 因为新许可证包含了一些限制条款，所以如果某些公司或组织没有遵循这些限制条款，他们可能会面临法律纠纷。</p>
</li>
<li>
<p>对开源社区的影响： 这次许可证变更可能会对开源社区产生影响，因为一些开发人员可能不愿意遵循新许可证的限制条款，而放弃使用React。</p>
</li>
</ul>
<p>所以，在开始你的开源项目前，你需要想清楚你的开源项目的定位及开源协议，这里可以参考 <a href="https://opensource.org/licenses">opensource.org</a><sup>[52]</sup>
 来找到适合你的开源协议，也可以使用这款工具<a href="https://ufal.github.io/public-license-selector/">License Selector</a><sup>[6]</sup>
来根据提问来选择合适的开源协议。</p>
<p>当然你需要一定的工具来保证你的依赖的合规性。比如：对于基于 NodeJS 的项目，可以使用 <a href="https://www.npmjs.com/package/license-compliance">license-compliance</a><sup>[53]</sup>
 来检查依赖及其依赖的依赖的合规性。对于 Gradle 项目，可以使用 <a href="https://github.com/jk1/Gradle-License-Report">Gradle-License-Report</a><sup>[54]</sup>
 来检查 Gradle 项目的合规性。</p>
<h4 id="文档即代码doc-as-code">文档即代码(Doc as code)</h4>
<p>对于产品而言，一定要有文档; 产品文档一般被当作使用说明或者遇到问题时的解决方案；对于开源项目来说，最好的文档就是代码化的文档，并且托管在网站上，像 <a href="https://pages.github.com/">GitHub pages</a><sup>[55]</sup>
 和 <a href="https://www.netlify.com/">Netlify</a><sup>[56]</sup>
等。</p>
<p>现在也有很多可以快速构建文档的工具库，如：</p>
<ul>
<li><a href="https://docusaurus.io/">Docusaurus</a><sup>[57]</sup>
</li>
<li><a href="https://astro.build/">Astro</a><sup>[58]</sup>
</li>
<li><a href="https://gohugo.io/">Hugo</a><sup>[59]</sup>
</li>
<li><a href="https://vuepress.vuejs.org/">VuePress</a><sup>[60]</sup>
</li>
</ul>
<p>大多数文档框架都支持自定义，这样开发者可以将产品的介绍页也可以加进去，这样产品介绍和产品文档就在同一个项目和同一个网站中，提升用户体验和开发体验了。</p>
<h2 id="社区">社区</h2>
<p>社区是另一个比较大的话题，我们将在下篇中聊。这里放上《如何组织社区》的思维导图。</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Open-Source/%e7%a4%be%e5%8c%ba%e5%bb%ba%e8%ae%be.6u6659b42mw0.webp" alt="如何组织社区" /></p>
<div class="references">
                <h2>参考</h2>
                <ol><li>BSD 3-Clause: <a href="https://opensource.org/licenses/BSD-3-Clause" rel="noopener noreferrer">https://opensource.org/licenses/BSD-3-Clause</a></li><li>Redis: <a href="https://github.com/redis/redis" rel="noopener noreferrer">https://github.com/redis/redis</a></li><li>Server Side Public License (SSPL): <a href="https://www.mongodb.com/licensing/server-side-public-license" rel="noopener noreferrer">https://www.mongodb.com/licensing/server-side-public-license</a></li><li>MongoDB: <a href="https://github.com/mongodb" rel="noopener noreferrer">https://github.com/mongodb</a></li><li>opensource.org: <a href="https://opensource.org/licenses/category" rel="noopener noreferrer">https://opensource.org/licenses/category</a></li><li>License Selector: <a href="https://ufal.github.io/public-license-selector/" rel="noopener noreferrer">https://ufal.github.io/public-license-selector/</a></li><li>https://www.jenkins.io/: <a href="https://www.jenkins.io/" rel="noopener noreferrer">https://www.jenkins.io/</a></li><li>https://playwright.dev/: <a href="https://playwright.dev/" rel="noopener noreferrer">https://playwright.dev/</a></li><li>https://www.jenkins.io/project/roadmap/: <a href="https://www.jenkins.io/project/roadmap/" rel="noopener noreferrer">https://www.jenkins.io/project/roadmap/</a></li><li>https://github.com/Azure/AKS/projects/1: <a href="https://github.com/Azure/AKS/projects/1" rel="noopener noreferrer">https://github.com/Azure/AKS/projects/1</a></li><li>Linux Kernal: <a href="https://www.kernel.org/" rel="noopener noreferrer">https://www.kernel.org/</a></li><li>Linus Torvalds: <a href="https://en.wikipedia.org/wiki/Linus_Torvalds" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Linus_Torvalds</a></li><li>这里: <a href="https://en.wikipedia.org/wiki/Linux_kernel_version_history#:~:text=Property%20Value%20%20Version%20%20%20%20Original,Kroah-Hartman%20%20%20Named%20Blurry%20Fish%20Butt%20" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Linux_kernel_version_history#:~:text=Property%20Value%20%20Version%20%20%20%20Original,Kroah-Hartman%20%20%20Named%20Blurry%20Fish%20Butt%20</a></li><li>GoLang: <a href="https://github.com/golang/go" rel="noopener noreferrer">https://github.com/golang/go</a></li><li>这里: <a href="https://github.com/kubernetes/kubernetes/milestones" rel="noopener noreferrer">https://github.com/kubernetes/kubernetes/milestones</a></li><li>Semver: <a href="https://semver.org/" rel="noopener noreferrer">https://semver.org/</a></li><li>React: <a href="https://github.com/facebook/react/blob/main/packages/react/package.json" rel="noopener noreferrer">https://github.com/facebook/react/blob/main/packages/react/package.json</a></li><li>Ubuntu Desktop: <a href="https://ubuntu.com/download/desktop" rel="noopener noreferrer">https://ubuntu.com/download/desktop</a></li><li>uterance.es: <a href="https://utteranc.es/" rel="noopener noreferrer">https://utteranc.es/</a></li><li>gitment: <a href="https://github.com/imsun/gitment" rel="noopener noreferrer">https://github.com/imsun/gitment</a></li><li>gitalk: <a href="https://github.com/gitalk/gitalk" rel="noopener noreferrer">https://github.com/gitalk/gitalk</a></li><li>Contributor Convenant: <a href="https://www.contributor-covenant.org/" rel="noopener noreferrer">https://www.contributor-covenant.org/</a></li><li>Microsoft Open Source Code of Conduct: https://github.com/microsoft/playwright/blob/main/CODE_OF_CONDUCT.md: <a href="https://github.com/microsoft/playwright/blob/main/CODE_OF_CONDUCT.md" rel="noopener noreferrer">https://github.com/microsoft/playwright/blob/main/CODE_OF_CONDUCT.md</a></li><li>Thoughtworks Code of Conduct: https://www.thoughtworks.com/content/dam/thoughtworks/documents/guide/tw_guide_code_of_conduct_en_aug_2021.pdf: <a href="https://www.thoughtworks.com/content/dam/thoughtworks/documents/guide/tw_guide_code_of_conduct_en_aug_2021.pdf" rel="noopener noreferrer">https://www.thoughtworks.com/content/dam/thoughtworks/documents/guide/tw_guide_code_of_conduct_en_aug_2021.pdf</a></li><li>Contributing: <a href="https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md" rel="noopener noreferrer">https://github.com/microsoft/playwright/blob/main/CONTRIBUTING.md</a></li><li>Allcontributors: <a href="https://allcontributors.org/" rel="noopener noreferrer">https://allcontributors.org/</a></li><li>SonarQube: <a href="https://www.sonarsource.com/" rel="noopener noreferrer">https://www.sonarsource.com/</a></li><li>Spot Bugs: <a href="https://spotbugs.github.io/" rel="noopener noreferrer">https://spotbugs.github.io/</a></li><li>Find-Sec-Bugs: <a href="https://find-sec-bugs.github.io/" rel="noopener noreferrer">https://find-sec-bugs.github.io/</a></li><li>Bandit: <a href="https://github.com/PyCQA/bandit" rel="noopener noreferrer">https://github.com/PyCQA/bandit</a></li><li>Brakeman: <a href="https://github.com/presidentbeef/brakeman" rel="noopener noreferrer">https://github.com/presidentbeef/brakeman</a></li><li>trufflehog: <a href="https://github.com/trufflesecurity/trufflehog" rel="noopener noreferrer">https://github.com/trufflesecurity/trufflehog</a></li><li>Talisman: <a href="https://github.com/thoughtworks/talisman" rel="noopener noreferrer">https://github.com/thoughtworks/talisman</a></li><li>Fortify: <a href="https://www.microfocus.com/en-us/cyberres/application-security" rel="noopener noreferrer">https://www.microfocus.com/en-us/cyberres/application-security</a></li><li>CheckMarx: <a href="https://checkmarx.com/" rel="noopener noreferrer">https://checkmarx.com/</a></li><li>OWASP® Zed Attack Proxy (ZAP): <a href="https://www.zaproxy.org/" rel="noopener noreferrer">https://www.zaproxy.org/</a></li><li>Arachni: <a href="https://www.arachni-scanner.com/" rel="noopener noreferrer">https://www.arachni-scanner.com/</a></li><li>Acunetix: <a href="https://www.acunetix.com/" rel="noopener noreferrer">https://www.acunetix.com/</a></li><li>Rapid7: <a href="https://www.rapid7.com/" rel="noopener noreferrer">https://www.rapid7.com/</a></li><li>Log4Shell 漏洞问题: <a href="https://en.wikipedia.org/wiki/Log4j#Log4Shell_vulnerability" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Log4j#Log4Shell_vulnerability</a></li><li>Log4j: <a href="https://logging.apache.org/log4j/2.x/" rel="noopener noreferrer">https://logging.apache.org/log4j/2.x/</a></li><li>Mend renovate: <a href="https://www.mend.io/free-developer-tools/renovate/" rel="noopener noreferrer">https://www.mend.io/free-developer-tools/renovate/</a></li><li>npm-autit: <a href="https://docs.npmjs.com/cli/v6/commands/npm-audit" rel="noopener noreferrer">https://docs.npmjs.com/cli/v6/commands/npm-audit</a></li><li>OWASP DependencyCheck: <a href="https://owasp.org/www-project-dependency-check/" rel="noopener noreferrer">https://owasp.org/www-project-dependency-check/</a></li><li>GitHub Dependabot: <a href="https://github.com/dependabot" rel="noopener noreferrer">https://github.com/dependabot</a></li><li>Pipen: <a href="https://realpython.com/pipenv-guide/" rel="noopener noreferrer">https://realpython.com/pipenv-guide/</a></li><li>bundle-audit: <a href="https://github.com/rubysec/bundler-audit" rel="noopener noreferrer">https://github.com/rubysec/bundler-audit</a></li><li>Hawkeye: <a href="https://github.com/hawkeyesec/scanner-cli" rel="noopener noreferrer">https://github.com/hawkeyesec/scanner-cli</a></li><li>Trivy: <a href="https://github.com/aquasecurity/trivy" rel="noopener noreferrer">https://github.com/aquasecurity/trivy</a></li><li>Snyk: <a href="https://snyk.io/" rel="noopener noreferrer">https://snyk.io/</a></li><li>BlackDuck: <a href="https://www.synopsys.com/software-integrity/security-testing/software-composition-analysis.html" rel="noopener noreferrer">https://www.synopsys.com/software-integrity/security-testing/software-composition-analysis.html</a></li><li>opensource.org: <a href="https://opensource.org/licenses" rel="noopener noreferrer">https://opensource.org/licenses</a></li><li>license-compliance: <a href="https://www.npmjs.com/package/license-compliance" rel="noopener noreferrer">https://www.npmjs.com/package/license-compliance</a></li><li>Gradle-License-Report: <a href="https://github.com/jk1/Gradle-License-Report" rel="noopener noreferrer">https://github.com/jk1/Gradle-License-Report</a></li><li>GitHub pages: <a href="https://pages.github.com/" rel="noopener noreferrer">https://pages.github.com/</a></li><li>Netlify: <a href="https://www.netlify.com/" rel="noopener noreferrer">https://www.netlify.com/</a></li><li>Docusaurus: <a href="https://docusaurus.io/" rel="noopener noreferrer">https://docusaurus.io/</a></li><li>Astro: <a href="https://astro.build/" rel="noopener noreferrer">https://astro.build/</a></li><li>Hugo: <a href="https://gohugo.io/" rel="noopener noreferrer">https://gohugo.io/</a></li><li>VuePress: <a href="https://vuepress.vuejs.org/" rel="noopener noreferrer">https://vuepress.vuejs.org/</a></li></ol>
            </div>]]></description></item><item><title>数字证书分类总结</title><link>https://guzhongren.github.io/2023/01/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 08 Jan 2023 20:35:00 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/01/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="数字证书定义">数字证书定义</h2>
<p>数字证书就是互联网通讯中标志通讯各方身份信息的一串数字，数字证书由经国家工信部认证的权威机构——CA 机构发行，是身份认证机构盖在数字身份证上的一个章或印(或者说加在数字身份证上的一个签名)，人们可以在网上用它来识别对方的身份。</p>
<h3 id="作用">作用</h3>
<ul>
<li>信息的保密性</li>
<li>交易者身份的确定性</li>
<li>不可否认性</li>
<li>不可修改性</li>
</ul>
<h2 id="常见标准">常见标准</h2>
<h3 id="符合-pki-itu-t-x509-标准传统标准der-pem-cer-crt">符合 PKI ITU-T X509 标准，传统标准（.DER .PEM .CER .CRT）</h3>
<p>X509 是数字证书的基本规范，而 P7 和 P12 则是两个实现规范，P7 用于数字信封，P12 则是带有私钥的证书实现规范。</p>
<p>基本的证书格式，只包含公钥。
x509 证书由用户公共密钥和用户标识符组成。此外还包括</p>
<ul>
<li>版本号</li>
<li>证书序列号</li>
<li>CA 标识符</li>
<li>签名算法标识</li>
<li>签发者名称</li>
<li>证书有效期等信息。</li>
</ul>
<h3 id="符合-pkcs7-加密消息语法标准p7b-p7c-spc-p7r">符合 PKCS#7 加密消息语法标准(.P7B .P7C .SPC .P7R)</h3>
<p>Public Key Cryptography Standards #7</p>
<p>一般主要用来做数字信封。
一般把证书分成两个文件，一个公钥、一个私钥，有 PEM 和 DER 两种编码方式</p>
<ul>
<li>PEM 比较多见，是纯文本的，一般用于分发公钥，看到的是一串可见的字符串，通常以.crt，.cer，.key 为文件后缀</li>
<li>DER 是二进制编码</li>
</ul>
<h3 id="符合-pkcs10-证书请求标准p10">符合 PKCS#10 证书请求标准(.p10)</h3>
<p>证书请求语法</p>
<h3 id="符合-pkcs12-个人信息交换标准pfx-p12">符合 PKCS#12 个人信息交换标准（.pfx *.p12）</h3>
<p>Public Key Cryptography Standards #12</p>
<p>一种文件<strong>打包格式</strong>，为存储和发布用户和服务器私钥、公钥和证书指定了一个可移植的格式，是一种<strong>二进制</strong>格式，通常以**.pfx<strong>或</strong>.p12**为文件后缀名。
使用 OpenSSL 的 pkcs12 命令可以创建、解析和读取这些文件。
P12 是把证书压成一个文件，<strong>xxx.pfx</strong> 。主要是考虑分发证书，私钥是要绝对保密的，不能随便以文本方式散播。所以 P7 格式不适合分发。.pfx 中可以加密码保护，所以更安全。</p>
<h2 id="covert">Covert</h2>
<p>数字证书格式之间是可以相互转换的，只是需要在特定的转换过程中，使用特定的参数，比如有的转换需要私钥， 有的转换需要密码。</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Security/Degital-Cert.3y4w8ewfimc0.webp" alt="Digital-Cert" /></p>
<h2 id="ssl-证书分类">SSL 证书分类</h2>
<h3 id="dv-ssl-证书域名型">DV SSL 证书（域名型）</h3>
<p>只验证域名所有权，在浏览器中显示锁形标志；</p>
<h4 id="适用">适用</h4>
<ul>
<li>个人网站或者小微企业使用</li>
</ul>
<h4 id="优点">优点</h4>
<ul>
<li>申请容易 - 颁发快 - 价格较低</li>
</ul>
<h4 id="缺点">缺点</h4>
<ul>
<li>证书中无法显示企业信息 - 安全性较差</li>
</ul>
<h3 id="ov-ssl-证书企业型">OV SSL 证书（企业型）</h3>
<p>验证域名所有权以及申请的主体身份的合法性</p>
<h4 id="适用-1">适用</h4>
<p>中小型企业、企事业单位官网使用</p>
<h4 id="优点-1">优点</h4>
<ul>
<li>安全性较高，可点击浏览器小锁标志查看证书信息</li>
</ul>
<h3 id="ev-ssl-证书增强型">EV SSL 证书（增强型）</h3>
<p>Extended Validation（EV）证书是目前高信任级别的 SSL 证书</p>
<h4 id="适用-2">适用</h4>
<ul>
<li>大型商业网站或者是对网站安全有较高要求的公司。可在绿色地址栏显示公司名称</li>
</ul>
<h3 id="优点-2">优点</h3>
<ul>
<li>证书颁发机构对此的审核比较严格</li>
</ul>
<h2 id="根据域名分类">根据域名分类</h2>
<p><img src="https://www.wosign.com/column/images/ssl_20211231_1.png" alt="Domain" /></p>
<h3 id="单域名证书">单域名证书</h3>
<p>这类证书只保护一个域名，这些域名形如www.abc.com；bcd.com；a.store.cn等; 默认是可以保护不带 www 的主域名，但是当你为其他前缀的子域名申请证书时，则只能保护当前子域名，不能保护不带前缀的主域名。</p>
<h3 id="多域名证书">多域名证书</h3>
<p>这种类型的证书可以同时保护多个域名，例如：同时保护www.abc.com、bcd.com；a.store.cn等; 不同品牌的多域名证书默认保护的域名数量不一样。</p>
<h3 id="通配符证书">通配符证书</h3>
<p>通配符证书可以保护一个域名下的同级子域名，并且不限制子域名的数量。例如：这类证书可以保护 free.abc.com，也可以保护 bbs.abc.com，也就是说他可以保护 abc.com 这个域名下的所有同级子域名</p>
<h3 id="代码签名证书code-signing-certificates">代码签名证书（Code Signing Certificates）</h3>
<p>为软件开发者提供代码软件数字签名的认证服务。通过对代码的数字签名可以减少软件下载时弹出的安全警告、保证代码不被恶意篡改、使厂商信息对下载用户公开可见等效果，从而建立良好的软件品牌信誉度。
查看<a href="https://cloud.tencent.com/product/csc">腾讯 CSC</a><sup>[1]</sup>
 一看便知。</p>
<h2 id="ca">CA</h2>
<p>要被别人信任，那么就得有个可靠的证书颁发机构。以下是一些比较著名的证书颁发机构。</p>
<ul>
<li><a href="https://www.digicert.com/">Digicert (收购 #Symantec )</a><sup>[2]</sup>
</li>
<li><a href="https://www.cfca.com.cn/">中国金融认证中心(CFCA)</a><sup>[3]</sup>
</li>
<li><a href="https://www.geotrust.com/">GeoTrust</a><sup>[4]</sup>
</li>
<li>&hellip;</li>
</ul>
<div class="references">
                <h2>参考</h2>
                <ol><li>腾讯 CSC: <a href="https://cloud.tencent.com/product/csc" rel="noopener noreferrer">https://cloud.tencent.com/product/csc</a></li><li>Digicert (收购 #Symantec ): <a href="https://www.digicert.com/" rel="noopener noreferrer">https://www.digicert.com/</a></li><li>中国金融认证中心(CFCA): <a href="https://www.cfca.com.cn/" rel="noopener noreferrer">https://www.cfca.com.cn/</a></li><li>GeoTrust: <a href="https://www.geotrust.com/" rel="noopener noreferrer">https://www.geotrust.com/</a></li></ol>
            </div>]]></description></item><item><title>年终总结-现在，最好的祝福就是不要去打扰</title><link>https://guzhongren.github.io/2023/01/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93-%E7%8E%B0%E5%9C%A8%E6%9C%80%E5%A5%BD%E7%9A%84%E7%A5%9D%E7%A6%8F%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%A6%81%E5%8E%BB%E6%89%93%E6%89%B0/</link><pubDate>Sun, 01 Jan 2023 22:21:54 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/01/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93-%E7%8E%B0%E5%9C%A8%E6%9C%80%E5%A5%BD%E7%9A%84%E7%A5%9D%E7%A6%8F%E5%B0%B1%E6%98%AF%E4%B8%8D%E8%A6%81%E5%8E%BB%E6%89%93%E6%89%B0/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>现代社会每个人都有自己的社交圈子，也有自己的信息茧房。某天突然的一个信息可能会破坏原有的信任关系。比如突然的一个年终总结。</p>
<p>最好的总结，总是自驱的，规律性的，有目的性的。</p>
<h2 id="现象">现象</h2>
<p>相信大家在这段时间，不管是在朋友圈还是微博微信上，抑或是公众号，视频号上都可以看到铺天盖地的年终总结，在我看来，大部分都是在完成自己的&quot;日常打卡&quot;，博取流量或者别人的关注。试问自己，不发这个总结，难道你就对自己过去一年没有底么？</p>
<h2 id="为什么">为什么</h2>
<p>我相信，很多人发年终总结，大都是跟风，炫耀一下自己&quot;曾经来过&quot;，还做了些事，证明自己没有虚度光阴。</p>
<p>而对于真正的年终总结，或者说好的年终总结，大都是持续的，有调理的， 负责人的&hellip;.</p>
<h3 id="持续的">持续的</h3>
<p>持续不断的总结，总会在每时每刻发生，而不是特定的时间，比如一年的最后一天。</p>
<h3 id="有调理的">有调理的</h3>
<p>总结，一定要有&quot;汇报对象&quot;，抑或是你的客户，抑或是你自己。否则，你的总结就是空洞的，没有意义的，浪费自己的精力而已。</p>
<h2 id="改进">改进</h2>
<ul>
<li>
<p>时刻总结，而不是&quot;跟风总结&quot;。平时为自己将要做的事列个Todo, 并为每件事记录所投入的时间，精力，困难和帮助。只有通过量化，并在不断的反思中我们才能成长，总结才有意义。我用的是Logseq,可以记录上面提到的点。</p>
</li>
<li>
<p>定期发布。定期发布会让别人有期待，对你将要发生的事很确定，给大家以&quot;靠谱&quot;的标签，增加自己在别人眼中的影响力。</p>
</li>
<li>
<p>量化。凡事皆可量化，所有的不可直接量化的事物，皆可通过抽象来量化。比如能力，很难直接用数字量化，但是你可以通过抽象，讲每个能力阶段量化为一组有序的数字就可以为别人呈现出直观的效果。比如我的<a href="https://stackblitz.com/edit/frontend-capability-editor?file=index.js">前端能力图谱</a><sup>[1]</sup>
。</p>
</li>
</ul>
<div class="references">
                <h2>参考</h2>
                <ol><li>前端能力图谱: <a href="https://stackblitz.com/edit/frontend-capability-editor?file=index.js" rel="noopener noreferrer">https://stackblitz.com/edit/frontend-capability-editor?file=index.js</a></li></ol>
            </div>]]></description></item><item><title>How to Learn Development</title><link>https://guzhongren.github.io/2022/12/how-to-learn-development/</link><pubDate>Sat, 31 Dec 2022 17:56:21 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/12/how-to-learn-development/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/How-to/How-to-learn-development.svg" referrerpolicy="no-referrer">
            </div><p>本文是近期为学弟学妹们演讲时用 Logseq 整理的大纲,在此记录一下，以备复用。</p>
<h2 id="intro">Intro</h2>
<p><a href="https://guzhongren.github.io/about/">https://guzhongren.github.io/about/</a><sup>[1]</sup>
</p>
<h2 id="know-yourself">Know yourself</h2>
<p>Do you really like computer science???
灵魂三问，你真的喜欢计算机科学吗？如果不喜欢早点放弃，不然你以后的每一刻都会感到无比的痛苦。</p>
<h2 id="trend">Trend</h2>
<p><strong>Trend is the future</strong>
<a href="https://www.devjobsscanner.com/blog/">https://www.devjobsscanner.com/blog/</a><sup>[2]</sup>
</p>
<blockquote>
<p>夫以铜为镜，可以正衣冠；以史为镜，可以知兴替；以人为镜，可以明得失。
《旧唐书·魏徵传》李世民
只有系统行地了解你所关注的内容的方向，你才能找到下一个发展的 G 点，从而成功。</p></blockquote>
<h2 id="roadmap--best-pratice">Roadmap &amp; Best Pratice</h2>
<h3 id="roadmap">Roadmap</h3>
<ul>
<li><a href="https://roadmap.sh">https://roadmap.sh</a><sup>[3]</sup>
</li>
</ul>
<h3 id="best-practice">Best Practice</h3>
<ul>
<li>Article</li>
</ul>
<h4 id="道术法器">道术法器</h4>
<ul>
<li>道：<strong>核心思想、理念、本质规律</strong></li>
<li>术：<strong>行为与技巧</strong></li>
<li>法：<strong>法律、规章、制度、方法</strong></li>
<li>器：<strong>工具</strong></li>
</ul>
<h2 id="frontend">Frontend</h2>
<h3 id="basic">Basic</h3>
<ul>
<li><a href="https://nodejs.org/en/">Node</a><sup>[4]</sup>

<ul>
<li><a href="https://nodejs.org/en/">https://nodejs.org/en/</a><sup>[4]</sup>
</li>
</ul>
</li>
<li>Package management
<ul>
<li><a href="https://www.npmjs.com/">npm</a><sup>[5]</sup>

<ul>
<li><a href="https://www.npmjs.com/">https://www.npmjs.com/</a><sup>[5]</sup>
</li>
</ul>
</li>
<li><a href="https://yarnpkg.com/">yarn</a><sup>[6]</sup>

<ul>
<li><a href="https://yarnpkg.com/">https://yarnpkg.com/</a><sup>[6]</sup>
</li>
</ul>
</li>
<li><a href="https://pnpm.io/">pnpm</a><sup>[7]</sup>

<ul>
<li><a href="https://pnpm.io/">https://pnpm.io/</a><sup>[7]</sup>
</li>
</ul>
</li>
</ul>
</li>
<li>IDE
<ul>
<li><a href="https://code.visualstudio.com/">VSCode</a><sup>[8]</sup>

<ul>
<li><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a><sup>[8]</sup>
</li>
</ul>
</li>
<li><a href="https://www.jetbrains.com/">JetBrains</a><sup>[9]</sup>

<ul>
<li><a href="https://www.jetbrains.com/">https://www.jetbrains.com/</a><sup>[9]</sup>
</li>
</ul>
</li>
</ul>
</li>
<li>Tools
<ul>
<li><a href="https://vitejs.dev/">Vite</a><sup>[10]</sup>

<ul>
<li><a href="https://vitejs.dev/">https://vitejs.dev/</a><sup>[10]</sup>
</li>
</ul>
</li>
<li><a href="https://www.webpackjs.com/">Webpack</a><sup>[11]</sup>

<ul>
<li><a href="https://www.webpackjs.com/">https://www.webpackjs.com/</a><sup>[11]</sup>
</li>
</ul>
</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<h3 id="language">Language</h3>
<ul>
<li>JavaScript/TypeScript</li>
<li>CSS/Less/Sass</li>
<li>HTML</li>
</ul>
<h3 id="framework">Framework</h3>
<ul>
<li><a href="https://reactjs.org/">React</a><sup>[12]</sup>

<ul>
<li><a href="https://reactjs.org/">https://reactjs.org/</a><sup>[12]</sup>
</li>
</ul>
</li>
<li><a href="https://vuejs.org/">Vue</a><sup>[13]</sup>

<ul>
<li><a href="https://vuejs.org/">https://vuejs.org/</a><sup>[13]</sup>
</li>
</ul>
</li>
<li><a href="https://angularjs.org/">Angular</a><sup>[14]</sup>

<ul>
<li><a href="https://angularjs.org/">https://angularjs.org/</a><sup>[14]</sup>
</li>
</ul>
</li>
<li><a href="https://svelte.dev/">Svelte</a><sup>[15]</sup>

<ul>
<li><a href="https://svelte.dev/">https://svelte.dev/</a><sup>[15]</sup>
</li>
</ul>
</li>
<li>&hellip;</li>
</ul>
<h3 id="resources">Resources</h3>
<ul>
<li><a href="https://www.imooc.com/">幕课网</a><sup>[16]</sup>
</li>
<li><a href="https://www.w3school.com.cn/">w3school</a><sup>[17]</sup>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/">MDN</a><sup>[18]</sup>
</li>
</ul>
<h2 id="backend">Backend</h2>
<h3 id="nodejs">Nodejs</h3>
<ul>
<li><a href="https://expressjs.com/">Express</a><sup>[19]</sup>

<ul>
<li><a href="https://expressjs.com/">https://expressjs.com/</a><sup>[19]</sup>
</li>
</ul>
</li>
<li><a href="https://koajs.com/">Koa</a><sup>[20]</sup>

<ul>
<li><a href="https://koajs.com/">https://koajs.com/</a><sup>[20]</sup>
</li>
</ul>
</li>
</ul>
<h3 id="javakotin">Java/Kotin</h3>
<ul>
<li><a href="https://spring.io/">Spring</a><sup>[21]</sup>
</li>
</ul>
<h2 id="gis">GIS</h2>
<h3 id="arcgisesri">ArcGIS[ESRI]</h3>
<ul>
<li><a href="https://developers.arcgis.com/documentation/mapping-apis-and-services/">Dev docs</a><sup>[22]</sup>

<ul>
<li><a href="https://developers.arcgis.com/documentation/mapping-apis-and-services/">https://developers.arcgis.com/documentation/mapping-apis-and-services/</a><sup>[22]</sup>
</li>
</ul>
</li>
<li>ArcGIS Desktop</li>
<li>ArcGIS Server</li>
</ul>
<h3 id="supermap">Supermap</h3>
<h3 id="openlayers"><a href="https://openlayers.org/">OpenLayers</a><sup>[23]</sup>
</h3>
<h3><a href="https://openlayers.org/">https://openlayers.org/</a><sup>[23]</sup>
</h3>
<h3 id="qgis">QGIS</h3>
<h3 id="geoserver">GeoServer</h3>
<h3 id="leaflet"><a href="https://leafletjs.com/">Leaflet</a><sup>[24]</sup>
<a href="https://leafletjs.com/">https://leafletjs.com/</a><sup>[24]</sup>
</h3>
<h3 id="cesiumjs"><a href="https://cesium.com/platform/cesiumjs/">Cesiumjs</a><sup>[25]</sup>
<a href="https://cesium.com/platform/cesiumjs/">https://cesium.com/platform/cesiumjs/</a><sup>[25]</sup>
</h3>
<h2 id="suggestions">Suggestions</h2>
<p>Build common capabilities</p>
<ul>
<li><a href="https://www.docker.com/">Docker</a><sup>[26]</sup>

<ul>
<li><a href="https://www.docker.com/">https://www.docker.com/</a><sup>[26]</sup>
</li>
</ul>
</li>
<li>Command line
<ul>
<li><a href="https://github.com/microsoft/terminal">https://github.com/microsoft/terminal</a><sup>[27]</sup>
</li>
<li>Linux cmd</li>
<li>Mac iterm2 / Warp</li>
</ul>
</li>
<li>Tech stacks
<ul>
<li>CI/CD
<ul>
<li><a href="https://docs.github.com/en/actions">GitHub Actions</a><sup>[28]</sup>

<ul>
<li><a href="https://docs.github.com/en/actions">https://docs.github.com/en/actions</a><sup>[28]</sup>
</li>
</ul>
</li>
<li><a href="https://www.jenkins.io/">Jenkins</a><sup>[29]</sup>

<ul>
<li><a href="https://www.jenkins.io/">https://www.jenkins.io/</a><sup>[29]</sup>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Soft skills
<ul>
<li>Communication</li>
<li>Management</li>
<li>Plan</li>
<li>Show</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<h3 id="build-your-tech-radar">Build your <strong>Tech Radar</strong></h3>
<ul>
<li><a href="https://guzhongren.github.io/about/">https://guzhongren.github.io/about/</a><sup>[1]</sup>
</li>
</ul>
<h3 id="always-summary">Always summary</h3>
<ul>
<li>Build your own blog website</li>
<li>Wechat articles</li>
<li>&hellip;</li>
</ul>
<h3 id="agile">[[Agile]]</h3>
<ul>
<li>[[🌰 Template-Way-of-working]]</li>
<li>Tools
<ul>
<li>Calendar</li>
<li>Trello</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<h3 id="measure--track-anything-with-data">Measure &amp; track anything with data</h3>
<ul>
<li>[[💯 Capability Uplift]]</li>
</ul>
<h3 id="english">English</h3>
<ul>
<li>四级/六级/PTE</li>
</ul>
<h3 id="keep-smile">Keep smile</h3>
<ul>
<li>Stop complaining;</li>
<li>Don&rsquo;t complain;</li>
<li>No complaints.</li>
</ul>
<h2 id="key-points">Key Points</h2>
<ul>
<li>Quality vs Output
<ul>
<li>GitHub&hellip;</li>
</ul>
</li>
<li>[[成事思维]]</li>
</ul>
<h2 id="qa">Q&amp;A</h2>
<div class="references">
                <h2>参考</h2>
                <ol><li>https://guzhongren.github.io/about/: <a href="https://guzhongren.github.io/about/" rel="noopener noreferrer">https://guzhongren.github.io/about/</a></li><li>https://www.devjobsscanner.com/blog/: <a href="https://www.devjobsscanner.com/blog/" rel="noopener noreferrer">https://www.devjobsscanner.com/blog/</a></li><li>https://roadmap.sh: <a href="https://roadmap.sh" rel="noopener noreferrer">https://roadmap.sh</a></li><li>Node: <a href="https://nodejs.org/en/" rel="noopener noreferrer">https://nodejs.org/en/</a></li><li>npm: <a href="https://www.npmjs.com/" rel="noopener noreferrer">https://www.npmjs.com/</a></li><li>yarn: <a href="https://yarnpkg.com/" rel="noopener noreferrer">https://yarnpkg.com/</a></li><li>pnpm: <a href="https://pnpm.io/" rel="noopener noreferrer">https://pnpm.io/</a></li><li>VSCode: <a href="https://code.visualstudio.com/" rel="noopener noreferrer">https://code.visualstudio.com/</a></li><li>JetBrains: <a href="https://www.jetbrains.com/" rel="noopener noreferrer">https://www.jetbrains.com/</a></li><li>Vite: <a href="https://vitejs.dev/" rel="noopener noreferrer">https://vitejs.dev/</a></li><li>Webpack: <a href="https://www.webpackjs.com/" rel="noopener noreferrer">https://www.webpackjs.com/</a></li><li>React: <a href="https://reactjs.org/" rel="noopener noreferrer">https://reactjs.org/</a></li><li>Vue: <a href="https://vuejs.org/" rel="noopener noreferrer">https://vuejs.org/</a></li><li>Angular: <a href="https://angularjs.org/" rel="noopener noreferrer">https://angularjs.org/</a></li><li>Svelte: <a href="https://svelte.dev/" rel="noopener noreferrer">https://svelte.dev/</a></li><li>幕课网: <a href="https://www.imooc.com/" rel="noopener noreferrer">https://www.imooc.com/</a></li><li>w3school: <a href="https://www.w3school.com.cn/" rel="noopener noreferrer">https://www.w3school.com.cn/</a></li><li>MDN: <a href="https://developer.mozilla.org/zh-CN/" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/</a></li><li>Express: <a href="https://expressjs.com/" rel="noopener noreferrer">https://expressjs.com/</a></li><li>Koa: <a href="https://koajs.com/" rel="noopener noreferrer">https://koajs.com/</a></li><li>Spring: <a href="https://spring.io/" rel="noopener noreferrer">https://spring.io/</a></li><li>Dev docs: <a href="https://developers.arcgis.com/documentation/mapping-apis-and-services/" rel="noopener noreferrer">https://developers.arcgis.com/documentation/mapping-apis-and-services/</a></li><li>OpenLayers: <a href="https://openlayers.org/" rel="noopener noreferrer">https://openlayers.org/</a></li><li>Leaflet: <a href="https://leafletjs.com/" rel="noopener noreferrer">https://leafletjs.com/</a></li><li>Cesiumjs: <a href="https://cesium.com/platform/cesiumjs/" rel="noopener noreferrer">https://cesium.com/platform/cesiumjs/</a></li><li>Docker: <a href="https://www.docker.com/" rel="noopener noreferrer">https://www.docker.com/</a></li><li>https://github.com/microsoft/terminal: <a href="https://github.com/microsoft/terminal" rel="noopener noreferrer">https://github.com/microsoft/terminal</a></li><li>GitHub Actions: <a href="https://docs.github.com/en/actions" rel="noopener noreferrer">https://docs.github.com/en/actions</a></li><li>Jenkins: <a href="https://www.jenkins.io/" rel="noopener noreferrer">https://www.jenkins.io/</a></li></ol>
            </div>]]></description></item><item><title>一个好的邮件签名都有哪些内容</title><link>https://guzhongren.github.io/2022/11/%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%9A%84%E9%82%AE%E4%BB%B6%E7%AD%BE%E5%90%8D%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%86%85%E5%AE%B9/</link><pubDate>Tue, 29 Nov 2022 13:54:39 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/11/%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%9A%84%E9%82%AE%E4%BB%B6%E7%AD%BE%E5%90%8D%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%86%85%E5%AE%B9/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Impact/email-signature.z2i8h4g8jq.webp" referrerpolicy="no-referrer">
            </div><p>在工作中，邮件是我们经常要用到的工具；不管是内部还是外部，一个好的邮件签名不仅可以增强公司的品牌影响力，而且也会为你的客户留下&quot;专业&quot;影响，你可能会因此赢得商机，或者获得一份新工作等等。</p>
<p>那么，好的邮件签名应该包含哪些内容呢？</p>
<h2 id="邮件签名">邮件签名</h2>
<h3 id="name">Name</h3>
<p>姓名，不言而喻，别人知道你通常都是先知道你的名字，特别是在工作中。一般情况下，需要将自己的中文和英文姓名写在一起，中间可以中竖线（｜）分割。如，John Kin | 金强。</p>
<h3 id="pronous">Pronous</h3>
<p>称呼，通常在工作邮件中，对方不一定知道你的性别，为避免在中文中把他叫成&quot;她&quot;或者&quot;TA&quot;, 在英文中，把He 写成She 这样的情况，最好将别人对自己的称呼也写在邮件签名中。 中英文称呼之间用逗号（，）隔开；如， He,他。</p>
<h3 id="title">Title</h3>
<p>职位，表明自己当前的角色或者职级。在Thougthworks, 我们根据角色Role 和职级Grand 来定位你的能力Capability。所以一般会有两个词，如Developer|Senior Consultant。如果只有角色的话，只需要写一个词就可以了，如 Project Manager。</p>
<h3 id="email">Email</h3>
<p>邮件地址，尽管邮件收件人或者发件人地址栏会显示我们的邮件地址，但是邮件被打印或者截图，别人时看不到你的邮件地址的。那么最好的方式就是&quot;到处留下自己的联系方式&quot;。</p>
<h3 id="telephone">Telephone</h3>
<p>电话，也是不言而喻，邮件太慢，有急事可以直接电话联系，加速沟通。</p>
<h3 id="logo">Logo</h3>
<p>商标/标志，主要是让别人知道你在用你所代表的集体在和TA沟通；公司Logo，或者社区的Logo 总是最有力的证明。当然，一定要把公司的首页网址作为超链接添加在Logo 上。</p>
<h3 id="email-banner">Email Banner</h3>
<p>邮件横幅，这块最好是一个带有超链接的图片，图片上有公司或者社区的Slogan(口号)。使用邮件横幅，可以很容易让对方知道公司或者社区的使命，价值观等。</p>
<h3 id="note">Note</h3>
<p>备注，这块可根据情况写自定义的内容，如公司地址，社交信息，个人博客网址等。这块也是增加个人影响力的重点区域。</p>
<h2 id="邮件签名生成器">邮件签名生成器</h2>
<p>网上有很多个性化的邮件签名生成器可以使用，也可以自己开发一个前端网页，然后将其部署在公开免费的云平台上，如<a href="https://www.netlify.com/">Netlify</a><sup>[1]</sup>
, <a href="https://www.heroku.com/">Heroku</a><sup>[2]</sup>
, <a href="https://stackblitz.com/">Stackblitz</a><sup>[3]</sup>
, <a href="https://codesandbox.io/">Codesadbox</a><sup>[4]</sup>
上。</p>
<h2 id="总结">总结</h2>
<p>影响力无处不在，打造个人影响力也要全方位进行，邮件签名只是小小的一部分。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Netlify: <a href="https://www.netlify.com/" rel="noopener noreferrer">https://www.netlify.com/</a></li><li>Heroku: <a href="https://www.heroku.com/" rel="noopener noreferrer">https://www.heroku.com/</a></li><li>Stackblitz: <a href="https://stackblitz.com/" rel="noopener noreferrer">https://stackblitz.com/</a></li><li>Codesadbox: <a href="https://codesandbox.io/" rel="noopener noreferrer">https://codesandbox.io/</a></li></ol>
            </div>]]></description></item><item><title>一些做运维工作的小总结</title><link>https://guzhongren.github.io/2022/09/%E4%B8%80%E4%BA%9B%E5%81%9A%E8%BF%90%E7%BB%B4%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%B0%8F%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 30 Sep 2022 21:03:02 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/09/%E4%B8%80%E4%BA%9B%E5%81%9A%E8%BF%90%E7%BB%B4%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%B0%8F%E6%80%BB%E7%BB%93/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="简介">简介</h2>
<p>最近上了一个Ops 的项目，此Ops 非彼Ops。
一般的Ops 都是直接在生产环境进行做一些维护升级等，而我们的Ops工作是一个类似客服的角色。需要在开发上线之后解决所有生产环境的问题，并且为客户方解决他们日常管理中的各种问题，还有为客户产品的使用者解决线上生产问题或着寻找他们提出的各种问题的原因。</p>
<p>由于项目非常大，有多达20+的微服务，还有各种用户设备；而我们团队在这方面没有什么经验，而且Onboarding 基本都没有，大多时候都需要猜。</p>
<h2 id="onboarding">Onboarding</h2>
<p>没有Onboarding，那我们就创造 Onboarding。</p>
<p>项目很大，同事给的Onboarding 很短，只是一些链接。在已有知识的基础上，利用Logseq 整理了Onboarding 文档，为未来加入项目的同事提供更好的Onboardign流程。</p>
<p>利用在之前项目上的总结，形成了这个项目上的Oboarding 流程。包含项目背景，期望，词汇目录，组织架构，工具集，Leave Plan, Ops Flow, 工作模板等。</p>
<h2 id="流程化">流程化</h2>
<p>有时候Ops 的工作其实很流程化，比如每周或者每天都要给特定的人发送Report, 那我们就可以将经常用的SQL，邮件模板等存起来，到时候一运行直接发送即可。</p>
<p>还有，比如收到了线上的 Issue, 可以利用 Logseq 的模板功能，直接生成处理流程目录，这样就省了很多时间去思考应该考虑哪些方面或者需要有什么样的输出。</p>
<h2 id="记录">记录</h2>
<p>凡事都要记着。好记性不如烂笔头。</p>
<p>俗话说的真好，在Ops 工作流程中，也是一样。因为很多东西不是一天两天就能搞定，对于时间长的工作来说，如果有个记录那么就能很快想起以前干过什么，之后要干什么了。有时候需要一些截图，可以直接放在笔记工具中，这样也可以很快找到所谓的证据。证据在Ops工作中可是非常重要的东西。</p>
<p>在自己的笔记工具中记录是一方面，另一方面，我们需要让客户知道我们每天的进度，那么我们也需要将我们的进度通过不同的方式共享给他们，作为文字，当然是首选方式。</p>
<h2 id="总结">总结</h2>
<p>多经历一些项目吧，你认为的只是你认为的。
新加坡人挺卷的，是的，挺卷的。
项目也挺卷的，今天还有人找我想让我去做新加坡某项目的前端&hellip;&hellip;</p>
]]></description></item><item><title>Some Good Practices of Logging</title><link>https://guzhongren.github.io/2022/08/some-good-practices-of-logging/</link><pubDate>Fri, 05 Aug 2022 09:33:24 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/08/some-good-practices-of-logging/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Software-Engineering/Observability/Logging/logging.25uhyh14zi2o.webp" referrerpolicy="no-referrer">
            </div><h2 id="introduction">Introduction</h2>
<p>Logging is structured or unstructured text information generated by the system during operation. Usually, it can be regarded as a record of an event by the application. Logging can often help us discover unexpected behaviors in systems, especially in some microservice architecture systems. As an important part of Observability, Logging plays an irreplaceable role in our system development and maintenance.</p>
<img src='https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Software-Engineering/Observability/01.Pillars-of-Observability.drawio.5ewrap798t40.webp' alt='Pillars of Observability' style="clear: both; display: block; margin: auto;" />
<h2 id="the-importance-of-logging">The importance of logging</h2>
<p>To understand why logging plays an important role in products or systems, we must understand its value. Currently, the most widely used logging forms are <strong>alerting</strong>, <strong>troubleshooting</strong>, and <strong>business data visualization</strong>.</p>
<h3 id="alerting">Alerting</h3>
<p>Logging can be used as an important data source for our business system monitoring; mature product systems have alarm systems. If there is a problem exceeding a certain defined indicator in the system, the log system will automatically send the alarm information to the notification platform. The On-call people can locate and solve the problem according to the alarm information.</p>
<h3 id="troubleshooting">Troubleshooting</h3>
<p>Imagine that the system you are responsible for developing and maintaining is found to be faulty. What is the first thing you should do? Check the system information to verify that it’s true. The log printed on the server  is the best auxiliary information. As programmers, logs are the most familiar tool for solving problems.</p>
<h3 id="business-data-visualization">Business Data Visualization</h3>
<p>Many companies can use the logs of the production environment stored in their own databases to visualize business data in combination with the corresponding tools such as <strong>Grafana</strong> and <strong>SumoLogic</strong>.</p>
<h2 id="logging-how-to">Logging how-to</h2>
<h3 id="templating">Templating</h3>
<p>It’s necessary to sort out our log format and write logs according to certain specifications.
<img src='https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Software-Engineering/Observability/Logging/logging.25uhyh14zi2o.webp' alt='Logging Format' style="clear: both; display: block; margin: auto;" /></p>
<ul>
<li>
<p>Basic template</p>
<ul>
<li>At minimum, qualified logs should have the following information: time, log level, and log information.</li>
</ul>
</li>
<li>
<p>Advanced Template
Add thread name, hostname, method name, class name, and the number of lines corresponding to the method;</p>
<ul>
<li>Thread Name: Most applications don’t have a single user. For a single-instance service, many users accessing the same interface will execute the application in different threads. So using the thread name is best to differentiate the business process of corresponding users.</li>
<li>Hostname: Most current applications are deployed in the cloud with multiple instances, so on the basis of a single node, the logging needs to be distinguished at the instance level on multiple instances, and the hostname is the best way to differentiate.</li>
<li>Method Name: A convenient way to differentiate the source within the same log.</li>
<li>Class Name:  A convenient way to quickly locate the business process.</li>
<li>Number of lines: A quick way to find the specific location of the log.</li>
</ul>
</li>
</ul>
<h3 id="formatting">Formatting</h3>
<p>To improve the readability of the log, we can focus on formatting.</p>
<ul>
<li>Put <strong>square brackets</strong> around the log level, host name, and thread name;</li>
<li>Add <strong>parentheses</strong> to the class name and line number where the method name is located, and separate the class name and line number with a colon;</li>
<li>Add a <strong>horizontal line</strong> between the line number and log information;
Specific formatting is also possible for log information:</li>
<li>For regular requests, response or other business logs, you can separate custom information and parameters with an <strong>underscore</strong>; multiple parameters are separated by <strong>commas</strong>;</li>
<li>For error message formatting, you can use <strong>Key:Value</strong>.</li>
</ul>
<h3 id="chain-tracking">Chain-Tracking</h3>
<p>If the recorded log is just a simple text description line by line, it’ll be hard to read. In a complex system or a system with frequent business operations, there will be multiple logs and we’ll have to spend time filtering out the relevant logs. The best way to solve this problem is through chain tracking of logs: putting one or more unique IDs in the business system that are added to each log, so that when locating business problems, we can quickly filter out the relevant logs through these unique IDs and Other criteria (e.g. time).</p>
<h3 id="logging-on-demand">Logging on demand</h3>
<h4 id="log-level">Log level</h4>
<img src='https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Software-Engineering/Observability/Logging/Log-level.1p6czhkrcnr4.webp' alt='Log Level' style="clear: both; display: block; margin: auto;" />
<p>The output of the log is divided into levels.Different scenarios need to print different levels of logs.</p>
<ul>
<li>Debug: Record technical details and logs to help understand the system operation;</li>
<li>Info: Record business information;</li>
<li>Warn: Acceptable error messages that are manageable and not urgent;</li>
<li>Error: Unexpected errors or system behavior, usually caused by system bugs or environmental problems.</li>
</ul>
<p>At the same time, not all logs need to be recorded, we need to record as needed. The following table shows which logs should be recorded depending on the environment.</p>
<table>
  <thead>
      <tr>
          <th>Environment</th>
          <th>Log Leave</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Dev</td>
          <td>Debug</td>
      </tr>
      <tr>
          <td>Test</td>
          <td>Debug</td>
      </tr>
      <tr>
          <td>UAT</td>
          <td>Info</td>
      </tr>
      <tr>
          <td>Prod</td>
          <td>Info</td>
      </tr>
  </tbody>
</table>
<h4 id="logging-position">Logging position</h4>
<p>The location of the log print also needs to be made clear.</p>
<ul>
<li>When other systems call their own systems, they need to print the log once each when they receive a request and when the request is completed;</li>
<li>The log is printed once before the self-hosted system calls the interface of the third-party system and after receiving the response;</li>
<li>The log needs to be printed in any abnormal place in the system.</li>
</ul>
<h2 id="tool-recommendation">Tool recommendation</h2>
<p>Different programming languages have different logging tools; the most famous is Apache&rsquo;s <a href="https://logging.apache.org/log4j">Log4j</a><sup>[1]</sup>
, which is highly configurable and can be configured via external files at runtime. It is based on logging priority and provides mechanisms to instruct logging information to many destinations such as database, file, console, UNIX system log, etc.; log4j has been ported to other programming languages, such as <a href="https://docs.python.org/3/library/logging.html">logging</a><sup>[2]</sup>
 in Python, <a href="https://www.npmjs.com/package/log4js">log4js</a><sup>[3]</sup>
 in NodeJS, <a href="https://crates.io/crates/log4rs">log4rs</a><sup>[4]</sup>
 in Rust.</p>
<h2 id="tips">Tips</h2>
<p>Avoid printing or recording any sensitive information, including but not limited to various <strong>PII</strong>, <strong>PCI</strong> information. Remember to obey local laws and regulations, such as China&rsquo;s <strong>PILI</strong> (Personal Information Protection Law) or Europe’s <strong>GDPR</strong> (General Data Protection Regulation). Choose the appropriate log level and log position as needed.
……</p>
<h2 id="summary">Summary</h2>
<p>A good log can not only facilitate program development and provide the most important auxiliary information for troubleshooting, it also gives optimization suggestions or data statistics for business or infrastructure.</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Log4j: <a href="https://logging.apache.org/log4j" rel="noopener noreferrer">https://logging.apache.org/log4j</a></li><li>logging: <a href="https://docs.python.org/3/library/logging.html" rel="noopener noreferrer">https://docs.python.org/3/library/logging.html</a></li><li>log4js: <a href="https://www.npmjs.com/package/log4js" rel="noopener noreferrer">https://www.npmjs.com/package/log4js</a></li><li>log4rs: <a href="https://crates.io/crates/log4rs" rel="noopener noreferrer">https://crates.io/crates/log4rs</a></li></ol>
            </div>]]></description></item><item><title>定制你的DrawIO样式</title><link>https://guzhongren.github.io/2022/07/%E5%AE%9A%E5%88%B6%E4%BD%A0%E7%9A%84drawio%E6%A0%B7%E5%BC%8F/</link><pubDate>Wed, 27 Jul 2022 15:29:45 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/07/%E5%AE%9A%E5%88%B6%E4%BD%A0%E7%9A%84drawio%E6%A0%B7%E5%BC%8F/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/DrawIO/preset.58se8wl6ltg0.webp" referrerpolicy="no-referrer">
            </div><h2 id="why">Why</h2>
<p>有时候我们用 DrawIO <a href="https://app.diagrams.net/">在线版</a><sup>[1]</sup>
或者 VSCode 插件画图的时候，需要使用自己公司的配色和字体要求来做图；如果一个一个图形的选择，然后输入对应的样式值，这样很浪费时间；作为高效能人士，肯定需要将其形成模板存起来，使用的时候自动读取即可。所谓“一劳永逸”。</p>
<p>最近，写了一片博客，需要将博客里的图用公司的规范来做画，那么就得定制属于我们自己公司规范的样式。</p>
<h2 id="what">What</h2>
<p>在研究了<a href="https://app.diagrams.net/">https://app.diagrams.net/</a><sup>[1]</sup>
 的配置说明后，发现其实定制很容易。只需要在配置中覆盖原有的样式即可。</p>
<p>而对于VS Code 的插件，拿<a href="https://marketplace.visualstudio.com/items?itemName=eightHundreds.vscode-drawio">vscode-drawio</a><sup>[2]</sup>
来说，只要在配置中键入自己的配置即可。</p>
<p>当然开始之前需要有自己的规范，如配色或字体等。</p>
<h2 id="how">How</h2>
<h3 id="web-版">Web 版</h3>
<h4 id="配置位置">配置位置</h4>
<ul>
<li>应用-其他-配置</li>
</ul>
<h4 id="配置信息">配置信息</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-json">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;customFonts&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Noto Serif SC&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Bitter&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Arial&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Inter&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;presetColors&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;none&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;000000&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;ffffff&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;666666&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;edf1f3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;003d4f&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;f2617a&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;cc850a&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;6b9e78&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;47a1ad&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;634f7d&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;customColorSchemes&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#ffffff&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#ffffff&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#003d4f&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#003d4f&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#f2617a&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#f2617a&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#cc850a&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#cc850a&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#6b9e78&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#6b9e78&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#47a1ad&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#47a1ad&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#634f7d&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#634f7d&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#000000&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#000000&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h4 id="效果">效果</h4>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/DrawIO/web-style.2z3v7akawpe0.webp" alt="web-style" /></p>
<h3 id="vs-code--插件版vscode-drawio">VS Code  插件版（vscode-drawio）</h3>
<h4 id="配置信息-1">配置信息</h4>
<p>对于插件版本，我们可以将配置信息存储在全局（VS Code菜单-Code-Performances-Setting, 搜索 drawio, 点击任意<code>Edit in settings.json</code>）或者当前工程（.vscode/settings.json）,然后将如下配置粘贴进去。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-json">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;hediet.vscode-drawio.presetColors&#34;</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;none&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;000000&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;ffffff&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;666666&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;edf1f3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;003d4f&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;f2617a&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;cc850a&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;6b9e78&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;47a1ad&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;634f7d&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span><span class="err">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;hediet.vscode-drawio.colorNames&#34;</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;000000&#34;</span><span class="p">:</span> <span class="s2">&#34;Onyx black&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;ffffff&#34;</span><span class="p">:</span> <span class="s2">&#34;Talc white&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;666666&#34;</span><span class="p">:</span> <span class="s2">&#34;文字和背景3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;edf1f3&#34;</span><span class="p">:</span> <span class="s2">&#34;Mist grey&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;003d4f&#34;</span><span class="p">:</span> <span class="s2">&#34;Wave blue&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;f2617a&#34;</span><span class="p">:</span> <span class="s2">&#34;Flamingo pink&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;cc850a&#34;</span><span class="p">:</span> <span class="s2">&#34;Turmeric yellow&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;6b9e78&#34;</span><span class="p">:</span> <span class="s2">&#34;Jade green&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;47a1ad&#34;</span><span class="p">:</span> <span class="s2">&#34;Sapphire blue&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;634f7d&#34;</span><span class="p">:</span> <span class="s2">&#34;Amethyst purple&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span><span class="err">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;hediet.vscode-drawio.customColorSchemes&#34;</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span> <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#ffffff&#34;</span><span class="p">,</span> <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#ffffff&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span> <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#003d4f&#34;</span><span class="p">,</span> <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#003d4f&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span> <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#f2617a&#34;</span><span class="p">,</span> <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#f2617a&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span> <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#cc850a&#34;</span><span class="p">,</span> <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#cc850a&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span> <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#6b9e78&#34;</span><span class="p">,</span> <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#6b9e78&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span> <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#47a1ad&#34;</span><span class="p">,</span> <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#47a1ad&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span> <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#634f7d&#34;</span><span class="p">,</span> <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#634f7d&#34;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span> <span class="nt">&#34;fill&#34;</span><span class="p">:</span> <span class="s2">&#34;#000000&#34;</span><span class="p">,</span> <span class="nt">&#34;stroke&#34;</span><span class="p">:</span> <span class="s2">&#34;#000000&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span><span class="err">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;hediet.vscode-drawio.customFonts&#34;</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Noto Serif SC&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Bitter&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Arial&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Inter&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span><span class="err">,</span></span></span></code></pre></div></div>
<h4 id="效果-1">效果</h4>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/DrawIO/preset.58se8wl6ltg0.webp" alt="preset" /></p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/DrawIO/font.69qxu1ldebg0.webp" alt="font" /></p>
<div class="references">
                <h2>参考</h2>
                <ol><li>在线版: <a href="https://app.diagrams.net/" rel="noopener noreferrer">https://app.diagrams.net/</a></li><li>vscode-drawio: <a href="https://marketplace.visualstudio.com/items?itemName=eightHundreds.vscode-drawio" rel="noopener noreferrer">https://marketplace.visualstudio.com/items?itemName=eightHundreds.vscode-drawio</a></li></ol>
            </div>]]></description></item><item><title>日志记录的最佳实践</title><link>https://guzhongren.github.io/2022/07/%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Sun, 10 Jul 2022 12:01:50 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/07/%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Software-Engineering/Observability/Logging/logging.25uhyh14zi2o.webp" referrerpolicy="no-referrer">
            </div><h2 id="简介">简介</h2>
<p>日志（Log）是由系统在运行过程中产生的结构化或者非结构化的文字信息。通常情况，可以将其视为应用程序对某个事件（Event）的记录。日志通常可以帮助我们发现一些微服务架构系统的非预期或突发的行为。
Logging作为 Observability的重要组成部分，在我们的系统开发、维护中起到无法替代的作用。</p>
<img src='https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Software-Engineering/Observability/01.Pillars-of-Observability.drawio.5ewrap798t40.webp' alt='Pillars of Observability' style="clear: both; display: block; margin: auto;" />
<h2 id="日志的重要性">日志的重要性</h2>
<p>要理解为什么日志在产品或者系统中扮演着重要的角色，我们必须了解它的价值。至少到现在，日志被应用最广泛的是<strong>报警</strong>、<strong>故障排除</strong>和<strong>业务数据可视化</strong>。</p>
<h3 id="报警">报警</h3>
<p>日志可以作为我们业务系统监控的重要数据来源；成熟的产品系统都有报警系统，如果系统中出现超过某个已定义的某个指标的问题，日志系统会自动将报警信息发送到通知平台，On-call 的人就可以根据报警信息定位解决问题了。
<img src='https://grafana.com/static/img/logs/logs-prometheus-alterting.svg' alt='Alert with logs' style="clear: both; display: block; margin: auto;" /></p>
<h3 id="故障排除">故障排除</h3>
<p>这种情况非常普遍；想象一下你最近负责开发维护的系统被他人发现有问题，在你梳理完思路之后第一件事是干什么？ 肯定是查看系统信息验证自己的假设是否成立， 这里打印在服务器上的日志就是最好的辅助信息。而作为程序员的我们，日志是我们最熟悉不过的解决问题的利器。
<img src='https://grafana.com/static/img/logs/logs-effective-debugging.gif' alt='Debug with logs' style="clear: both; display: block; margin: auto;" /></p>
<h3 id="业务数据可视化">业务数据可视化</h3>
<p>很多公司可以利用存储在自己数据库里的生产环境的日志，结合相应的工具可以对业务进行业务数据可视化。这里最典型的代表是 Grafana 和 SumoLogic。
<img src='https://images.contentful.com/aw6mkmszlj4x/4aSWLe82Z68yjdprQJHnLu/436403e98a0f28af4f38a6da948a84bc/fitbithealthmonitor.png' alt='Grafana - Fitbit Health MonitorDebug with logs' style="clear: both; display: block; margin: auto;"/></p>
<img src='https://help.sumologic.com/img/integrations/saas-cloud/Slack_Audit_Overview.png' alt='SumoLogic - Slack File And App Audit' style="clear: both; display: block; margin: auto;" />
<h2 id="怎么做">怎么做</h2>
<h3 id="模版化">模版化</h3>
<p>为了更好的支持上面的各种情况，我们需要对我们的日志格式进行梳理，按照一定的规范来写日志，而不是随便写一句废话。
<img src='https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Software-Engineering/Observability/Logging/logging.25uhyh14zi2o.webp' alt='Logging Format' style="clear: both; display: block; margin: auto;" /></p>
<ul>
<li>基础版本
<ul>
<li>对于日志，<strong>时间</strong>，<strong>日志级别</strong>，和<strong>日志信息</strong>最为重要，所以一个合格的日志应该至少包含这些信息。</li>
</ul>
</li>
<li>高级版本
<ul>
<li>在基础版的基础上，加入线程名，方法名，类名，方法对应的行数；</li>
<li><strong>线程名</strong>： 多数应用的用户都不是单一的，对于单实例的服务对同一个接口很多用户访问应用会将在不同的线程中执行，这时如果要区分对应用户的业务流程，那么通过线程名是最好的。</li>
<li><strong>主机名</strong>：现在的应用大都部署在 Cloud 中都是多实例的，所以在单节点的基础上，日志在多实例上就需要实例级别的区分，而主机名是最好的区分方式。</li>
<li><strong>方法名</strong>： 打印了日志的方法名，方便区分相同日志的出处。</li>
<li><strong>类名</strong>： 打印了日志的类名，方便快速定位业务流程。</li>
<li><strong>行数</strong>：打印了日志的行数，方便快速定位日志的具体位置。</li>
</ul>
</li>
</ul>
<h3 id="格式化">格式化</h3>
<p>为了提高日志的可读性，我们可以对日志进行修饰。</p>
<ul>
<li>对日志级别、主机名和线程名前后加<strong>中括号</strong>；</li>
<li>对方法名所在的类名和行号加括号，并在类名与行号中间用<strong>冒号</strong>隔开；</li>
<li>在行号和日志信息中间加入一个<strong>横线</strong>来分割；</li>
<li>对于日志信息也可以进行特定的格式化
<ul>
<li>对于常规的请求（Request）、响应（Response）或者其他业务日志，可以在自定义信息和参数之间用<strong>下划线</strong>分割；多个参数之间用<strong>逗号</strong>分隔，当然参数也是可选的；</li>
<li>对于错误信息格式化，也可以按照 <strong>Key：Value</strong> 的形式进行组织。</li>
</ul>
</li>
</ul>
<h3 id="链式追踪">链式追踪</h3>
<p>记录下了日志，如果只是一行行简单的文字说明，那是没有太大意义的。在复杂系统或业务操作频繁的系统中，会产生非常多的日志，在这种情况下，我们就得花时间去过滤出相关的日志。
解决上面问题的最好办法是日志的<strong>链式追踪</strong>；简单说就是，在每条日志中加入业务系统中的一个或者多个<strong>唯一</strong>的 ID，这样在定位业务问题的时候可以通过这些唯一的 ID 和 其他条件（e.g. 时间）快速过滤出相关的日志。</p>
<h3 id="按需记录日志">按需记录日志</h3>
<h4 id="日志级别">日志级别</h4>
<img src='https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Software-Engineering/Observability/Logging/Log-level.1p6czhkrcnr4.webp' alt='Log Level' style="clear: both; display: block; margin: auto;" />
<p>日志的输出都是分级别的，不同的场景需要打印不同级别的日志；以下是几个比较重要的日志级别。</p>
<ul>
<li><strong>Debug</strong>: 记录技术细节，和一些帮助理解系统运行的日志;</li>
<li><strong>Info</strong>: 记录业务信息的日志;</li>
<li><strong>Warn</strong>: 非紧急且可控的可接受的错误信息;</li>
<li><strong>Error</strong>: 非期望的错误或者系统表现，通常是由系统bug或者环境问题导致。</li>
</ul>
<p>同时不是所有的日志都需要记录，我们要做到按需记录。下表是推荐在不同的环境选择不同的日志级别。</p>
<table>
  <thead>
      <tr>
          <th>Environment</th>
          <th>Log Leave</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Dev</td>
          <td>Debug</td>
      </tr>
      <tr>
          <td>Test</td>
          <td>Debug</td>
      </tr>
      <tr>
          <td>UAT</td>
          <td>Info</td>
      </tr>
      <tr>
          <td>Prod</td>
          <td>Info</td>
      </tr>
  </tbody>
</table>
<h4 id="日志位置">日志位置</h4>
<p>有了日志级别，日志打印的位置也需要明确。一般情况下：</p>
<ul>
<li>其他系统调用自有系统时需要在收到请求和完成请求时各打印一次日志；</li>
<li>自有系统调用第三方系统的接口前和收到返回信息后各打印一次日志；</li>
<li>在系统任何有异常的地方需要打印日志；</li>
</ul>
<p>还有一种特殊情况是，像消息传递之类的系统，为了节省日志存储和减少查看干扰，大多时候我们不需要在收到消息后直接打印该消息，一般建议在收到消息后，如果系统处理有异常，在异常中将原始消息打印。</p>
<h2 id="工具推荐">工具推荐</h2>
<p>不同的编程语言有不同的日志工具；比较著名的是 Apache 的 <a href="https://logging.apache.org/log4j">Log4j</a><sup>[1]</sup>
, Log4j是高度可配置的，并可通过在运行时的外部文件配置。它根据记录的优先级别，并提供机制以指示记录信息到许多的目的地，诸如：数据库，文件，控制台，UNIX系统日志等；而且 log4j 已经被移植到了其他编程语言中了，如 Python 中的 <a href="https://docs.python.org/3/library/logging.html">logging</a><sup>[2]</sup>
, NodeJS 中的<a href="https://www.npmjs.com/package/log4js">log4js</a><sup>[3]</sup>
, Rust 中的<a href="https://crates.io/crates/log4rs">log4rs</a><sup>[4]</sup>
。</p>
<h2 id="注意点">注意点</h2>
<ul>
<li>避免打印或记录任何敏感信息，包括但不限于各种PII，PCI信息，一定要记得遵守当地的各种法律法规，如中国的《个人信息保护法》（PILI）, 欧洲的一般数据保护条例GDPR等</li>
<li>按需选择合适的日志级别和日志位置</li>
<li>&hellip;&hellip;</li>
</ul>
<h2 id="总结">总结</h2>
<p>好的日志不仅可以为程序开发提供便利，为故障排除提供最重要的辅助信息，更可以为业务或基础设施提供优化建议或数据统计。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Log4j: <a href="https://logging.apache.org/log4j" rel="noopener noreferrer">https://logging.apache.org/log4j</a></li><li>logging: <a href="https://docs.python.org/3/library/logging.html" rel="noopener noreferrer">https://docs.python.org/3/library/logging.html</a></li><li>log4js: <a href="https://www.npmjs.com/package/log4js" rel="noopener noreferrer">https://www.npmjs.com/package/log4js</a></li><li>log4rs: <a href="https://crates.io/crates/log4rs" rel="noopener noreferrer">https://crates.io/crates/log4rs</a></li></ol>
            </div>]]></description></item><item><title>代码质量和Dora Metrics， 哪个更重要？</title><link>https://guzhongren.github.io/2022/06/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E5%92%8Cdora-metrics-%E5%93%AA%E4%B8%AA%E6%9B%B4%E9%87%8D%E8%A6%81/</link><pubDate>Thu, 23 Jun 2022 20:14:48 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/06/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E5%92%8Cdora-metrics-%E5%93%AA%E4%B8%AA%E6%9B%B4%E9%87%8D%E8%A6%81/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1516321318423-f06f85e504b3?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1470&amp;q=80" referrerpolicy="no-referrer">
            </div><blockquote>
<p>勿以恶小而为之，勿以善小而不为 &ndash;《三国志·蜀志传》</p></blockquote>
<h2 id="起因">起因</h2>
<p>最近在项目上搞代码质量方面的工作，发现项目代码运行测试后不能生成测试报告，导致 SonarQube 上没有关于测试覆盖率的Metric, 而且Pipeline 还可以正确运行，并没有因为不满足 SonarQube 的 Quality Gate 而 break Pipeline 的运行。</p>
<p>不能生成测试报告这个问题简单，只是因为运行测试的容器的用户对特定的目录没有权限，这个很好解决。</p>
<p>但是对于SonarQube 不能 break Pipeline 这点组内有不同的意见。有些人交付更重要，有些人认为代码质量在这里更为重要。</p>
<h2 id="分析">分析</h2>
<p>所有的问题都是解决“人”的问题。</p>
<p>代码质量， 英语 Code Quality, 衡量代码测试覆盖率，Code Smells， Bug 数量，安全问题（Security HotSpot）等。 代码质量在软件开发过程中都是重中之重。</p>
<p><a href="https://devops.com/dora-and-google-cloud-to-collaborate-on-devops-research/">Dora Metrics</a><sup>[1]</sup>
, 又称 <code>4 Key Metrics</code> 是一套衡量软件交付效能的指标，有</p>
<ul>
<li>部署频率（Deployment frequency）</li>
<li>前置时间（Lead time for change）</li>
<li>变更失败率（Change failure rate）</li>
<li>故障回复时间（Time to restore services）</li>
</ul>
<p>在我们这个场景下，大家关心的是<code>变更失败率</code> 和 <code>代码质量</code> 哪个更重要。</p>
<h3 id="如果更关心变更失败率">如果更关心变更失败率</h3>
<p>如果更关心变更失败率，而放弃了代码质量，那么面临的问题将会是由“人”导致的各种问题; 如大家提交了低质量的代码，因为没有质量门禁来拦截，开发者大多情况下因为自己的懒惰或者逃避责任而选择忽略已存在的各种不符合高质量的代码。长此以往，代码质量问题积累会越来越多，项目将难以维护，CI/CD 的失败变更率必然会随之提高。</p>
<h3 id="如果更关心代码质量">如果更关心代码质量</h3>
<p>如果更关心代码质量，那么面临的问题会变成，提交了代码之后可能会被 SonarQube 检测出来一些不符合某些门禁指标的issues，然后由于不满足预定的指标而将 Pipeline 阻断，造成<code>变更失败率</code>指标的升高。</p>
<h2 id="哪个更重要呢">哪个更重要呢？</h2>
<p>很多时候大家都会拿出那句名言 &ldquo;视场景而定&rdquo;。
但对于软件工程，我们追求的应该是稳定，要对自己的产品要有信心。对开发者而言，信心来自经过测试、符合规范的代码。
上线固然重要，但不能降低质量。就像在 Simple Design 中的&quot;通过测试&quot;，通过测试要成为你的信仰，不可动摇。 在完全自动化的自动部署（CD）项目中，如果你的代码质量有问题（会导致生产环境 P1 的事故），经过了质量门禁的检测，发现了问题，但没有及时将流水线打断，那么因为没有及时阻止带来的损失肯定远比你为 Pipeline 失败修复付出的资金和时间要大。</p>
<p>所以，个人认为，在正常的软件交付过程中，代码质量更为重要, 代码质量应该也必须是我们开发者的信仰。 应该通过一定的检测技术来阻止有问题的代码部署到生产环境，就像<code>测试左移(Shift-left Testing)</code>。这样，我们可以确保我们的代码没有任何问题，避免了代码层面的可能引起的生产问题。</p>
<blockquote>
<p>勿以恶小而为之，勿以善小而不为 &ndash;《三国志·蜀志传》</p></blockquote>
<div class="references">
                <h2>参考</h2>
                <ol><li>Dora Metrics: <a href="https://devops.com/dora-and-google-cloud-to-collaborate-on-devops-research/" rel="noopener noreferrer">https://devops.com/dora-and-google-cloud-to-collaborate-on-devops-research/</a></li></ol>
            </div>]]></description></item><item><title>真的需要在测试中打log么？</title><link>https://guzhongren.github.io/2022/06/%E7%9C%9F%E7%9A%84%E9%9C%80%E8%A6%81%E5%9C%A8%E6%B5%8B%E8%AF%95%E4%B8%AD%E6%89%93log%E4%B9%88/</link><pubDate>Sat, 11 Jun 2022 20:03:35 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/06/%E7%9C%9F%E7%9A%84%E9%9C%80%E8%A6%81%E5%9C%A8%E6%B5%8B%E8%AF%95%E4%B8%AD%E6%89%93log%E4%B9%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1654885506947-fe5280d8e0ea?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1470&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="引言">引言</h2>
<blockquote>
<p>&ldquo;调试程序是程序员最大的耻辱&rdquo; &ndash; CTO</p></blockquote>
<h2 id="写了-log-并且出错的程序">写了 log 并且出错的程序</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;multiple&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be send when invoke the method sendMessage&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;top&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">value</span><span class="o">:</span> <span class="nb">window</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;postMessage&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">value</span><span class="o">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">top</span><span class="o">?</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sendMessage</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">top</span><span class="o">?</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">).</span><span class="nx">toBeCalledTimes</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<p>运行输出</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">mockConstructor</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">_isMockFunction</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getMockImplementation</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mock</span><span class="o">:</span> <span class="p">[</span><span class="nx">Getter</span><span class="o">/</span><span class="nx">Setter</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockClear</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReset</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRestore</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockResolvedValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRejectedValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockResolvedValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRejectedValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockImplementationOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockImplementation</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnThis</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockName</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getMockName</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">__test__</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">ts</span><span class="o">:</span><span class="mi">16</span><span class="o">:</span><span class="mi">13</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">mockConstructor</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">_isMockFunction</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getMockImplementation</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mock</span><span class="o">:</span> <span class="p">[</span><span class="nx">Getter</span><span class="o">/</span><span class="nx">Setter</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockClear</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReset</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRestore</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockResolvedValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRejectedValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockResolvedValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRejectedValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockImplementationOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockImplementation</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnThis</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockName</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getMockName</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">__test__</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">ts</span><span class="o">:</span><span class="mi">18</span><span class="o">:</span><span class="mi">13</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nx">FAIL</span>  <span class="nx">__test__</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">ts</span>
</span></span><span class="line"><span class="cl">  <span class="nx">multiple</span>
</span></span><span class="line"><span class="cl">    <span class="err">✕</span> <span class="nx">should</span> <span class="nx">be</span> <span class="nx">send</span> <span class="nx">when</span> <span class="nx">invoke</span> <span class="nx">the</span> <span class="nx">method</span> <span class="nx">sendMessage</span> <span class="p">(</span><span class="mi">12</span> <span class="nx">ms</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="err">●</span> <span class="nx">multiple</span> <span class="err">›</span> <span class="nx">should</span> <span class="nx">be</span> <span class="nx">send</span> <span class="nx">when</span> <span class="nx">invoke</span> <span class="nx">the</span> <span class="nx">method</span> <span class="nx">sendMessage</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()).</span><span class="nx">toBeCalledTimes</span><span class="p">(</span><span class="nx">expected</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">Expected</span> <span class="nx">number</span> <span class="k">of</span> <span class="nx">calls</span><span class="o">:</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Received</span> <span class="nx">number</span> <span class="k">of</span> <span class="nx">calls</span><span class="o">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="mi">17</span> <span class="o">|</span>     <span class="nx">sendMessage</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="mi">18</span> <span class="o">|</span>     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">top</span><span class="o">?</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">&gt;</span> <span class="mi">19</span> <span class="o">|</span>     <span class="nx">expect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">).</span><span class="nx">toBeCalledTimes</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="o">|</span>                                       <span class="o">^</span>
</span></span><span class="line"><span class="cl">      <span class="mi">20</span> <span class="o">|</span>   <span class="p">})</span>
</span></span><span class="line"><span class="cl">      <span class="mi">21</span> <span class="o">|</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">__test__</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">ts</span><span class="o">:</span><span class="mi">19</span><span class="o">:</span><span class="mi">39</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">at</span> <span class="nx">processTicksAndRejections</span> <span class="p">(</span><span class="nx">node</span><span class="o">:</span><span class="nx">internal</span><span class="o">/</span><span class="nx">process</span><span class="o">/</span><span class="nx">task_queues</span><span class="o">:</span><span class="mi">96</span><span class="o">:</span><span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Test</span> <span class="nx">Suites</span><span class="o">:</span> <span class="mi">1</span> <span class="nx">failed</span><span class="p">,</span> <span class="mi">1</span> <span class="nx">total</span>
</span></span><span class="line"><span class="cl"><span class="nx">Tests</span><span class="o">:</span>       <span class="mi">1</span> <span class="nx">failed</span><span class="p">,</span> <span class="mi">1</span> <span class="nx">total</span>
</span></span><span class="line"><span class="cl"><span class="nx">Snapshots</span><span class="o">:</span>   <span class="mi">0</span> <span class="nx">total</span>
</span></span><span class="line"><span class="cl"><span class="nx">Time</span><span class="o">:</span>        <span class="mf">1.077</span> <span class="nx">s</span>
</span></span><span class="line"><span class="cl"><span class="nx">Ran</span> <span class="nx">all</span> <span class="nx">test</span> <span class="nx">suites</span> <span class="nx">matching</span> <span class="o">/</span><span class="err">\</span><span class="o">/</span><span class="nx">Users</span><span class="err">\</span><span class="o">/</span><span class="nx">zhongren</span><span class="err">\</span><span class="p">.</span><span class="nx">gu</span><span class="err">\</span><span class="o">/</span><span class="mi">01</span><span class="err">\</span><span class="p">.</span><span class="nx">Project</span><span class="err">\</span><span class="o">/</span><span class="nx">test</span><span class="o">-</span><span class="nb">window</span><span class="o">-</span><span class="nx">object</span><span class="err">\</span><span class="o">/</span><span class="nx">__test__</span><span class="err">\</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="err">\</span><span class="p">.</span><span class="nx">spec</span><span class="err">\</span><span class="p">.</span><span class="nx">ts</span><span class="o">/</span><span class="nx">i</span> <span class="kd">with</span> <span class="nx">tests</span> <span class="nx">matching</span> <span class="s2">&#34;multiple should be send when invoke the method sendMessage&#34;</span><span class="p">.</span></span></span></code></pre></div></div>
<h2 id="在测试中写-log-有什么用">在测试中写 log 有什么用？</h2>
<blockquote>
<p>本文所说的测试中写的 Log 是提交到代码仓库中的日志。</p></blockquote>
<p>看了上面的测试和 UT 运行后的结果，你有什么看法？</p>
<p>在我看来，有以下几点：</p>
<h3 id="影响总体的测试输出">影响总体的测试输出</h3>
<p>如果测试中存在很多的 log，并且有部分测试会失败，当你找失败的测试的时候就会变得非常困难，会被log 迷惑。测试结果列表不是那么整齐，给人以测试混乱，不够整洁的感觉，影响开发体验。</p>
<h3 id="日志对测试运行的成败没有任何好处">日志对测试运行的成败没有任何好处</h3>
<p>测试在运行失败后，会自动打印出真实值（Received）和 期望值（Expected), 对于优秀的程序员，大家都用 TDD 开发，按照 TDD 的套路，程序的期望值是已知的；如果测试失败，你应该修改你的产品代码，让你的产品代码的输出符合你测试的期望值; 而不是在你的测试代码中调试，打 log。</p>
<p>如果在测试中打印了 Log，程序员最多在测试日志中看看某个变量的值，对生产代码没有任何影响; 同时你还得花时间去找你想要的日志，纯属浪费时间。</p>
<p>如果真的需要看测试的某个变量或者看生产代码中某行代码的运行时值，通过调试你的测试代码，在你的生产代码中打断点即可，完全没有必要将测试中的日志永久的留在代码库中。</p>
<h2 id="生产代码中的日志被测试打印出来可以吗">生产代码中的日志被测试打印出来，可以吗？</h2>
<p>不行。没有意义。</p>
<p>运行测试，我们只想知道所有测试是否成功，至于中间打印出生产代码中的日志也没有意义。
如果测试失败，只需要 Fix 对应的测试即可, 无论什么方法。</p>
<h2 id="解决方案">解决方案</h2>
<p>如果真的需要在测试时调试代码，可以加 <code>debug</code> 级别的调试代码，这样就可以通过日志来调试了，但还是需要通过其他的方式，比如 <code>eslint</code> 来限制将 <code>debug</code> 日志提交到 Repo 中。</p>
<p>怎么让测试的输出中不输出 log 信息呢？</p>
<ul>
<li>
<p>对于前端，我们可以在所有测试运行前 Spy <code>console.*</code>的所有的方法，</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;log&#39;</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;info&#39;</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;warn&#39;</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;error&#39;</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">();</span></span></span></code></pre></div></div>
<p>这段代码需要写在 <code>tests/jest-setup.[t|j]s</code> 中。</p>
</li>
<li>
<p>或者使用第三方成熟的 npm 包， 像 <a href="https://www.npmjs.com/package/jest-mock-console">jest-mock-console</a><sup>[1]</sup>
, 这个包功能更强大一点。</p>
</li>
</ul>
<div class="references">
                <h2>参考</h2>
                <ol><li>jest-mock-console: <a href="https://www.npmjs.com/package/jest-mock-console" rel="noopener noreferrer">https://www.npmjs.com/package/jest-mock-console</a></li></ol>
            </div>]]></description></item><item><title>Continuously Optimize Your Website With Lighthouse CI</title><link>https://guzhongren.github.io/2022/04/continuously-optimize-your-website-with-lighthouse-ci/</link><pubDate>Sat, 16 Apr 2022 14:11:32 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/04/continuously-optimize-your-website-with-lighthouse-ci/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/Lighthouse/Lighthouse-Chrome-DevTools.47rhl099s9c0.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>Performance has directly impacted the company&rsquo;s bottom line.
&ndash; <a href="https://www.youtube.com/watch?v=Xryhxi45Q5M&amp;feature=youtu.be&amp;t=1366">Pinterest</a><sup>[1]</sup>
</p></blockquote>
<h2 id="intro">Intro</h2>
<p>Since the development of the Internet, web page performance has always been an important issue. All major Internet companies are sparing no effort to optimize their web pages, in order to allow users to see the content that users want to see faster.</p>
<p>During the development of the Internet in recent decades, various indicators and terms for measuring web performance have stabilized, and the measurement methods of various products have tended to be consistent.</p>
<p>The BBC found that every 1 second increase in the load time of its website was associated with losing 10% more users.
DoubleClick by Google found that 53% of mobile site visits are abandoned if a page takes longer than 3 seconds to load.
DoubleClick by Google research shows that sites with loading times under 5 seconds experience 70% longer sessions, 35% lower bounce rates, and 25% higher ad viewability rates than sites that load about four times as long (19 seconds).
Mobify saw a 1.11% increase in session-based conversions for every 100 milliseconds decrease in homepage load time and an average annual revenue increase of nearly $380,000.
AutoAnything saw a 12-13% increase in sales after halving its page load time.
It can be seen how important the performance of web pages is in today&rsquo;s Internet of Everything era.</p>
<h2 id="problems-with-measuring-web-performance">Problems with measuring web performance</h2>
<h3 id="not-runnable-natively-to-catch-performance-issues-as-early-as-possible">Not runnable natively to catch performance issues as early as possible</h3>
<p>Many tools cannot be run locally; if the web performance testing tools can be run locally, developers can find problems earlier and solve them locally as soon as possible, avoiding running on CI for a while before finding problems , which can save a lot of time and improve production efficiency in the agile development process of <code>CI/CD</code>. <code>Shift-left of the web performance test</code> is bound to bring more benefits to the performance of web products, and even more profits for the company.</p>
<h3 id="inability-to-continuously-measure-performance-metrics">Inability to continuously measure performance metrics</h3>
<p>At present, most of the web performance measurement products on the market are <code>Sass</code> products. Using its products, we can only get a visual result page after running the performance test, but it cannot continuously record the improvement records of web page performance, and cannot be well quantified the life cycle of a web product performance. Of course there are also web performance testing tools that implement history, such as <a href="https://treo.sh/">treo</a><sup>[2]</sup>
.</p>
<h3 id="cost">Cost</h3>
<p>There are many open source free web performance testing tools, but they may not be so easy to use; if you need more features, such as continuous recording of web page performance, generally only commercial products will support it, and the fees are not low.</p>
<h3 id="difficulty-with-ci-integration">Difficulty with CI integration</h3>
<p>As mentioned earlier, many tools either cannot be run locally or are Sass products, which cannot be well integrated with Pipeline, resulting in long feedback cycles of web performance results and make the engineering efficiency too low.</p>
<h2 id="lighthouse">Lighthouse</h2>
<blockquote>
<p>Lighthouse is an open-source, automated tool for improving the quality of web pages. You can run it against any web page, public or requiring authentication. It has audits for performance, accessibility, progressive web apps, SEO and more.</p></blockquote>
<blockquote>
<p>You can run Lighthouse in <code>Chrome DevTools</code>, from the command line, or as a <code>Node</code> module. You give <code>Lighthouse</code> a URL to audit, it runs a series of audits against the page, and then it generates a report on how well the page did. From there, use the failing audits as indicators on how to improve the page. Each audit has a reference doc explaining why the audit is important, as well as how to fix it.</p></blockquote>
<blockquote>
<p>You can also use Lighthouse CI to prevent regressions on your sites.</p></blockquote>
<p>It&rsquo;s very easy to use, take a look at the results of my audit of my open source project <a href="https://github.com/guzhongren/Powerboard">Powerboard</a><sup>[3]</sup>
.
<img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/Lighthouse/Lighthouse-Chrome-DevTools.47rhl099s9c0.webp" alt="Lighthouse-Chrome-DevTools" /></p>
<h2 id="ways-of-lighthouse-ci-and-lighthouse-server">Ways of Lighthouse CI and Lighthouse Server</h2>
<h3 id="lighthouse-ci-lhci">Lighthouse CI （LHCI）</h3>
<blockquote>
<p>Automate running Lighthouse for every commit, viewing the changes, and preventing regressions
&ndash; <a href="https://github.com/GoogleChrome/lighthouse-ci">GoogleChrome/lighthouse-ci</a><sup>[4]</sup>
</p></blockquote>
<p><code>Lighthouse CI</code> is a suite of tools that make continuously running, saving, retrieving, and asserting against Lighthouse results as easy as possible.</p>
<h4 id="how-to-use">How to use</h4>
<p><code>LHCI</code> provides the <code>npm</code> installation package, which can be well integrated on the Pipeline, just run the <code>autorun</code> command in the corresponding directory, the command is as follows</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm install -g @lhci/cli
</span></span><span class="line"><span class="cl">lhci autorun</span></span></code></pre></div></div>
<p>After the operation is completed, LHCI will store the results in the <code>.lighthouseci</code> directory, and you can open the corresponding report with a browser.</p>
<h3 id="lighthouse-server">Lighthouse Server</h3>
<blockquote>
<p>The LHCI server saves historical Lighthouse data, displays trends in a dashboard, and offers an in-depth build comparison UI to uncover differences between builds.</p></blockquote>
<table>
  <thead>
      <tr>
          <th><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/Lighthouse/lhci-server.5x95meg6f4w0.webp" alt="lhci-server" /></th>
          <th><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/Lighthouse/lhci-server-compare.64ass32uxhg0.webp" alt="lhci-server-compare" /></th>
      </tr>
  </thead>
  <tbody>
  </tbody>
</table>
<h4 id="installation-and-use-of-lhci-server">Installation and use of LHCI Server</h4>
<p>There are many ways to install LHCI Server, please refer to <a href="https://github.com/GoogleChrome/lighthouse-ci/blob/main/docs/server.md#lhci-server">here</a><sup>[5]</sup>
, the recommended way is to use Docker. Note that the first run needs to create a Lighthouse App, you need to run the <code>lhci wizard</code> in the container and fill in the corresponding information, <strong>finally record the generated <code>Build token</code> and <code>Admin token</code></strong>.</p>
<h3 id="integration-with-lighthouse-ci-and-lighthouse-server">Integration with Lighthouse CI and Lighthouse Server</h3>
<p><img src="https://user-images.githubusercontent.com/2301202/81843922-f2e17300-9513-11ea-85f9-d3d8a0b52633.png" alt="Lighthouse CI Recommended Setup Progression" /></p>
<ul>
<li>We have already talked about how to install <code>lhci</code> and <code>lhci server</code>, the next step is to use the two together. Here we take <code>GitHub Actions</code> as an example to make a demo.</li>
<li>Build <code>GitHub workflow</code>. For specific practices, please refer to the implementation details of <a href="https://github.com/guzhongren/Powerboard">Powerboard</a><sup>[3]</sup>
</li>
<li>.github/workflows/Lighthouse.yml</li>
</ul>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-yml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Lighthouse CI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">lhci</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Lighthouse</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">ref</span><span class="p">:</span><span class="w"> </span><span class="l">${{ github.event.pull_request.head.sha }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Use Node.js 10.x</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-node@v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">node-version</span><span class="p">:</span><span class="w"> </span><span class="m">16.14.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">npm install, build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          npm install
</span></span></span><span class="line"><span class="cl"><span class="sd">          npm run build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Upload Lighthouse Report</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          npm install -g @lhci/cli
</span></span></span><span class="line"><span class="cl"><span class="sd">          lhci autorun --config=.github/config/lighthouserc-no-condition.json
</span></span></span><span class="line"><span class="cl"><span class="sd">          lhci upload --serverBaseUrl=${{ secrets.LHCI_SERVER_URL }} --token=${{ secrets.LHCI_BUILD_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">LHCI_GITHUB_APP_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.LHCI_GITHUB_APP_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Check Lighthouse Report</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          lhci autorun --config=.github/config/lighthouserc.json</span></span></span></code></pre></div></div>
<ul>
<li>.github/config/lighthouserc-no-condition.json</li>
</ul>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-json">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;ci&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;collect&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;staticDistDir&#34;</span><span class="p">:</span> <span class="s2">&#34;./dist&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;formFactor&#34;</span><span class="p">:</span> <span class="s2">&#34;desktop&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;screenEmulation&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;mobile&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;width&#34;</span><span class="p">:</span> <span class="mi">1920</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;height&#34;</span><span class="p">:</span> <span class="mi">1080</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;deviceScaleFactor&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;disabled&#34;</span><span class="p">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;assert&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;assertions&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:performance&#34;</span><span class="p">:</span> <span class="s2">&#34;off&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:accessibility&#34;</span><span class="p">:</span> <span class="s2">&#34;off&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:best-practices&#34;</span><span class="p">:</span> <span class="s2">&#34;off&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:seo&#34;</span><span class="p">:</span> <span class="s2">&#34;off&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:pwa&#34;</span><span class="p">:</span> <span class="s2">&#34;off&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<ul>
<li>.github/config/lighthouserc.json</li>
</ul>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-json">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;ci&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;collect&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;staticDistDir&#34;</span><span class="p">:</span> <span class="s2">&#34;./dist&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;formFactor&#34;</span><span class="p">:</span> <span class="s2">&#34;desktop&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;screenEmulation&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;mobile&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;width&#34;</span><span class="p">:</span> <span class="mi">1920</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;height&#34;</span><span class="p">:</span> <span class="mi">1080</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;deviceScaleFactor&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;disabled&#34;</span><span class="p">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;assert&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;assertions&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:performance&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;error&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&#34;minScore&#34;</span><span class="p">:</span> <span class="mf">0.8</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:accessibility&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;error&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&#34;minScore&#34;</span><span class="p">:</span> <span class="mf">0.95</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:best-practices&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;error&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&#34;minScore&#34;</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:seo&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;error&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&#34;minScore&#34;</span><span class="p">:</span> <span class="mf">0.9</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:pwa&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;warn&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&#34;minScore&#34;</span><span class="p">:</span> <span class="mf">0.99</span> <span class="p">}]</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<ul>
<li>Need to store the <code>Build token</code> generated by <code>lhci Server</code> and the address of <code>lhci Server</code> in the Secrets of the GitHub project</li>
<li>Here the <code>lhci</code> command is executed twice. Because <code>lhci autorun</code> runs the default <code>assertion</code>, the first time you use the command without assertion, the purpose is to upload the current web page performance to the server side; the second time you configure various indicators Threshold, if it does not meet the requirements, Pipeline will block, to achieve <code>Shift-left of the web performance test</code>.</li>
<li><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/Lighthouse/powerboard-lighthouse-actions.40eis8x91cu0.webp" alt="Powerboard Lighthouse Actions" /></li>
</ul>
<h2 id="summary">Summary</h2>
<ul>
<li>For: Developers, technical leads or marketers</li>
<li>They want to: <code>continuously quantify</code> and demonstrate the <code>performance</code> of web pages</li>
<li>This: Lighthouse CI</li>
<li>is one: a set of tools written by <code>Google</code> to make it as easy as possible to continuously run, save, retrieve, and assert on <code>Lighthouse</code> results. It can evaluate web applications and pages, as well as gather information such as performance metrics and insights from development best practices</li>
<li>It can: test your web page, get web page&rsquo;s <code>Performance</code> , <code>Accessibility</code> , <code>Best Practices</code> , <code>SEO</code> and <code>PWA</code> scores on different <code>devices</code>, these scores can be used to analyze the product performance, helping to improve user conversion rates, etc.</li>
<li>Unlike: <a href="https://treo.sh/">treo</a><sup>[2]</sup>
 or some other web performance testing tool</li>
<li>Its advantages are: <code>Open-Source</code>, <code>Free</code>, <code>Self-hosted</code> data and Server, <code>Easy to integrate</code>.</li>
</ul>
<div class="references">
                <h2>参考</h2>
                <ol><li>Pinterest: <a href="https://www.youtube.com/watch?v=Xryhxi45Q5M&amp;feature=youtu.be&amp;t=1366" rel="noopener noreferrer">https://www.youtube.com/watch?v=Xryhxi45Q5M&amp;feature=youtu.be&amp;t=1366</a></li><li>treo: <a href="https://treo.sh/" rel="noopener noreferrer">https://treo.sh/</a></li><li>Powerboard: <a href="https://github.com/guzhongren/Powerboard" rel="noopener noreferrer">https://github.com/guzhongren/Powerboard</a></li><li>GoogleChrome/lighthouse-ci: <a href="https://github.com/GoogleChrome/lighthouse-ci" rel="noopener noreferrer">https://github.com/GoogleChrome/lighthouse-ci</a></li><li>here: <a href="https://github.com/GoogleChrome/lighthouse-ci/blob/main/docs/server.md#lhci-server" rel="noopener noreferrer">https://github.com/GoogleChrome/lighthouse-ci/blob/main/docs/server.md#lhci-server</a></li></ol>
            </div>]]></description></item><item><title>使用 Lighthouse 持续优化你的 Web 性能</title><link>https://guzhongren.github.io/2022/03/%E4%BD%BF%E7%94%A8-lighthouse-%E6%8C%81%E7%BB%AD%E4%BC%98%E5%8C%96%E4%BD%A0%E7%9A%84-web-%E6%80%A7%E8%83%BD/</link><pubDate>Sun, 27 Mar 2022 14:27:12 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/03/%E4%BD%BF%E7%94%A8-lighthouse-%E6%8C%81%E7%BB%AD%E4%BC%98%E5%8C%96%E4%BD%A0%E7%9A%84-web-%E6%80%A7%E8%83%BD/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/Lighthouse/Lighthouse-Chrome-DevTools.47rhl099s9c0.webp" referrerpolicy="no-referrer">
            </div><blockquote>
<p>性能是留住用户的关键，
性能直接影响公司的命运。
&ndash; <a href="https://www.youtube.com/watch?v=Xryhxi45Q5M&amp;feature=youtu.be&amp;t=1366">Pinterest</a><sup>[1]</sup>
</p></blockquote>
<h2 id="介绍">介绍</h2>
<p>互联网发展至今，网页性能始终是一个重要的问题, 各大互联网公司都在不遗余力的优化自己的 Web 页面，为的就是更快的让用户更快的看到用户想看到的内容。</p>
<p>互联网在近几十年的发展过程中，度量 Web 性能各个指标、术语已经稳定了，各个产品的度量方式都趋于一致。</p>
<p>BBC 发现其网站的加载时间每增加 1 秒，便会多失去 10% 的用户。
DoubleClick by Google 发现，如果页面加载时间超过 3 秒，53% 的移动网站访问活动将遭到抛弃。
DoubleClick by Google 研究表明，与加载时间约为四倍（19 秒）的网站相比，加载时间在 5 秒以内的网站会话加长 70%、跳出率下降 35%、广告可见率上升 25%。
Mobify 的首页加载时间每减少 100 毫秒，基于会话的转化率增加 1.11%，年均收入增长近 380,000 美元。
AutoAnything 的页面加载时间减少一半后，其销售额提升 12-13%。
可见，Web 页面的性能在现今万物互联的时代有多重要。</p>
<h2 id="web-性能在度量方面存在的问题">Web 性能在度量方面存在的问题</h2>
<h3 id="不可本地运行以尽可能早地发现性能问题">不可本地运行，以尽可能早地发现性能问题</h3>
<p>很多工具都不可以在本地运行； 如果 Web 性能测试工具可以在本地运行，开发人员可以更早地发现问题，并尽可能早的在本地解决，避免了在 CI 上跑了一会了才发现问题，在 <code>CI/CD</code> 的敏捷开发过程中这样可以节省很多时间，提高生产效率。<code>Web 性能测试左移</code> 必定为 Web 产品性能带来更多好处，甚至为公司带来更多盈利。</p>
<h3 id="不能持续度量性能指标">不能持续度量性能指标</h3>
<p>目前市场上 Web 性能度量的产品大多都是 <code>Sass</code> 产品，使用其产品我们只能得到一个运行完性能测试的可视化结果页面，但是不能持续的记录 Web 网页性能的改进记录，不能很好的量化一个 Web 产品性能的生命周期。当然也有实现历史记录的 Web 性能测试工具，例如 <a href="https://treo.sh/">treo</a><sup>[2]</sup>
。</p>
<h3 id="费用">费用</h3>
<p>开源免费的 Web 性能测试工具有不少，但是用起来可能没有那么爽；如果需要更多的特性，如持续记录 Web 网页性能，一般只有商业产品会支持，而且收费还不低。</p>
<h3 id="ci-集成困难">CI 集成困难</h3>
<p>如前面所说，很多工具要么是本地不能运行，要么就是 Sass 产品，不能很好的与 Pipeline 集成， 导致 Web 性能结果反馈周期长、工程效率低等问题。</p>
<h2 id="lighthouse">Lighthouse</h2>
<blockquote>
<p>Lighthouse 是一个开源的、自动化的工具，用以提高网页质量。你可以在任何网页上运行它，公开的或需要认证的。它对性能、可访问性、渐进式web应用程序、SEO 等进行审计。
你可以在 <code>Chrome DevTools</code>、 命令行甚至是 <code>Node</code> 模块中运行 <code>Lighthouse</code>。 向 Lighthouse 提供一个要审计的 URL，它会对页面运行一系列审计，随即会生成一个关于页面运行情况的报告。对于失败的审计项，可以使用对应项的改进方案。每个审计项都有一个参考文档，解释为什么审核很重要，以及如何修复它。</p></blockquote>
<p>使用方法非常简单，可以看一下我对我的开源项目 <code>Powerboard</code> 审计的结果。
<img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/Lighthouse/Lighthouse-Chrome-DevTools.47rhl099s9c0.webp" alt="Lighthouse-Chrome-DevTools" /></p>
<h2 id="lighthouse-ci-及-lighthouse-server-的使用">Lighthouse CI 及 Lighthouse Server 的使用</h2>
<h3 id="lighthouse-ci-lhci">Lighthouse CI （LHCI）</h3>
<blockquote>
<p>Automate running Lighthouse for every commit, viewing the changes, and preventing regressions
为每个提交自动化运行Lighthouse，查看更改，并防止回归
&ndash; <a href="https://github.com/GoogleChrome/lighthouse-ci">GoogleChrome/lighthouse-ci</a><sup>[3]</sup>
</p></blockquote>
<p><code>Lighthouse CI</code> 是 <code>Google Chrome</code> 团队开发的一套可以让持续运行、保存、检索和对 Lighthouse 结果进行<code>断言</code>变得尽可能简单的工具,可以很方便的集成在 CI 上。</p>
<h4 id="使用">使用</h4>
<p><code>LHCI</code> 提供 <code>npm</code> 安装包，可以很好的在 Pipeline 上集成，只需要在对应目录下运行 <code>autorun</code> 命令即可，命令如下</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm install -g @lhci/cli
</span></span><span class="line"><span class="cl">lhci autorun</span></span></code></pre></div></div>
<p>运行完成后，LHCI 会将结果存放在 <code>.lighthouseci</code> 目录下，用浏览器打开对应的报告即可。</p>
<h3 id="lighthouse-server">Lighthouse Server</h3>
<blockquote>
<p>The LHCI server saves historical Lighthouse data, displays trends in a dashboard, and offers an in-depth build comparison UI to uncover differences between builds.
LHCI Server 保存 Lighthouse 历史数据，并可在仪表板中显示趋势，并提供深入的构建比较 UI，以揭示构建之间的差异。</p></blockquote>
<table>
  <thead>
      <tr>
          <th><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/Lighthouse/lhci-server.5x95meg6f4w0.webp" alt="lhci-server" /></th>
          <th><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/Lighthouse/lhci-server-compare.64ass32uxhg0.webp" alt="lhci-server-compare" /></th>
      </tr>
  </thead>
  <tbody>
  </tbody>
</table>
<h4 id="lhci-server-的安装和使用">LHCI Server 的安装和使用</h4>
<p>LHCI Server 的安装有多种方式，具体可参考<a href="https://github.com/GoogleChrome/lighthouse-ci/blob/main/docs/server.md#lhci-server">这里</a><sup>[4]</sup>
，推荐使用 Docker 的方式运行。需要注意的是，第一次运行需要创建 Lighthouse App, 需要在容器中运行 <code>lhci wizard</code> 并填入相应的信息，<strong>最后记录下生成的 <code>Build token</code> 和 <code>Admin token</code></strong>。</p>
<h3 id="lighthouse-ci-和-lighthouse-server-集成">Lighthouse CI 和 Lighthouse Server 集成</h3>
<p><img src="https://user-images.githubusercontent.com/2301202/81843922-f2e17300-9513-11ea-85f9-d3d8a0b52633.png" alt="Lighthouse CI Recommended Setup Progression" /></p>
<ul>
<li>前面已经讲了 <code>lhci</code> 和 <code>lhci server</code> 如何安装了，接下来就是需要将两者结合起来一起使用了。这里我们以 <code>GitHub Actions</code> 为例来搞一个 Demo。</li>
<li>构建 <code>GitHub workflow</code>， 具体实践可参考 <a href="https://github.com/guzhongren/Powerboard">Powerboard</a><sup>[5]</sup>
 的实现细节</li>
<li>.github/workflows/Lighthouse.yml</li>
</ul>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-yml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Lighthouse CI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">lhci</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Lighthouse</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">ref</span><span class="p">:</span><span class="w"> </span><span class="l">${{ github.event.pull_request.head.sha }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Use Node.js 10.x</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/setup-node@v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">node-version</span><span class="p">:</span><span class="w"> </span><span class="m">16.14.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">npm install, build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          npm install
</span></span></span><span class="line"><span class="cl"><span class="sd">          npm run build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Upload Lighthouse Report</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          npm install -g @lhci/cli
</span></span></span><span class="line"><span class="cl"><span class="sd">          lhci autorun --config=.github/config/lighthouserc-no-condition.json
</span></span></span><span class="line"><span class="cl"><span class="sd">          lhci upload --serverBaseUrl=${{ secrets.LHCI_SERVER_URL }} --token=${{ secrets.LHCI_BUILD_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">LHCI_GITHUB_APP_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.LHCI_GITHUB_APP_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Check Lighthouse Report</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          lhci autorun --config=.github/config/lighthouserc.json</span></span></span></code></pre></div></div>
<ul>
<li>.github/config/lighthouserc-no-condition.json</li>
</ul>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-json">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;ci&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;collect&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;staticDistDir&#34;</span><span class="p">:</span> <span class="s2">&#34;./dist&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;formFactor&#34;</span><span class="p">:</span> <span class="s2">&#34;desktop&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;screenEmulation&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;mobile&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;width&#34;</span><span class="p">:</span> <span class="mi">1920</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;height&#34;</span><span class="p">:</span> <span class="mi">1080</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;deviceScaleFactor&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;disabled&#34;</span><span class="p">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;assert&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;assertions&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:performance&#34;</span><span class="p">:</span> <span class="s2">&#34;off&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:accessibility&#34;</span><span class="p">:</span> <span class="s2">&#34;off&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:best-practices&#34;</span><span class="p">:</span> <span class="s2">&#34;off&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:seo&#34;</span><span class="p">:</span> <span class="s2">&#34;off&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:pwa&#34;</span><span class="p">:</span> <span class="s2">&#34;off&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<ul>
<li>.github/config/lighthouserc.json</li>
</ul>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-json">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;ci&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;collect&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;staticDistDir&#34;</span><span class="p">:</span> <span class="s2">&#34;./dist&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;formFactor&#34;</span><span class="p">:</span> <span class="s2">&#34;desktop&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;screenEmulation&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;mobile&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;width&#34;</span><span class="p">:</span> <span class="mi">1920</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;height&#34;</span><span class="p">:</span> <span class="mi">1080</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;deviceScaleFactor&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="nt">&#34;disabled&#34;</span><span class="p">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;assert&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;assertions&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:performance&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;error&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&#34;minScore&#34;</span><span class="p">:</span> <span class="mf">0.8</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:accessibility&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;error&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&#34;minScore&#34;</span><span class="p">:</span> <span class="mf">0.95</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:best-practices&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;error&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&#34;minScore&#34;</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:seo&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;error&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&#34;minScore&#34;</span><span class="p">:</span> <span class="mf">0.9</span> <span class="p">}],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;categories:pwa&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;warn&#34;</span><span class="p">,</span> <span class="p">{</span> <span class="nt">&#34;minScore&#34;</span><span class="p">:</span> <span class="mf">0.99</span> <span class="p">}]</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<ul>
<li>需要将 <code>lhci Server</code> 生成的 <code>Build token</code> 和 <code>lhci Server</code> 的地址存放在 GitHub 项目的 Secrets 中</li>
<li>这里执行了两次 <code>lhci</code> 命令。因为 <code>lhci autorun</code> 运行完成后会运行默认的断言(<code>Assertion</code>), 第一次用没有断言的命令，目的是将当前的网页性能可以上到 Server 端; 第二次配置了各项指标的阈值，如果不满足要求，Pipeline 将会阻断，实现 <code>Web 性能测试左移</code>。</li>
<li><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Tools/Lighthouse/powerboard-lighthouse-actions.40eis8x91cu0.webp" alt="Powerboard Lighthouse Actions" /></li>
</ul>
<h2 id="总结">总结</h2>
<ul>
<li>对于：开发人员、技术领导或者市场营销人员</li>
<li>他们想：<code>持续量化</code>并展示 Web 页面的<code>性能</code></li>
<li>这个：Lighthouse CI</li>
<li>是一个：由 <code>Google</code> 编写的一套工具，可以持续运行、保存、检索并对 <code>Lighthouse</code> 结果进行断言变得尽可能简单。它可以评估 Web 应用和页面，以及从开发的最佳实践中收集性能指标和洞见等信息</li>
<li>它可以：测试你的 Web 页面，得到 Web 页面的 <code>Performance</code> 、 <code>Accessibility</code> 、 <code>Best Practices</code> 、 <code>SEO</code> 和 <code>PWA</code> 在不同<code>设备</code>上的分数, 这些分数可以用于分析产品性能，帮助提升用户转化率等</li>
<li>不同于：<a href="https://treo.sh/">treo</a><sup>[2]</sup>
 或者其他一些 Web 性能测试工具</li>
<li>它的优势是: <code>Open-Source</code>, <code>Free</code>, <code>Self-hosted</code> data and Server, <code>Easy to integrate</code>。</li>
</ul>
<div class="references">
                <h2>参考</h2>
                <ol><li>Pinterest: <a href="https://www.youtube.com/watch?v=Xryhxi45Q5M&amp;feature=youtu.be&amp;t=1366" rel="noopener noreferrer">https://www.youtube.com/watch?v=Xryhxi45Q5M&amp;feature=youtu.be&amp;t=1366</a></li><li>treo: <a href="https://treo.sh/" rel="noopener noreferrer">https://treo.sh/</a></li><li>GoogleChrome/lighthouse-ci: <a href="https://github.com/GoogleChrome/lighthouse-ci" rel="noopener noreferrer">https://github.com/GoogleChrome/lighthouse-ci</a></li><li>这里: <a href="https://github.com/GoogleChrome/lighthouse-ci/blob/main/docs/server.md#lhci-server" rel="noopener noreferrer">https://github.com/GoogleChrome/lighthouse-ci/blob/main/docs/server.md#lhci-server</a></li><li>Powerboard: <a href="https://github.com/guzhongren/Powerboard" rel="noopener noreferrer">https://github.com/guzhongren/Powerboard</a></li></ol>
            </div>]]></description></item><item><title>浮躁的时代更需要沉淀自己</title><link>https://guzhongren.github.io/2022/02/%E6%B5%AE%E8%BA%81%E7%9A%84%E6%97%B6%E4%BB%A3%E6%9B%B4%E9%9C%80%E8%A6%81%E6%B2%89%E6%B7%80%E8%87%AA%E5%B7%B1/</link><pubDate>Sun, 27 Feb 2022 18:58:36 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/02/%E6%B5%AE%E8%BA%81%E7%9A%84%E6%97%B6%E4%BB%A3%E6%9B%B4%E9%9C%80%E8%A6%81%E6%B2%89%E6%B7%80%E8%87%AA%E5%B7%B1/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1645433465089-f0da19111085?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=735&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="这个社会怎么了">这个社会怎么了</h2>
<p>最近的热点都被俄罗斯攻打乌克兰占领了，没有一点悬念的是社交网站上出现了完全不同立场的人的极端言论。</p>
<p>国家已经在各个发布会上表明了 ZF 的立场，个人还在自己的朋友圈、公众号、社交平台上发布各种言论；远远的只能是说一句 真是辛苦那些社交媒体了，以后的社交媒体恐怕又要加几条规则了；暴力机器在这，一个小小的零部件又怎能翻起大浪呢。</p>
<p>如此的凑热闹，看来还是房贷压力比较小，七大姑八大姨不催你。</p>
<h3 id="短视频">短视频</h3>
<p>不管是抖音，腾讯还是哪个巨头，都在尽可能的抢夺用户的时间。首先，巨头们通过各种手段让用户安装他们的短视频应用，然后再利用自己的 AI 平台向用户推送各种与用户相关的信息，导致用户形成一个个的<code>信息茧 fang</code>，用户看什么由平台决定，而且用户收到的永远都是自己感兴趣的。所以一打开手机的短视频应用，你就永远都停不下来了。</p>
<h3 id="社交平台">社交平台</h3>
<p>社交媒体上有各式各样的图片与言论，比如最近的俄乌战争。有的人支持乌克兰，就把记得的社交头像换成 <code>I stand with UKL</code>的文字或者乌克兰的国旗，有的更是挖出了俄罗斯占领中国领土的地图，上面标注了时间和面积；有的人支持俄罗斯，理由可能是俄罗斯和中国比较亲。</p>
<p>社交媒体上所有的事不一定都是真事，不要轻易发表自己的看法；所谓<code>让子弹飞一会儿</code>，有些事，更是需要让历史来评判。</p>
<p><code>未经他人苦，莫劝他人善</code>， 也不要随随便便去评判他人。</p>
<h2 id="该怎么与这个世界相处">该怎么与这个世界相处</h2>
<p>可能我们很难理解这个世界的运行规则，但我们还得跟这个世界好好相处。</p>
<h3 id="考证">考证</h3>
<p>在中国可能有很多地方，证书是很有说服力的，实力不一定重要。作为计算机行业的从业者，可以考个软考之类的； 也可以考一些诸如公司要用的，比如云计算，DevOps 相关的证书，虽然有有效期，但是在相应的时间段说不定就有收入上的增加。</p>
<h3 id="实践">实践</h3>
<p>现实的工作中我们不可能只专注一方面，所以我们得学习更多的技能，而且很多新技能是没有衡量体系的，所以我们只有不断的练习或者产出才能证明我们在这一方面的能力；也可以参与到开源项目中，当然是那种带着学习实践的心态，用学到的技术解决问题最有成就感，不是吗？</p>
]]></description></item><item><title>构建更优的 GitHub Action 完成 Algolia 数据上传</title><link>https://guzhongren.github.io/2022/01/%E6%9E%84%E5%BB%BA%E6%9B%B4%E4%BC%98%E7%9A%84github-action%E5%AE%8C%E6%88%90algolia%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%BC%A0/</link><pubDate>Thu, 20 Jan 2022 23:02:34 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/01/%E6%9E%84%E5%BB%BA%E6%9B%B4%E4%BC%98%E7%9A%84github-action%E5%AE%8C%E6%88%90algolia%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%BC%A0/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/DevOps/Github-Action.6lpf9wwtga80.webp" referrerpolicy="no-referrer">
            </div><h2 id="场景">场景</h2>
<p>程序员喜欢写博客，大都喜欢自己 Host 一个自己的 Blog, 通常 Blog 会有一个全局的搜索功能，开源博客一般都会选择 <a href="https://lunrjs.com/">lunrjs</a><sup>[1]</sup>
 或者 <a href="https://www.algolia.com/">algolia</a><sup>[2]</sup>
 等。我的 Blog 是基于 <a href="https://gohugo.io/">Hugo</a><sup>[3]</sup>
 构建的，使用的主题是 <a href="https://hugoloveit.com/">LoveIt</a><sup>[4]</sup>
, 集成的是 algolia 的搜索方式。</p>
<p>对于存储在 algolia 上的数据，我是通过 GitHub Action：<a href="https://github.com/marketplace/actions/algolia-docsearch-indexer">Algolia Docsearch Indexer</a><sup>[5]</sup>
 来上传的，之前使用是没有问题的。</p>
<h2 id="问题">问题</h2>
<p>突然有一天我要使用搜索功能，但是怎么也搜索不到我想搜索的内容，看了 GitHub 项目的构建状态，一切正常，然后登陆到 algolia 后台一看， 最后一次的数据更新是在 21 年 8 月； 然后打开最近的博客构建记录，看了执行如下 GitHub workflow 的 yaml 日志，大吃一惊：程序执行错误，但还是在最后给我们送了一个🚀，同样是写代码，你能忍？</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">darrenjennings/algolia-docsearch-action@master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">algolia_application_id</span><span class="p">:</span><span class="w"> </span><span class="l">${{secrets.ALGOLIA_APPLICATION_ID}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">algolia_api_key</span><span class="p">:</span><span class="w"> </span><span class="l">${{secrets.ALGOLIA_API_KEY}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;./public/index.json&#39;</span></span></span></code></pre></div></div>
<p>运行日志</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-log">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-log" data-lang="log">Run darrenjennings/algolia-docsearch-action@master
/usr/bin/docker run --name a682564a13d76444749d3b720346ba2365371_9474ad --label 6a6825 --workdir /github/workspace --rm -e INPUT_ALGOLIA_APPLICATION_ID -e INPUT_ALGOLIA_API_KEY -e INPUT_FILE -e HOME -e GITHUB_JOB -e GITHUB_REF -e GITHUB_SHA -e GITHUB_REPOSITORY -e GITHUB_REPOSITORY_OWNER -e GITHUB_RUN_ID -e GITHUB_RUN_NUMBER -e GITHUB_RETENTION_DAYS -e GITHUB_RUN_ATTEMPT -e GITHUB_ACTOR -e GITHUB_WORKFLOW -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e GITHUB_EVENT_NAME -e GITHUB_SERVER_URL -e GITHUB_API_URL -e GITHUB_GRAPHQL_URL -e GITHUB_REF_NAME -e GITHUB_REF_PROTECTED -e GITHUB_REF_TYPE -e GITHUB_WORKSPACE -e GITHUB_ACTION -e GITHUB_EVENT_PATH -e GITHUB_ACTION_REPOSITORY -e GITHUB_ACTION_REF -e GITHUB_PATH -e GITHUB_ENV -e RUNNER_OS -e RUNNER_ARCH -e RUNNER_NAME -e RUNNER_TOOL_CACHE -e RUNNER_TEMP -e RUNNER_WORKSPACE -e ACTIONS_RUNTIME_URL -e ACTIONS_RUNTIME_TOKEN -e ACTIONS_CACHE_URL -e GITHUB_ACTIONS=true -e CI=true -v &#34;/var/run/docker.sock&#34;:&#34;/var/run/docker.sock&#34; -v &#34;/home/runner/work/_temp/_github_home&#34;:&#34;/github/home&#34; -v &#34;/home/runner/work/_temp/_github_workflow&#34;:&#34;/github/workflow&#34; -v &#34;/home/runner/work/_temp/_runner_file_commands&#34;:&#34;/github/file_commands&#34; -v &#34;/home/runner/work/blog/blog&#34;:&#34;/github/workspace&#34; 6a6825:64a13d76444749d3b720346ba2365371  &#34;***&#34; &#34;***&#34; &#34;./public/index.json&#34;
Cloning into &#39;docsearch-scraper&#39;...
Collecting pipenv
  Downloading pipenv-2021.11.23-py2.py3-none-any.whl (3.6 MB)
Collecting virtualenv
  Downloading virtualenv-20.10.0-py2.py3-none-any.whl (5.6 MB)
Requirement already satisfied: pip&gt;=18.0 in /usr/local/lib/python3.6/site-packages (from pipenv) (21.2.4)
Requirement already satisfied: setuptools&gt;=36.2.1 in /usr/local/lib/python3.6/site-packages (from pipenv) (57.5.0)
Collecting virtualenv-clone&gt;=0.2.5
  Downloading virtualenv_clone-0.5.7-py3-none-any.whl (6.6 kB)
Collecting certifi
  Downloading certifi-2021.10.8-py2.py3-none-any.whl (149 kB)
Collecting importlib-resources&gt;=1.0
  Downloading importlib_resources-5.4.0-py3-none-any.whl (28 kB)
Collecting backports.entry-points-selectable&gt;=1.0.4
  Downloading backports.entry_points_selectable-1.1.1-py2.py3-none-any.whl (6.2 kB)
Collecting six&lt;2,&gt;=1.9.0
  Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)
Collecting importlib-metadata&gt;=0.12
  Downloading importlib_metadata-4.8.3-py3-none-any.whl (17 kB)
Collecting filelock&lt;4,&gt;=3.2
  Downloading filelock-3.4.1-py3-none-any.whl (9.9 kB)
Collecting distlib&lt;1,&gt;=0.3.1
  Downloading distlib-0.3.4-py2.py3-none-any.whl (461 kB)
Collecting platformdirs&lt;3,&gt;=2
  Downloading platformdirs-2.4.0-py3-none-any.whl (14 kB)
Collecting zipp&gt;=0.5
  Downloading zipp-3.6.0-py3-none-any.whl (5.3 kB)
Collecting typing-extensions&gt;=3.6.4
  Downloading typing_extensions-4.0.1-py3-none-any.whl (22 kB)
Installing collected packages: zipp, typing-extensions, importlib-metadata, six, platformdirs, importlib-resources, filelock, distlib, backports.entry-points-selectable, virtualenv-clone, virtualenv, certifi, pipenv
WARNING: Running pip as the &#39;root&#39; user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed backports.entry-points-selectable-1.1.1 certifi-2021.10.8 distlib-0.3.4 filelock-3.4.1 importlib-metadata-4.8.3 importlib-resources-5.4.0 pipenv-2021.11.23 platformdirs-2.4.0 six-1.16.0 typing-extensions-4.0.1 virtualenv-20.10.0 virtualenv-clone-0.5.7 zipp-3.6.0
WARNING: You are using pip version 21.2.4; however, version 21.3.1 is available.
You should consider upgrading via the &#39;/usr/local/bin/python -m pip install --upgrade pip&#39; command.
Installing dependencies from Pipfile.lock (aabb41)...
Traceback (most recent call last):
  File &#34;docsearch&#34;, line 5, in &lt;module&gt;
    run()
  File &#34;/github/workspace/docsearch-scraper/cli/src/index.py&#34;, line 161, in run
    exit(command.run(sys.argv[2:]))
  File &#34;/github/workspace/docsearch-scraper/cli/src/commands/run_config.py&#34;, line 21, in run
    return run_config(args[0])
  File &#34;/github/workspace/docsearch-scraper/cli/../scraper/src/index.py&#34;, line 33, in run_config
    config = ConfigLoader(config)
  File &#34;/github/workspace/docsearch-scraper/cli/../scraper/src/config/config_loader.py&#34;, line 72, in __init__
    for key, value in list(data.items()):
AttributeError: &#39;list&#39; object has no attribute &#39;items&#39;
🚀 Successfully indexed and uploaded the results to Algolia</code></pre></div>
<p>面对一个磨洋工的工具，作为程序员的我们肯定不能忍。
打开 GitHub 上这个 Action 的 <a href="https://github.com/darrenjennings/algolia-docsearch-action">源码</a><sup>[6]</sup>
, 根据对 Action 构建的了解和现有代码，作者使用的是 Python 和 algolia 自己在 GitHub 上开源的 <a href="https://github.com/algolia/docsearch-scraper.git">工具</a><sup>[7]</sup>
, 然后执行一个  Python 脚本上传文件到 algolia 的；根据以往经验，由 Python 构建的项目镜像一般都比较大，在本地测试了一下，果不其然的大。</p>
<h3 id="面临的问题">面临的问题</h3>
<ul>
<li>工具损坏</li>
<li>镜像体积大</li>
</ul>
<h2 id="方案-spike">方案 Spike</h2>
<table>
  <thead>
      <tr>
          <th>Item</th>
          <th>Option1 使用 algolia 自己的 Restful 接口</th>
          <th>Option 2 algolia SDK</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>描述</td>
          <td>使用 algolia 自己的 Restful 接口实现上传</td>
          <td>使用其官方提供的 SDK 编写代码来集成</td>
      </tr>
      <tr>
          <td>是否推荐</td>
          <td>No</td>
          <td>Yes</td>
      </tr>
      <tr>
          <td>实现难度</td>
          <td>Middle</td>
          <td>Low</td>
      </tr>
      <tr>
          <td>优点</td>
          <td>流程可控</td>
          <td>简单直接，无需担心错误情况的处理</td>
      </tr>
      <tr>
          <td>缺点</td>
          <td>需要写更多的代码来控制整个流程</td>
          <td>整个上传过程不可控</td>
      </tr>
      <tr>
          <td>安全问题</td>
          <td>No</td>
          <td>No</td>
      </tr>
      <tr>
          <td>相对难度</td>
          <td>Middle</td>
          <td>Low</td>
      </tr>
      <tr>
          <td>相对成本</td>
          <td>Middle</td>
          <td>Low</td>
      </tr>
  </tbody>
</table>
<p>综上分析，使用 Option2 SDK 的方案更佳。</p>
<h2 id="执行方案">执行方案</h2>
<p>新建 GitHub Action 项目，我们使用 Dockerfile 的方式构建上传索引的方案；</p>
<ul>
<li>新建 entrypoint.sh 并写入如下代码，脚本执行需要传入如下几个变量：</li>
</ul>
<table>
  <thead>
      <tr>
          <th>Name</th>
          <th>Description</th>
          <th>Required</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>FILE_PATH</td>
          <td>要上传的文件路径</td>
          <td>Yes</td>
      </tr>
      <tr>
          <td>ALGOLIA_APPLICATION_ID</td>
          <td>Algolia 平台的应用 Id</td>
          <td>Yes</td>
      </tr>
      <tr>
          <td>ADMIN_API_KEY</td>
          <td>Algolia 上传所用的 API Key</td>
          <td>Yes</td>
      </tr>
      <tr>
          <td>INDEX_NAME</td>
          <td>在 Algolia 上你所创建的索引名</td>
          <td>Yes</td>
      </tr>
  </tbody>
</table>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nb">set</span> -eu
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">npm install -g @algolia/cli
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">algolia import -s <span class="nv">$FILE_PATH</span> -a <span class="nv">$APPLICATION_ID</span> -k <span class="nv">$ADMIN_API_KEY</span> -n <span class="nv">$INDEX_NAME</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$?</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;0&#34;</span> <span class="o">]</span> <span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;😢 Failed to upload your data to Algolia, PLZ report an issue, thx!&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;🚀 Successfully uploaded!&#34;</span></span></span></code></pre></div></div>
<ul>
<li>新建 Dockerfile 并写入如下代码，在此我们使用最小化的 Node 镜像 <code>node:lts-alpine</code></li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-dcokerfile">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-dcokerfile" data-lang="dcokerfile">FROM node:lts-alpine
COPY entrypoint.sh /entrypoint.sh
ENTRYPOINT [&#34;/entrypoint.sh&#34;]</code></pre></div>
<ul>
<li>更新 README, 完善使用文档。</li>
</ul>
<p>详细代码请参考 <a href="https://github.com/guzhongren/algolia-docsearch-upload-action/blob/main/Dockerfile">algolia-docsearch-upload-action</a><sup>[8]</sup>
。</p>
<h2 id="验证结果">验证结果</h2>
<p>在完成 Action 并将其集成到 Pipeline 上之后，成功运行，数据可成功上传到 Algolia 平台上，并且博客的右上角的搜索功能可以成功搜索到最新的文章，说明我们的 Action 是可以完成我们的需求的。</p>
<h3 id="运行效率比较">运行效率比较</h3>
<p>没有对比就没有伤害。下面对我自己写的 Action 和之前集成过的 Action 在<code>镜像大小</code>和<code>执行效率</code>方面进行对比。</p>
<div class="echarts" id="id-1" style="width: 100%; height: 30rem;"></div>
<h3 id="镜像大小比较">镜像大小比较</h3>
<div class="echarts" id="id-2" style="width: 100%; height: 30rem;"></div>
<div class="references">
                <h2>参考</h2>
                <ol><li>lunrjs: <a href="https://lunrjs.com/" rel="noopener noreferrer">https://lunrjs.com/</a></li><li>algolia: <a href="https://www.algolia.com/" rel="noopener noreferrer">https://www.algolia.com/</a></li><li>Hugo: <a href="https://gohugo.io/" rel="noopener noreferrer">https://gohugo.io/</a></li><li>LoveIt: <a href="https://hugoloveit.com/" rel="noopener noreferrer">https://hugoloveit.com/</a></li><li>Algolia Docsearch Indexer: <a href="https://github.com/marketplace/actions/algolia-docsearch-indexer" rel="noopener noreferrer">https://github.com/marketplace/actions/algolia-docsearch-indexer</a></li><li>源码: <a href="https://github.com/darrenjennings/algolia-docsearch-action" rel="noopener noreferrer">https://github.com/darrenjennings/algolia-docsearch-action</a></li><li>工具: <a href="https://github.com/algolia/docsearch-scraper.git" rel="noopener noreferrer">https://github.com/algolia/docsearch-scraper.git</a></li><li>algolia-docsearch-upload-action: <a href="https://github.com/guzhongren/algolia-docsearch-upload-action/blob/main/Dockerfile" rel="noopener noreferrer">https://github.com/guzhongren/algolia-docsearch-upload-action/blob/main/Dockerfile</a></li></ol>
            </div>]]></description></item><item><title>使用 Cypress 创建测试镜像并完成 E2E 测试</title><link>https://guzhongren.github.io/2022/01/%E4%BD%BF%E7%94%A8cypress%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E9%95%9C%E5%83%8F%E5%B9%B6%E5%AE%8C%E6%88%90e2e%E6%B5%8B%E8%AF%95/</link><pubDate>Sun, 16 Jan 2022 14:47:53 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/01/%E4%BD%BF%E7%94%A8cypress%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E9%95%9C%E5%83%8F%E5%B9%B6%E5%AE%8C%E6%88%90e2e%E6%B5%8B%E8%AF%95/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.pexels.com/photos/5667741/pexels-photo-5667741.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=650&amp;w=940" referrerpolicy="no-referrer">
            </div><h2 id="缘由">缘由</h2>
<p>最近在做一个 Buildkite 的 Dashboard 的项目 <a href="https://github.com/guzhongren/Powerboard">Powerboard</a><sup>[1]</sup>
，项目是托管在 GitHub 的 Git Pages 上的；项目只是一个纯前端项目，且 E2E 测试是用 <a href="https://www.cypress.io/">Cypress</a><sup>[2]</sup>
 构建的；如果要进行 E2E 测试一般情况都是对着部署在 Git Pages 上的网站直接测试，而且也是这么做的😄。</p>
<h2 id="痛点">痛点</h2>
<h3 id="测试滞后">测试滞后</h3>
<p>这么做肯定是有问题的，产品都上线了才做测试，肯定已经迟了；如果程序有问题，那么就会影响所有用户。这种情况应该算是 P1 级别的产品事故，对用户来说简直就是灾难。应该在部署之前就应该完成 E2E 测试，如果测试通过不了，就不应该部署代码。所以测试应该前移。</p>
<h2 id="解决方案">解决方案</h2>
<p>由于我们的测试需要自动化，需要在 Pipeline 上执行，所以必须是一个可以独立运行的程序和 Cypress 程序同时运行，并最终返回测试结果，由 Pipeline 来决定是否终止 Pipeline 运行。</p>
<p>在 GitHub Actions 的 Pipeline 上同时运行程序只能依靠 <code>docker-compose</code>, 在这我们可以使用 Cypress 官方出品的 <a href="https://hub.docker.com/r/cypress/included">cypress/included</a><sup>[3]</sup>
, 通过编排程序来进行测试。</p>
<h3 id="cypressincluded">cypress/included</h3>
<p>cypress/included 可以让我们挂载 cypress 的测试脚本，然后自动执行，并在最终返回 Linux 命令状态值，如 0 ， 非 0 值。</p>
<h3 id="docker-compose">Docker-compose</h3>
<p><a href="https://docs.docker.com/compose/">Docker-compose</a><sup>[4]</sup>
 是一套容器编排工具，可以很轻松的管理容器的启动顺序等。在本地项目搭建中非常有用，比如构建数据库，执行 shell/yaml lint 等。</p>
<h2 id="执行方案">执行方案</h2>
<h3 id="构建应用镜像">构建应用镜像</h3>
<p>在测试之前需要将应用构建好并部署好，我们可以用 Node 镜像打包应用，并利用容器的多阶段构建 (<a href="https://docs.docker.com/develop/develop-images/multistage-build/">multi-stage builds</a><sup>[5]</sup>
) 完成应用轻量化构建，并部署在 <a href="https://hub.docker.com/_/nginx">Nginx</a><sup>[6]</sup>
 中。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">FROM node:17-alpine as distPackage</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">COPY ./ /app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">WORKDIR /app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">RUN yarn</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">RUN yarn build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">FROM nginx:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">COPY --from=distPackage /app/dist /usr/share/nginx/html</span></span></span></code></pre></div></div>
<h3 id="编排-service">编排 service</h3>
<p>因为我们的程序需要在测试的时候就要部署好，所以我们可以利用 Docker-compose 的 <a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#build">build</a><sup>[7]</sup>
 参数，在容器启动时构建应用并部署。并在 cypress/included 启动是执行测试命令 <code>npx cy:docker</code>, 具体就是<code>cross-env ENV=docker cypress run --spec 'cypress/integration/dashboard.spec.js</code>。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">context</span><span class="p">:</span><span class="w"> </span><span class="l">./</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">dockerfile</span><span class="p">:</span><span class="w"> </span><span class="l">./Dockerfile</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;80:80&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">e2e</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">cypress/included:9.2.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">cypress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">CYPRESS_baseUrl=http://web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">ENV=docker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">npx cy:docker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">working_dir</span><span class="p">:</span><span class="w"> </span><span class="l">/e2e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./:/e2e</span></span></span></code></pre></div></div>
<p>这样我们就可以独立的运行起真实程序和正式的测试程序了，具体的 Pipeline 可以参考 Powerboard 的 <a href="https://github.com/guzhongren/Powerboard/blob/main/.github/workflows/main.yml">Workflow</a><sup>[8]</sup>
。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">E2E</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          docker-compose up --build e2e</span></span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<p><code>Docker-compopse</code> 有很好的应用编排能力，可以很轻松的构建多服务程序；并在构建应用的时候可以使用多阶段构建来优化镜像大小。使用 <code>Cypress</code> 可以提高开发效率并可在 <code>Pipeline</code> 上保证程序的正确性。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Powerboard: <a href="https://github.com/guzhongren/Powerboard" rel="noopener noreferrer">https://github.com/guzhongren/Powerboard</a></li><li>Cypress: <a href="https://www.cypress.io/" rel="noopener noreferrer">https://www.cypress.io/</a></li><li>cypress/included: <a href="https://hub.docker.com/r/cypress/included" rel="noopener noreferrer">https://hub.docker.com/r/cypress/included</a></li><li>Docker-compose: <a href="https://docs.docker.com/compose/" rel="noopener noreferrer">https://docs.docker.com/compose/</a></li><li>multi-stage builds: <a href="https://docs.docker.com/develop/develop-images/multistage-build/" rel="noopener noreferrer">https://docs.docker.com/develop/develop-images/multistage-build/</a></li><li>Nginx: <a href="https://hub.docker.com/_/nginx" rel="noopener noreferrer">https://hub.docker.com/_/nginx</a></li><li>build: <a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#build" rel="noopener noreferrer">https://docs.docker.com/compose/compose-file/compose-file-v3/#build</a></li><li>Workflow: <a href="https://github.com/guzhongren/Powerboard/blob/main/.github/workflows/main.yml" rel="noopener noreferrer">https://github.com/guzhongren/Powerboard/blob/main/.github/workflows/main.yml</a></li></ol>
            </div>]]></description></item><item><title>依旧免费使用 Docker Desktop 的方案</title><link>https://guzhongren.github.io/2022/01/%E4%BE%9D%E6%97%A7%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8docker-desktop%E7%9A%84%E6%96%B9%E6%A1%88/</link><pubDate>Fri, 14 Jan 2022 19:03:28 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/01/%E4%BE%9D%E6%97%A7%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8docker-desktop%E7%9A%84%E6%96%B9%E6%A1%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/DevOps/docker.desktop.3.5.3.66501.4nfe3o7foow0.webp" referrerpolicy="no-referrer">
            </div><h2 id="缘由">缘由</h2>
<p><a href="https://www.docker.com/">Docker</a><sup>[1]</sup>
 公司在 2021 年 8 月更新了 Docker Desktop 的 <a href="https://docs.docker.com/subscription/#docker-desktop-license-agreement">使用条款</a><sup>[2]</sup>
，决定对大企业（员工超过 250 人或者年收入超过 1 千万美元）用户（包含员工的个人性质使用）开始执行收费订阅的策略，于 2021 年 8 月 31 日生效，同时，给了使用者一个缓冲时间，延续到 2022 年 1 月 31 日，在此之前可以继续免费使用。</p>
<p>很明显，开源公司在这个伸手的年代活不下去了，还有最近比较火的 <a href="https://github.com/Marak/Faker.js">Facker.js</a><sup>[3]</sup>
 删库事件。对删库这事多说几句，因为自家火灾，作者房子被烧了，然后他想让使用自己辛辛苦苦免费维护的 Facker.js 的这些商业公司来为自己捐款改善自己的生活环境，并继续维护 Facker.js, 但很多公司不鸟他，他只能删库来抱怨。要说呀，用这些库的人的人都是开发者，安装完你开发的库，然后就开开心心的写代码去了，除非不会用的库，不然没人去看你的 README 的。更何况你仓库边上的捐款信息。</p>
<h2 id="问题">问题</h2>
<p>如果你现在下载最新的或者旧版的 Docker 安装包，安装包的使用条款都已经被悄悄的动了手脚，里面的 Liscense 的条款已经有了上面说的内容了。所以说你还是会被要求收费的。除非你在一个小公司，人数和收入不在条款之内，那你就开心的用吧。</p>
<p>但是还有一部分人就在这个条款的要求范围之内了。</p>
<blockquote>
<p>安全无小事。</p></blockquote>
<blockquote>
<p>雪崩的时候，没有一片雪花是无辜的。</p></blockquote>
<p>市面上还是有不少 Docker 的替代方案，比如 <a href="https://github.com/containers/podman">podman</a><sup>[4]</sup>
, <a href="https://github.com/lima-vm/lima">lima</a><sup>[5]</sup>
 和 <a href="https://github.com/abiosoft/colima">colima</a><sup>[6]</sup>
, 但用起来却没有 Docker 这么流畅，舒服。</p>
<h2 id="解决方案">解决方案</h2>
<p>使用 2021 年 8 月 30 日之前的任何版本都是可以的，所以下载之前的旧版并且不升级就可以了。</p>
<h3 id="安装旧版-docker-desktop">安装旧版 Docker Desktop</h3>
<p>我在百度网盘有备份 Mac 版 3.5.2 版本的 Docker Desktop 副本，可以下载安装。</p>
<blockquote>
<p>链接：https://pan.baidu.com/s/1nmJezbYx8BmexK6eVXihtg 提取码：gedn</p></blockquote>
<p>如果觉得慢，恰好我也有空，我可以将我本地的副本直接隔空给你。</p>
<h3 id="验证安装的-docker-副本的修改时间">验证安装的 Docker 副本的修改时间</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">    ~/Downloads                                                                               19:54:48 
</span></span><span class="line"><span class="cl">❯ ls -al /Applications/Docker.app/Contents/Resources/LICENSE.rtf /Applications/Docker.app/Contents/MacOS/Docker
</span></span><span class="line"><span class="cl">.rwxr-xr-x zhongren.gu admin <span class="m">16</span> MB Thu Jul  <span class="m">8</span> 01:58:59 <span class="m">2021</span>  /Applications/Docker.app/Contents/MacOS/Docker
</span></span><span class="line"><span class="cl">.rw-r--r-- zhongren.gu admin <span class="m">19</span> KB Thu Jul  <span class="m">8</span> 01:59:00 <span class="m">2021</span>  /Applications/Docker.app/Contents/Resources/LICENSE.rtf</span></span></code></pre></div></div>
<p>可以看到，两个文件最后的修改时间是 2021 年 6 月 8 日，在 2021 年 8 月 30 日之前，所以是符合我们的要求的。</p>
<h3 id="禁止-docker-升级">禁止 Docker 升级</h3>
<p>安装完旧版的 Docker 之后，要禁止 Docker 升级，这样，Docker 的使用条款就永远是旧的，Docker 的律师也拿你没办法喽。</p>
<p>在这通过命令行修改 host 文件，使 <code>desktop.docker.com</code> 指向 <code>127.0.0.1</code>, 不然 Docker 升级服务访问真正的 Docker 服务器。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;127.0.0.1 desktop.docker.com&#39;</span> <span class="p">|</span> sudo tee -a /etc/hosts</span></span></code></pre></div></div>
<h3 id="验证未升级">验证未升级</h3>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/DevOps/docker.desktop.3.5.3.66501.4nfe3o7foow0.webp" alt="docker.desktop.3.5.2.66501" /></p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Docker: <a href="https://www.docker.com/" rel="noopener noreferrer">https://www.docker.com/</a></li><li>使用条款: <a href="https://docs.docker.com/subscription/#docker-desktop-license-agreement" rel="noopener noreferrer">https://docs.docker.com/subscription/#docker-desktop-license-agreement</a></li><li>Facker.js: <a href="https://github.com/Marak/Faker.js" rel="noopener noreferrer">https://github.com/Marak/Faker.js</a></li><li>podman: <a href="https://github.com/containers/podman" rel="noopener noreferrer">https://github.com/containers/podman</a></li><li>lima: <a href="https://github.com/lima-vm/lima" rel="noopener noreferrer">https://github.com/lima-vm/lima</a></li><li>colima: <a href="https://github.com/abiosoft/colima" rel="noopener noreferrer">https://github.com/abiosoft/colima</a></li></ol>
            </div>]]></description></item><item><title>使用 jsdelivr 来加速 Github 资源访问</title><link>https://guzhongren.github.io/2022/01/%E4%BD%BF%E7%94%A8jsdelivr%E6%9D%A5%E5%8A%A0%E9%80%9Fgithub%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE/</link><pubDate>Wed, 05 Jan 2022 21:13:15 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/01/%E4%BD%BF%E7%94%A8jsdelivr%E6%9D%A5%E5%8A%A0%E9%80%9Fgithub%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.pexels.com/photos/4781064/pexels-photo-4781064.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;w=500" referrerpolicy="no-referrer">
            </div><h2 id="遇到的问题">遇到的问题</h2>
<p>22 年又开始了，西安 ZF 的防疫政策真的是在全国人民面前一遍又一遍的刷出了新的高度，过了魔幻的 2020，又过了艰难的 2021，2022，感觉你都找不到个合适的词来形容了。</p>
<p>最近西安大数据局搞得二维码已经连续崩溃两次了，更可笑的是自吹自擂的说把 1M 的图片优化到 500kB, 又艰难的优化到 100KB, 真的是艰难的不行，难道用 base64 算法搞成字符串会超过 10kB 么？还有把对外的图片放在了自己的服务器上，没有用到 CDN, 简直了，更何况是自己 host 的图片。一个字：简直了。</p>
<p>最近在优化我们组自己构建的开源项目 <a href="https://github.com/Apollo-for-fun/Powerboard">Powerboard</a><sup>[1]</sup>
 的使用体验。经过一遍遍的优化，我们现在的策略是将 token 和 config 放在 URL 中，config 是存储配置的 URL。目前，我们将 config 存放在 GitHub 的 <a href="https://gist.github.com/">Gist</a><sup>[2]</sup>
 上。</p>
<p>但是这有个问题，就是 Gist 的访问在国内被墙了，被🧱了，被🧱了；而且 GitHub 的资源访问也比较慢。</p>
<h2 id="前置知识">前置知识</h2>
<blockquote>
<p>内容分发网络（英语：Content Delivery Network 或 Content Distribution Network，缩写：CDN）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。 &mdash;- wikipedia</p></blockquote>
<h2 id="解决方案">解决方案</h2>
<p>之前想过提高 GitHub 资源的下载速度，了解过各种 GitHub 资源的 Proxy。比如</p>
<ul>
<li><code>https://hub.fastgit.org</code></li>
<li><code>https://github.com.cnpmjs.org</code></li>
<li>本地配置代理等</li>
</ul>
<p>对于<code>hub.fastgit.org</code>, 在将 raw 资源地址配置到 URL 中后并不能直接获取到配置信息，存在跨域的问题。对此还有一个开源的代理方案，那就是<code>jsdelivr</code>。</p>
<h3 id="jsdelivr">jsdelivr</h3>
<p><a href="https://github.com/jsdelivr/jsdelivr">jsdelivr</a><sup>[3]</sup>
 是为 npm, GitHub, JavaScript 和 ESM 加速构建的免费，快速，可靠的开源 CDN。此开源项目是 <a href="https://prospectone.io/">prospectone</a><sup>[4]</sup>
 公司开源的一个项目，而 prospectone 是在 CDN 方面也是很有经验的技术公司。</p>
<p>从其官网可以看到，jsdelivr CDN 遍布世界，在中国也有很多，更友好的是，在西安也有一个。</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/cdn/cdn-around-the-world.12nesnyias8w.webp" alt="cdn-around-the-world" /></p>
<h4 id="模式">模式</h4>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>https://cdn.jsdelivr.net/gh/{usernameOrOrgName}/{repoName@version}/{filePath}</code></pre></div>
<ul>
<li>usernameOrOrgName: GitHub 用户名或者组织名</li>
<li>repoName: 存储文件的仓库名</li>
<li>@version: Release 版本号；如果不填写使用最新版</li>
<li>filePath: 存储在 GitHub 仓库上的相对路径</li>
</ul>
<h4 id="实现">实现</h4>
<p>创建组织的团队配置仓库，并写入要配置的内容，commit 并 push。</p>
<p>按照上面 jsdelivr 的模式配置路径，效果如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>https://cdn.jsdelivr.net/gh/guzhongren/Buildkite-Dashboard/cypress.json</code></pre></div>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/cdn/cdn-github-data.5f2n2k3it68.webp" alt="jsdelivr 效果" /></p>
<h2 id="总结">总结</h2>
<p>CDN 是加速资源加载的有效方法，虽然我们没有能力去构建一个自己的 CDN, 但可以利用现有方案去解决自己的问题。只是需要扩大自己的眼界和提升自己的认知即可。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Powerboard: <a href="https://github.com/Apollo-for-fun/Powerboard" rel="noopener noreferrer">https://github.com/Apollo-for-fun/Powerboard</a></li><li>Gist: <a href="https://gist.github.com/" rel="noopener noreferrer">https://gist.github.com/</a></li><li>jsdelivr: <a href="https://github.com/jsdelivr/jsdelivr" rel="noopener noreferrer">https://github.com/jsdelivr/jsdelivr</a></li><li>prospectone: <a href="https://prospectone.io/" rel="noopener noreferrer">https://prospectone.io/</a></li></ol>
            </div>]]></description></item><item><title>工作的常态是被打断</title><link>https://guzhongren.github.io/2021/12/%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%B8%B8%E6%80%81%E6%98%AF%E8%A2%AB%E6%89%93%E6%96%AD/</link><pubDate>Sat, 25 Dec 2021 09:21:11 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/12/%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%B8%B8%E6%80%81%E6%98%AF%E8%A2%AB%E6%89%93%E6%96%AD/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="场景">场景</h2>
<p>最近西安疫情比较严重，不到一个月已经近 200 例了，而我也被确诊病例轨迹重重包围了；疫情刚开始我司就决定让大家居家办公，一直到现在；居家办公已经不是第一次了，但是在居家办公这个过程中，每个人都会遇到这样或者那样的事，今天就来说说，工作的常态就是被打断，以及如何有效的解决被打断这个问题。</p>
<p>早上，打开电脑，兴致勃勃的输入电脑密码，开始工作，文档和代码写的正酣，突然来了一个电话，电话那头劈头盖脸的来说你做一下这个那个，没有任何上下文，一个字就是“跟着我说的干“, 然而电话挂了，你也懵逼了，隐隐约约只记下了几个关键点。然而，看到自己的工作，始终想不起自己接下来要搞什么了。“丢了夫人又折兵”的真实写照啊。😇</p>
<p>在工作中不光光是被电话打断，更多的可能是别人突然来找你问问题或者打个招呼；场景各有各的不同，但结果都一样。</p>
<h2 id="解决方案">解决方案</h2>
<blockquote>
<p>在工作中不光光是被电话打断，更多的可能是别人突然来找你问问题或者打个招呼；场景各有各的不同，但结果都一样。</p></blockquote>
<p>对于这类问题，可以有如下解决方案：</p>
<h3 id="task">Task</h3>
<p>分而治之，此方法适用于在工作之前就将工作拆解，待所有的子任务完成后就可以完成整个功能，Task 可以记录在所做的卡上，或者写在某个 App 上，比如 Conflunence 或者 Trello 上都有 Tasklist 功能，很方便记录📝, 大致结构如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-todo">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-todo" data-lang="todo">- [x] subTask1
- [ ] subTask2
- [ ] subTask3</code></pre></div>
<h3 id="todo">ToDo</h3>
<p>如果没有地方记录，那么就可以找些 App 来记录，我常用的是 Microsoft-ToDo, 对于工作之外的事务，我都是列在上面；当完成一个小功能就点一下对应的子任务，直到所有的子功能完成，那么大目标也就完成了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Microsoft-ToDo/microsoft-todo.4ir7qvpwrw20.png" alt="microsoft-todo" /></p>
<h2 id="实践">实践</h2>
<p>万事都有章法。分析系统有 C4 Model 等，做事可以 <code>分而治之</code>。
当有人打电话或者突然来找你的时候，先来一句 “稍等”, 然后默默写下自己的 ToDo/Task 或者确认一下自己的 Task 已勾选，等到接完电话或者聊完天，只要瞅一眼 Todo 或者 Task 就又可以愉快的开始了。</p>
]]></description></item><item><title>性能优化 Accept-Encoding</title><link>https://guzhongren.github.io/2021/10/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-accept-encoding/</link><pubDate>Wed, 20 Oct 2021 21:43:03 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/10/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-accept-encoding/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/accept-encoding.6zr4vfosvjk0.png" referrerpolicy="no-referrer">
            </div><h2 id="以前的网页请求">以前的网页请求</h2>
<div class="mermaid" id="id-1"></div>
<h2 id="人类总是在追求快更快">人类总是在追求快，更快</h2>
<p>随着带宽和基础设施的快速发展，网页显示速度也有迫切需求，随之，就出现了各种各样加速显示网页的技术。</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>HTTP compression<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><strong>HTTP compression</strong> is a capability that can be built into web servers and web clients to improve transfer speed and bandwidth utilization.  &ndash;wikipedia</div>
        </div>
    </div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Content Negotiation<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>In HTTP, content negotiation is the mechanism that is used for serving different representations of a resource to the same URI to help the user agent specify which representation is best suited for the user (for example, which document language, which image format, or which content encoding).</p>
<p>在 HTTP 协议中，内容协商是这样一种机制，通过为同一 URI 指向的资源提供不同的展现形式，可以使用户代理选择与用户需求相适应的最佳匹配（例如，文档使用的自然语言，图片的格式，或者内容编码形式）。</p>
</div>
        </div>
    </div>
<h2 id="内容协商的基本原则">内容协商的基本原则</h2>
<blockquote>
<p>一份特定的文件称为一项资源。当客户端获取资源的时候，会使用其对应的 URL 发送请求。服务器通过这个 URL 来选择它指向的资源的某一变体——每一个变体称为一种展现形式——然后将这个选定的展现形式返回给客户端。整个资源，连同它的各种展现形式，共享一个特定的 URL 。当一项资源被访问的时候，特定展现形式的选取是通过内容协商机制来决定的，并且客户端和服务器端之间存在多种协商方式。</p></blockquote>
<p><img src="https://mdn.mozillademos.org/files/13789/HTTPNego.png" alt="Content Negotiation Principle" /></p>
<h3 id="内容协商类别">内容协商类别</h3>
<div class="mermaid" id="id-2"></div>
<p>随着时间的推移，也有其他一些内容协商的提案被提出来，比如透明内容协商以及 Alternates 首部。但是它们都没有获得人们的认可从而被遗弃。</p>
<h3 id="服务端驱动型内容协商机制流程">服务端驱动型内容协商机制流程</h3>
<div class="mermaid" id="id-3"></div>
<p>当客户端携带消息头（header）发送请求给服务端后，服务端使用消息头里的指定的可接受的压缩方式，自己通过内部特定的算法，找出最佳的压缩方案，然后将数据压缩并返回给客户端。</p>
<p><img src="https://mdn.mozillademos.org/files/13791/HTTPNegoServer.png" alt="HTTPNegoServer" /></p>
<h4 id="用于启动服务端驱动型内容协商标准消息头">用于启动服务端驱动型内容协商标准消息头</h4>
<div class="mermaid" id="id-4"></div>
<p>这些消息头都是可以带有 Q 因子的清单；比如</p>
<table>
  <thead>
      <tr>
          <th>Item</th>
          <th>Example</th>
          <th>Note</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Accept</td>
          <td></td>
          <td>在获取 HTML 页面、图片文件、视频文件或者是脚本文件的时候，无论是通过在地址栏中输入资源地址来获取还是通过<code>&lt;img&gt;</code>、<code>&lt;video&gt;</code> 或 <code>&lt;audio&gt;</code> 元素引用都是不一样的。浏览器可以自由使用它们认为最为合适的首部值；</td>
      </tr>
      <tr>
          <td>Accept-Charset</td>
          <td><code>ISO-8859-1,utf-8;q=0.7,*;q=0.7</code></td>
          <td>如今 UTF-8 编码已经得到了广泛的支持，成为首选的字符编码类型，为了通过减少基于配置信息的信息熵来更好地保护隐私信息， 大多数浏览器会将 Accept-Charset 首部移除：Internet Explorer 8、Safari 5、Opera 11 以及 Firefox 10 都已经不再发送该首部。</td>
      </tr>
      <tr>
          <td>Accept-Encoding</td>
          <td><code>br, gzip;q=0.8</code></td>
          <td>将 HTTP 消息进行压缩是一种最重要的提升 Web 站点性能的方法。该方法会减小所要传输的数据量的大小，节省可用带宽。浏览器总是会发送该首部，服务器则应该配置为接受它，并且采用一定的压缩方案。</td>
      </tr>
      <tr>
          <td>Accept-Language</td>
          <td><code>de, en;q=0.7</code></td>
          <td>用户代理的图形界面上所采用的语言通常可以用来设置为默认值，但是大多数浏览器允许设置不同优先级的语言选项。</td>
      </tr>
  </tbody>
</table>
<p>某些情况下，服务器会使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Vary">Vary</a><sup>[1]</sup>
 消息头来说明实际上哪些消息头被用作内容协商的参考依据（确切来说是与之相关的响应消息头），这样可以使 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching">缓存</a><sup>[2]</sup>
 的运作更有效。</p>
<h4 id="vary-响应首部">Vary 响应首部</h4>
<p>前面列举的 Accept-* 形式的首部都是由客户端 (Web Client) 给服务端的，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Vary">Vary</a><sup>[1]</sup>
 首部是由服务器在响应 (Response) 中发送的。它标示了服务器在服务端驱动型内容协商阶段所使用的首部清单。这个首部是必要的，它是可以用来通知缓存服务器决策的依据，这样它可以进行复现，使得缓存服务器在预防将错误内容提供给用户方面发挥作用。</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Vary<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>如果 Response 中 Vary 的值是&rsquo;*&rsquo;， 那么意味着在服务端驱动型内容协商过程中同时采纳了未在首部中传递的信息来选择合适的内容。</li>
<li>并且 Vary 的值是区分大消息的。</li>
</ul>
</div>
        </div>
    </div>
<h3 id="代理驱动型内容协商机制">代理驱动型内容协商机制</h3>
<p><img src="https://mdn.mozillademos.org/files/13795/HTTPNego3.png" alt="代理驱动型内容协商机制" /></p>
<p>服务端驱动型内容协商机制由于一些缺点而为人诟病——它在<strong>规模化</strong>方面存在问题。在协商机制中，每一个特性需要对应一个首部。如果想要使用屏幕大小、分辨率或者其他方面的特性，就需要创建一个新的首部。而且在每一次请求中都必须发送这些首部。在首部很少的时候，这并不是问题，但是随着数量的增多，消息体的体积会导致性能的下降。带有精确信息的首部发送的越多，信息熵就会越大，也就准许了更多 HTTP 指纹识别行为，以及与此相关的<strong>隐私问题</strong>的发生。</p>
<p>从 HTTP 协议制定之初，该协议就准许另外一种协商机制：代理驱动型内容协商机制，或称为响应式协商机制。<em>在这种协商机制中，当面临不明确的请求时，服务器会返回一个页面，其中包含了可供选择的资源的链接。资源呈现给用户，由用户做出选择。</em></p>
<p>不幸的是，HTTP 标准没有明确指定提供<strong>可选资源链接的页面的格式</strong>，这一点阻碍了将这一过程无痛自动化。除了退回至服务端驱动型内容协商机制外，这种自动化方法几乎无一例外都是通过<strong>脚本技术</strong>来完成的，尤其是 JavaScript 重定向技术：在检测了协商的条件之后，脚本会触发重定向动作。另外一个问题是，为了获得实际的资源，需要<strong>额外发送一次请求</strong>，<strong>减慢了将资源呈现给用户的速度</strong>。</p>
<h2 id="accept-encoding">Accept-Encoding</h2>
<p>HTTP Request Header 中的 <code>Accept-Encoding</code> 会将客户端（e.g. 浏览器）能够理解的内容编码方式（通常是某种压缩算法）通知给服务端。通过内容协商的方式，服务端会选择一个客户端提议的方式，使用并在响应头 Content-Encoding 中通知客户端该选择。</p>
<h3 id="压缩的好处">压缩的好处</h3>
<p>http 压缩对纯文本可以压缩至原内容的 40%, 从而节省了 60%的数据传输。</p>
<p>实例：访问我的博客网站，可以看到是进过 gzip 压缩的，原始大小为 34kB, 经过压缩后为 7.3kB，只有原先的 21%，在带宽上有很大的性能提升。</p>
<p>文件大小</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/gzip.5ibqmeja92c0.png" alt="gzip" /></p>
<p>gzip 压缩</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/accept-encoding.6zr4vfosvjk0.png" alt="accept-encoding" /></p>
<h3 id="gzip-的缺点">Gzip 的缺点</h3>
<p>JPEG 这类文件用 gzip 压缩的不够好。</p>
<h3 id="gzip-是如何压缩的">Gzip 是如何压缩的</h3>
<p>简单来说， Gzip 压缩是在一个文本文件中找出类似的字符串， 并临时替换他们，使整个文件变小。这种形式的压缩对 Web 来说非常适合， 因为 HTML 和 CSS 文件通常包含大量的重复的字符串，例如空格，标签。</p>
<h3 id="语法">语法</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-http">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="line"><span class="cl"><span class="err">Accept-Encoding: gzip
</span></span></span><span class="line"><span class="cl"><span class="err">Accept-Encoding: compress
</span></span></span><span class="line"><span class="cl"><span class="err">Accept-Encoding: deflate
</span></span></span><span class="line"><span class="cl"><span class="err">Accept-Encoding: br
</span></span></span><span class="line"><span class="cl"><span class="err">Accept-Encoding: identity
</span></span></span><span class="line"><span class="cl"><span class="err">Accept-Encoding: *
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">// Multiple algorithms, weighted with the quality value syntax:
</span></span></span><span class="line"><span class="cl"><span class="err">Accept-Encoding: deflate, gzip;q=1.0, *;q=0.5</span></span></span></code></pre></div></div>
<table>
  <thead>
      <tr>
          <th>Accept-Encoding type</th>
          <th>Note</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>gzip</td>
          <td>表示采用 <a href="http://en.wikipedia.org/wiki/LZ77_and_LZ78#LZ77">Lempel-Ziv coding (LZ77)</a><sup>[3]</sup>
 压缩算法，以及 32 位 CRC 校验的编码方式。gzip 是 GNU zip 的缩写，是 GNU 自由软件的文件压缩程序，也用来表示 gzip 文件格式。<strong>浏览器支持的比较好</strong>。</td>
      </tr>
      <tr>
          <td>compress</td>
          <td>采用 <a href="http://en.wikipedia.org/wiki/LZW">Lempel-Ziv-Welch (LZW)</a><sup>[4]</sup>
 压缩算法。</td>
      </tr>
      <tr>
          <td>deflate</td>
          <td>采用 <a href="http://en.wikipedia.org/wiki/Zlib">zlib</a><sup>[5]</sup>
 结构和 <a href="http://en.wikipedia.org/wiki/DEFLATE">deflate</a><sup>[6]</sup>
 压缩算法。使用 LZ77 算法于哈夫曼编码（Huffman Coding）的一种无损压缩算法</td>
      </tr>
      <tr>
          <td>br</td>
          <td>表示采用 <a href="https://en.wikipedia.org/wiki/Brotli">Brotli</a><sup>[7]</sup>
 算法的编码方式。</td>
      </tr>
      <tr>
          <td>identity</td>
          <td>用于指代自身（例如：未经过压缩和修改）。除非特别指明，这个标记始终可以被接受。</td>
      </tr>
      <tr>
          <td>*</td>
          <td>匹配其他任意未在该请求头字段中列出的编码方式。假如该请求头字段不存在的话，这个值是默认值。它并不代表任意算法都支持，而仅仅表示算法之间无优先次序。</td>
      </tr>
      <tr>
          <td>;q= （权重系数）</td>
          <td>值代表优先顺序，用相对 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Quality_values">权重系数</a><sup>[8]</sup>
 表示，又称为质量价值。</td>
      </tr>
  </tbody>
</table>
<h3 id="示例">示例</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-http">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="line"><span class="cl"><span class="err">Accept-Encoding: gzip
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">Accept-Encoding: gzip, compress, br
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">Accept-Encoding: br;q=1.0, gzip;q=0.8, *;q=0.1</span></span></span></code></pre></div></div>
<h3 id="浏览器兼容性">浏览器兼容性</h3>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/caniuse.com_mdn-http_headers_accept-encoding.6p6klanhkcw0.png" alt="caniuse" /></p>
<h2 id="最佳实践">最佳实践</h2>
<p>对于 Accept-Encoding, 这个除了是后端请求，其他的只能由浏览器来自行设定，建议使用最新的浏览器即可。</p>
<p>对于 content-encoding 这个 header 只能由服务器来指定。针对不同的环境如 Nginx, Apache Tomcat 和 IIS 等，都有不同的配置，这里以 Nginx 为例，在 Nginx 的 *.conf 文件中加入如下代码即可。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-diff">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl">[root@linux /]# vim /usr/local/nginx/conf.d/www.conf
</span></span><span class="line"><span class="cl">server {
</span></span><span class="line"><span class="cl">  listen 80;
</span></span><span class="line"><span class="cl">  server_name www.endvv.com endvv.com;
</span></span><span class="line"><span class="cl">  root html/bk;
</span></span><span class="line"><span class="cl">  index index.php index.html;
</span></span><span class="line"><span class="cl">  access_log /usr/local/nginx/logs/www.log ;
</span></span><span class="line"><span class="cl">  include /usr/local/nginx/php/www.conf;
</span></span><span class="line"><span class="cl">  include /usr/local/nginx/wjt/typecho.conf;
</span></span><span class="line"><span class="cl"><span class="gi">+ gzip on;
</span></span></span><span class="line"><span class="cl"><span class="gi">+ gzip_buffers 4 16k;
</span></span></span><span class="line"><span class="cl"><span class="gi">+ gzip_comp_level 6;
</span></span></span><span class="line"><span class="cl"><span class="gi">+ gzip_vary on;
</span></span></span><span class="line"><span class="cl"><span class="gi">+ gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
</span></span></span><span class="line"><span class="cl"><span class="gi"></span>}
</span></span></code></pre></div></div>
<div class="references">
                <h2>参考</h2>
                <ol><li>Vary: <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Vary" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Vary</a></li><li>缓存: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching</a></li><li>Lempel-Ziv coding (LZ77): <a href="http://en.wikipedia.org/wiki/LZ77_and_LZ78#LZ77" rel="noopener noreferrer">http://en.wikipedia.org/wiki/LZ77_and_LZ78#LZ77</a></li><li>Lempel-Ziv-Welch (LZW): <a href="http://en.wikipedia.org/wiki/LZW" rel="noopener noreferrer">http://en.wikipedia.org/wiki/LZW</a></li><li>zlib: <a href="http://en.wikipedia.org/wiki/Zlib" rel="noopener noreferrer">http://en.wikipedia.org/wiki/Zlib</a></li><li>deflate: <a href="http://en.wikipedia.org/wiki/DEFLATE" rel="noopener noreferrer">http://en.wikipedia.org/wiki/DEFLATE</a></li><li>Brotli: <a href="https://en.wikipedia.org/wiki/Brotli" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Brotli</a></li><li>权重系数: <a href="https://developer.mozilla.org/en-US/docs/Glossary/Quality_values" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Glossary/Quality_values</a></li></ol>
            </div>]]></description></item><item><title>Container Image Scanner - Trivy</title><link>https://guzhongren.github.io/2021/10/container-image-scanner-trivy/</link><pubDate>Mon, 11 Oct 2021 21:09:25 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/10/container-image-scanner-trivy/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/Group%2052.5gp1z5ybbps0.png" referrerpolicy="no-referrer">
            </div><h2 id="abstract">Abstract</h2>
<p>In modern software development, we leverage public images as base images to build up applications images quickly and deploy them into the production environment.</p>
<p>With more and more applications containerized, container security is also becoming more important. To use vulnerability scanners, we can bring forward the security feedback cycle which is traditionally done towards the end. This aligns closely with our belief that by adopting agile, we will be able to get faster feedback. This is what we are doing in order to achieve it.</p>
<h2 id="pain-points-on-application-environment-security">Pain points on application environment security</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/Group%2052.5gp1z5ybbps0.png" alt="Pain points on application environment security" /></p>
<p>Now, we use advanced technology to build up our application, like NodeJS, Java and so on,  then store the code repository on git platforms like GitHub, Gitlab and so on. Code repository consists of our code and dependencies; For dependencies, we can use tools to ensure security like npm audit of NodeJS, and Dependabot of GitHub; And for our business code, there is another security tool to scan, like <a href="https://www.sonarqube.org/">SoneQube</a><sup>[1]</sup>
.</p>
<p>So, for the dependencies and our business code, those things are under our control, we can ensure the application’s security and get fast feedback and build confidence by using all kinds of tools before we deploy our application into the production environment. As you know, the basic system environment which our application runs is out of our control. Let’s consider from the opposite side, if we can’t ensure the security of our application and its system environment, it will lead to unexpected problems, like hackers attack, leakage of user information, property loss, what&rsquo;s more, cause damage to the reputation of the company. So, it is important to ensure the security of our product.</p>
<h2 id="the-value-of-keeping-container-image-secure">The value of keeping container image secure</h2>
<h3 id="protect-the-clients-property-and-reputation">Protect the client&rsquo;s property and reputation</h3>
<p>We supply professional services for our client, so we must ensure every line of code is reliable and secure. Because code is property and reputation. For ourselves, just ensure the security of code, and the environment of application, the client can achieve the maximum benefit.</p>
<h3 id="build-our-respected-brand">Build our respected brand</h3>
<p>The work we do is to make our clients succeed. Only if our customers succeed, we can succeed. So, we did not only archive business value, but also protect the security of the product.</p>
<h2 id="best-2-solutions-to-keep-container-images-secure">Best 2 solutions to keep container images secure</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/Group%2050.1czb512thukg.png" alt="Best 2 solutions to keep container images secure" /></p>
<h3 id="solution-1-scan-the-image-at-a-regular-time-in-the-image-registry">Solution 1: Scan the image at a regular time in the image registry</h3>
<p>In this way, we need to add a security scanner for the images&rsquo; registry. The scanner might be a cron job or an operable step that can be triggered by the operator.</p>
<p>It will be automatically triggered by a cron job when a special time. For example, docker hub scans their official registry at a special time, it will send an alert to the organizer when there are any vulnerabilities.</p>
<h3 id="solution-2-integrate-the-scanner-within-your-cicd-pipeline">Solution 2: Integrate the scanner within your CI/CD pipeline</h3>
<p>In another way, we can scan the image product in the pipeline, it is more simple and efficient. The pipeline will automatically execute the command that scans the image when we push code to the code repository.  Because the pipeline scans the product mechanically for every time, so we can find any security problem and fix it in time.</p>
<p>Now, more and more teams or groups use agile to develop their projects. If we can find any vulnerabilities as early as possible, we can reduce the risk of the product before the product is published. The pipeline is a good tool to ensure the security of your product every line of code because it can automatically execute when you commit your code.</p>
<h2 id="container-image-scanner-comparison">Container image scanner comparison</h2>
<p>For the above solution, we surveyed several scanner tools, like <a href="https://github.com/aquasecurity/trivy">Trivy</a><sup>[2]</sup>
,<a href="https://github.com/quay/clair">Claire</a><sup>[3]</sup>
, <a href="https://github.com/anchore/anchore-engine">Anchore Engine</a><sup>[4]</sup>
, <a href="https://github.com/quay/quay">Quay</a><sup>[5]</sup>
,<a href="https://hub.docker.com/">Docker Hub</a><sup>[6]</sup>
 and <a href="https://cloud.google.com/container-registry">GCR</a><sup>[7]</sup>
. We made a comparison from different dimensions.</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Scanner</th>
          <th style="text-align: left">OS packages</th>
          <th style="text-align: left">Application dependencies</th>
          <th style="text-align: left">Easy to use</th>
          <th style="text-align: left">Accuracy</th>
          <th style="text-align: left">Suitable for CI</th>
          <th style="text-align: left">Suitable for Solution</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Trivy</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">⭐ ⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐ ⭐</td>
          <td style="text-align: left">2</td>
      </tr>
      <tr>
          <td style="text-align: left">Clair</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">⭐</td>
          <td style="text-align: left">⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐</td>
          <td style="text-align: left">2</td>
      </tr>
      <tr>
          <td style="text-align: left">Anchore Engine</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐ ⭐</td>
          <td style="text-align: left">2</td>
      </tr>
      <tr>
          <td style="text-align: left">Quay</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">⭐ ⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">1</td>
      </tr>
      <tr>
          <td style="text-align: left">Docker Hub</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">⭐⭐⭐</td>
          <td style="text-align: left">⭐</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">1</td>
      </tr>
      <tr>
          <td style="text-align: left">GCR</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">⭐ ⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">1</td>
      </tr>
  </tbody>
</table>
<p>Firstly we can separate those scanners into 2 parts suitable for solution, the Trivy, Clair, Anchore Engine, and Quay are suitable for solution, the others are suitable for solution 1.</p>
<p>For the first dimension: OS package, those scanners can do it, but for the second dimension: Application dependence, just only Trivy and Anchore engine can do it, and for the fifth dimension is it suitable for ci; only the first three left.</p>
<p>For the Trivy, Clair, and Anchore Engine, the communities of these three are very active, so we could not care about anyone to solve your issues; And as a tool, it must be easy to use and there is good documentation to reference. The documentation of Trivy is very detailed and very friendly. But for the vulnerability database, Clair ingests vulnerability metadata at regular intervals from a configured set of sources and stores the data in its database. Trivy and Anchore Engine will download the latest vulnerability metadata and cache it in a local file,
it will check the update to keep the metadata latest when the tool runs again. At the same time, the usage of Trivy is more friendly, because we can filter the different severity which you can specify, but it is not allowed for Anchore Engine.</p>
<p>March 16, 2020, Aqua Security, the leading platform provider for securing cloud-native applications and infrastructure, announced today that its open-source Trivy vulnerability scanner is being added as an integrated option in widely used cloud-native platforms, CNCF’s Harbor registry and Mirantis Docker Enterprise.  You can find this post <a href="https://blog.aquasec.com/trivy-vulnerability-scanner-joins-aqua-family">here</a><sup>[8]</sup>
.</p>
<h2 id="trivy-in-thoughtworks-technology-radar-volume-23">Trivy in Thoughtworks Technology radar volume 23</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/trivy-tw-radar.2543ysqo6wf4.png" alt="Trivy in TW tech radar" /></p>
<p>Thoughtworks Technology Radar is famous for accurately responding to technological trends; In the latest technology radar, Thoughtworks put the Trivy into the <strong>adopt</strong> area, which means Trivy is useful, valuable and practicable.</p>
<h2 id="inner-working-of-trivy">Inner working of Trivy</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/Group%2051.4icjkydqu3s0.png" alt="Inner working of Trivy" /></p>
<p>Before we use Trivy, we need to know how Trivy works inside. As you see, there are 2 steps; first, we run the Trivy command, Trivy will download the vulnerability DB from the <a href="https://nvd.nist.gov">NVD</a><sup>[9]</sup>
 website into the local machine. And then Trivy uses the vulnerability data to scan every layer of your image.</p>
<h2 id="how-to-use-trivy">How To Use Trivy</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/trivy-in-pipeline.6ksfsma323c0.png" alt="trivy in pipeline" /></p>
<h3 id="pipeline">Pipeline</h3>
<p>Now we have to know how Trivy works inside, we can integrate it into our pipeline; you can see this pipeline, first, we build code into docker image, next, Trivy will check the vulnerabilities in the docker image that build from the last step; if there is no vulnerability, the image will be pushed to the image registry and deploy it to the production environment. If there are some vulnerabilities, the pipeline will be broken by the Trivy command line, you need to fix the vulnerability to make the pipeline green.</p>
<h3 id="usage-of-trivy">Usage of Trivy</h3>
<p>Before we write code to integrate, we have to know how to use Trivy. As we know, Trivy is a binary application, so we can use it in the command line. At the same time, Trivy provides its docker image, so we can easily setup it and use it, the command is as follows. For this command, we need to highlight some parameters.</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ docker run --rm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v /var/run/docker.sock:/var/run/docker.sock <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  aquasec/trivy <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  image <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --exit-code <span class="m">1</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ignore-unfixed <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --severity HIGH,CRITICAL <span class="si">${</span><span class="nv">YOUR_IMAGE</span><span class="si">}</span></span></span></code></pre></div></div>
<ul>
<li>-v /var/run/docker.sock:/var/run/docker.sock  If you would like to scan the image on your local host machine, you need to mount docker.sock</li>
<li>&ndash;ignore-unfixed Ignore the unfixed issue of vulnerability; If there are some unfixed vulnerabilities, trivy will ignore those vulnerabilities</li>
<li>&ndash;severity Set the vulnerability level which you want to scan</li>
<li>&ndash;exit-code Status of trivy when vulnerabilities were found (default: 0). In the pipeline if you set the value to 1, the pipeline will exit and not run continually if you set it to 0, the pipeline will continually run but report the result. So, if you wanna break the pipeline, you can set it to 1.</li>
</ul>
<p>For more information about the arguments and other usages with different ways, please visit the website of Trivy organization by this link: <a href="https://github.com/aquasecurity/trivy">https://github.com/aquasecurity/trivy</a><sup>[2]</sup>
.</p>
<h3 id="demo">Demo</h3>
<p>Below is a demo to show how the trivy breaks the pipeline and what happens when we fix the issues; This project is about to build a Buildkite dashboard, it will filter the built information of your organization which you specify. We use Github actions to build application and setup the Trivy in the pipeline;</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Trivy scanner</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      docker run --rm \
</span></span></span><span class="line"><span class="cl"><span class="sd">      -v /var/run/docker.sock:/var/run/docker.sock \
</span></span></span><span class="line"><span class="cl"><span class="sd">      aquasec/trivy image \
</span></span></span><span class="line"><span class="cl"><span class="sd">      --severity HIGH,CRITICAL \
</span></span></span><span class="line"><span class="cl"><span class="sd">      --exit-code 1 \
</span></span></span><span class="line"><span class="cl"><span class="sd">      dashboard:${{ github.sha }}</span></span></span></code></pre></div></div>
<p>In this build job, we use <a href="https://hub.docker.com/_/nginx">Nignx:1.18</a><sup>[10]</sup>
 as a base image to build application images. This build failed because there are some vulnerabilities.</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/trivy-dashboard-failed.4bffhau2xvk0.png" alt="Trivy Dashboard Failed" /></p>
<p>Now, we must fix this issue to continue delivery. There are 2 steps to do, firstly, we should use the latest Nginx image as a base image; secondly, we could ignore unfixed vulnerabilities, because maybe we are unable to fix vulnerabilities at the system level. You can review the change of code by clicking this link:
<a href="https://github.com/guzhongren/Buildkite-Dashboard/commit/90182b9b3770aeb28a6e566208334dd0c6f8f725#annotation_843974303">https://github.com/guzhongren/Buildkite-Dashboard/commit/90182b9b3770aeb28a6e566208334dd0c6f8f725#annotation_843974303</a><sup>[11]</sup>
</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/trivy-dashboard-successfully.28w37b5otts0.png" alt="Trivy Dashboard Successfully" /></p>
<h2 id="summary">Summary</h2>
<p>Security is a very important issue no matter where you are. We can <strong>Shift Left Security</strong>, so we can reduce the security risk in the production environment; For the scanner tool Trivy,  it is very useful to keep the security of images, it can scan not only images but also git repositories, file systems, etc.</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>SoneQube: <a href="https://www.sonarqube.org/" rel="noopener noreferrer">https://www.sonarqube.org/</a></li><li>Trivy: <a href="https://github.com/aquasecurity/trivy" rel="noopener noreferrer">https://github.com/aquasecurity/trivy</a></li><li>Claire: <a href="https://github.com/quay/clair" rel="noopener noreferrer">https://github.com/quay/clair</a></li><li>Anchore Engine: <a href="https://github.com/anchore/anchore-engine" rel="noopener noreferrer">https://github.com/anchore/anchore-engine</a></li><li>Quay: <a href="https://github.com/quay/quay" rel="noopener noreferrer">https://github.com/quay/quay</a></li><li>Docker Hub: <a href="https://hub.docker.com/" rel="noopener noreferrer">https://hub.docker.com/</a></li><li>GCR: <a href="https://cloud.google.com/container-registry" rel="noopener noreferrer">https://cloud.google.com/container-registry</a></li><li>here: <a href="https://blog.aquasec.com/trivy-vulnerability-scanner-joins-aqua-family" rel="noopener noreferrer">https://blog.aquasec.com/trivy-vulnerability-scanner-joins-aqua-family</a></li><li>NVD: <a href="https://nvd.nist.gov" rel="noopener noreferrer">https://nvd.nist.gov</a></li><li>Nignx:1.18: <a href="https://hub.docker.com/_/nginx" rel="noopener noreferrer">https://hub.docker.com/_/nginx</a></li><li>https://github.com/guzhongren/Buildkite-Dashboard/commit/90182b9b3770aeb28a6e566208334dd0c6f8f725#annotation_843974303: <a href="https://github.com/guzhongren/Buildkite-Dashboard/commit/90182b9b3770aeb28a6e566208334dd0c6f8f725#annotation_843974303" rel="noopener noreferrer">https://github.com/guzhongren/Buildkite-Dashboard/commit/90182b9b3770aeb28a6e566208334dd0c6f8f725#annotation_843974303</a></li></ol>
            </div>]]></description></item><item><title>Container Image Scanner - Trivy</title><link>https://guzhongren.github.io/2021/09/container-image-scanner-trivy/</link><pubDate>Sun, 26 Sep 2021 21:09:25 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/09/container-image-scanner-trivy/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/Group%2052.5gp1z5ybbps0.png" referrerpolicy="no-referrer">
            </div><h2 id="摘要">摘要</h2>
<p>在现代软件开发中， 我们会使用一些公共镜像作为基础镜像来快速构建我们的应用镜像，并将其部署到生产环境中。</p>
<p>随着越来越多的应用程序被容器化，容器安全也随之变得越来越重要。在项目的 Pipeline 中， 我们可以使用漏洞扫描器（Vulnerability Scanners）进行扫描并提前获得反馈，实现 “<strong>安全左移</strong>” ，也可以更好的实践敏捷。</p>
<h2 id="基于容器的应用程序的安全痛点">基于容器的应用程序的安全痛点</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/Group%2052.5gp1z5ybbps0.png" alt="基于容器的应用程序的安全痛点" /></p>
<p>现在，我们使用先进的技术来构建我们的应用程序，如 NodeJS、 Java 和 Kotlin 等，然后将代码库存储在托管的 Git 平台上，如 GitHub、Gitlab 等。代码库由我们的业务代码和依赖关系组成；对于依赖项，我们可以使用专业的扫描工具来确保安全，比如 NodeJS 的 npm audit , GitHub 的 Dependabot；至于我们的业务代码，可以使用其他的一些安全工具可以扫描，比如 <a href="https://www.sonarqube.org/">SoneQube</a><sup>[1]</sup>
 等。</p>
<p>因此，对于依赖（ Dependencies）和我们的业务代码，这些都在我们的控制之下，我们可以确保应用程序的安全性，并且在 Pipeline 上获得快速反馈；同时在我们将应用程序部署到生产环境之前可以通过使用各种工具建立信心。但是，通常情况下我们的应用程序运行的系统环境是不受我们控制的，可能存在潜在的安全漏洞。在这我们可以换位思考一下，如果我们不能保证我们的应用程序运行的系统的环境安全，就会导致各种各样意想不到的问题，如黑客攻击、用户信息泄露、财产损失，更会对公司的声誉造成损害。所以，确保我们产出物（Artifact）的安全是很重要的。</p>
<h2 id="保持容器镜像安全的价值">保持容器镜像安全的价值</h2>
<h3 id="保护客户的财产property和声誉reputation">保护客户的财产（Property）和声誉（Reputation）</h3>
<p>我们为公司或客户提供专业的服务，所以我们必须确保每一行代码都是可靠和安全的。因为代码就是公司或者客户的财产和名誉。作为开发者，只要保证代码及应用程序的环境的安全性，公司或者客户就能获得最大的效益。声誉即价值。</p>
<h3 id="打造受人尊敬的品牌branding">打造受人尊敬的品牌（Branding）</h3>
<p>我们的工作就是让我们的公司或客户成功。只有公司或客户成功，我们才能成功。因此，我们不仅要实现业务价值，还需要保护了产品的安全。用户使用安全的产品或者服务得到更大的价值，公司或者客户的品牌效应就会扩大，从而带来更大的价值。品牌及价值。</p>
<h2 id="保持容器镜像安全的-2-个最佳方案">保持容器镜像安全的 2 个最佳方案</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/Group%2050.1czb512thukg.png" alt="保持容器镜像安全的 2 个最佳方案" /></p>
<h3 id="方案-1-在镜像注册表中定期扫描">方案 1： 在镜像注册表中定期扫描</h3>
<p>通过这种方式，我们需要为镜像注册表添加一个安全扫描程序，扫描程序可以是一个定时任务（Cron Job） 作业，也可以是由特定的人触发的可执行操作。</p>
<p>如果是一个定时任务，它将在特定时刻由定时任务自动触发。例如，Docker Hub 会在特定的时间扫描他们的官方注册表，当有任何漏洞被扫描出来时，它会向镜像维护者发送报警信息。</p>
<h3 id="方案-2将扫描工具集成到-pipeline-中">方案 2：将扫描工具集成到 Pipeline 中</h3>
<p>另一种方法是在 Pipeline 上对镜像产物进行扫描，这样更加简单高效。当我们将代码推送到代码存储库时， Pipeline 将自动执行扫描镜像的命令。因为 Pipeline 每次都是无差别地执行，所以我们可以发现任何安全问题并及时报警修复。</p>
<p>现在，越来越多的团队或公司使用敏捷来开发他们的项目。如果我们能够尽早地发现任何安全问题或者漏洞，我们就可以在产品发布之前降低产品的安全风险。 Pipeline 是确保每一行代码和基础运行环境的安全性是的最好方法之一，因为它可以在提交代码时自动执行。</p>
<h2 id="容器安全扫描工具对比">容器安全扫描工具对比</h2>
<p>针对上述解决方案，我们调查了 <a href="https://github.com/aquasecurity/trivy">Trivy</a><sup>[2]</sup>
、<a href="https://github.com/quay/clair">claire</a><sup>[3]</sup>
、<a href="https://github.com/anchore/anchore-engine">Anchore Engine</a><sup>[4]</sup>
、<a href="https://github.com/quay/quay">Quay</a><sup>[5]</sup>
、<a href="https://hub.docker.com/">Docker hub</a><sup>[6]</sup>
 和 <a href="https://cloud.google.com/container-registry">GCR</a><sup>[7]</sup>
 等几种扫描工具，从不同维度进行对比。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Scanner</th>
          <th style="text-align: left">OS packages</th>
          <th style="text-align: left">Application dependencies</th>
          <th style="text-align: left">Easy to use</th>
          <th style="text-align: left">Accuracy</th>
          <th style="text-align: left">Suitable for CI</th>
          <th style="text-align: left">Suitable for Solution</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Trivy</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">⭐ ⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐ ⭐</td>
          <td style="text-align: left">2</td>
      </tr>
      <tr>
          <td style="text-align: left">Clair</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">⭐</td>
          <td style="text-align: left">⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐</td>
          <td style="text-align: left">2</td>
      </tr>
      <tr>
          <td style="text-align: left">Anchore Engine</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐ ⭐</td>
          <td style="text-align: left">2</td>
      </tr>
      <tr>
          <td style="text-align: left">Quay</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">⭐ ⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">1</td>
      </tr>
      <tr>
          <td style="text-align: left">Docker Hub</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">⭐⭐⭐</td>
          <td style="text-align: left">⭐</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">1</td>
      </tr>
      <tr>
          <td style="text-align: left">GCR</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">⭐ ⭐ ⭐</td>
          <td style="text-align: left">⭐ ⭐</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">1</td>
      </tr>
  </tbody>
</table>
<p>首先，我们可以将这些扫描工具按照其执行的环境简单分类； 因为 Docker Hub、GCR 和 Quay 是需要在服务端也就是容器注册中心运行的， 所以适合方案 1； Trivy、Clair 和 Anchor Engine 可以在 Pipeline 上工作，所以适合解决方案 2。</p>
<p>对于第一个维度：OS Package，这些所有的扫描工具都可以做到，但是对于第二个维度：Application dependencies，只有 Trivy 和 Anchore Engine 可以做到，对于第五个维度：Suitable for CI, 只有前三个符合条件。</p>
<p>对于漏洞数据库的更新，Clair 会定期从一组配置的源中获取漏洞元数据库（Vulnerability Database），并将数据存储在其数据库中，只要不获取最新的漏洞元数据，每次执行都用之前的漏洞数据库，漏洞数据库的时效性有点差。 Trivy 和 Anchore Engine 则是每次运行都将下载最新的漏洞数据库并将其缓存在本地文件中，当扫描工具再次运行时，它将检查并更新数据库以保持数据库为最新状态。</p>
<p>同时，对于 Trivy、Clair 和 Anchore Engine，这三者的社区非常活跃，所以我们不能用没有人来帮你解决你的问题来评判； 而且作为一种工具，它必须易于使用并且有良好的文档可供参考。经过调研，发现 Trivy 的文档非常详细，非常友好， 而且 Trivy 的使用方式更加友好，比如我们可以过滤掉（.trivyignore）你指定的漏洞，对于最新发现的漏洞，官方没有给出修复版本，这时候我们就可以忽略这个漏洞继续构建，但 Anchore Engine 做不到。</p>
<p>2020 年 3 月 16 日，领先的云原生应用和基础设施安全平台供应商 Aqua Security 宣布，其开源的 Trivy 漏洞扫描器将作为一个集成选项添加到其使用的云原生平台、CNCF 的 Harbor 注册表和 Mirantis Docker Enterprise 中。你可以在这里找到这篇文章。</p>
<h2 id="trivy-在-thoughtworks-雷达-23-期中">Trivy 在 Thoughtworks 雷达 23 期中</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/trivy-tw-radar.2543ysqo6wf4.png" alt="Trivy in TW tech radar" /></p>
<p>Thoughtworks 技术雷达以准反应技术趋势而闻名；在最新的技术雷达中，Thoughtworks 将 Trivy 引入了置于 <strong>Adopt</strong>，说明 Trivy 是有用的、有价值的和可行的。</p>
<h2 id="trivy-的工作原理">Trivy 的工作原理</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/Group%2051.4icjkydqu3s0.png" alt="Inner working of Trivy" /></p>
<p>在我们使用 Trivy 之前，我们需要知道 Trivy 内部是如何运作的。如上图所示，有两个步骤；首先，我们运行 Trivy 命令，Trivy 将从 <a href="https://nvd.nist.gov">NVD</a><sup>[8]</sup>
 网站下载漏洞数据库到本地机器。然后， Trivy 利用漏洞数据扫描你的镜像的每一层（Layer）。</p>
<h2 id="实践-trivy">实践 Trivy</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/trivy-in-pipeline.6ksfsma323c0.png" alt="trivy in pipeline" /></p>
<h3 id="pipeline">Pipeline</h3>
<p>现在我们已经知道 Trivy 是如何工作的，我们可以将它集成到我们的 Pipeline 中；首先，将代码构建到 Docker 镜像中，接下来，Trivy 会扫描上一步构建的 Docker 镜像； 如果没有漏洞，镜像会被推送到镜像注册中心并部署到 Test 或者 UAT 环境； 如果存在漏洞，Pipeline 会被 Trivy 的命令行打断退出，这时候你就需要修复漏洞以使 Pipeline 变绿通过。</p>
<h3 id="trivy-的使用方法">Trivy 的使用方法</h3>
<p>在编写代码进行集成之前，我们必须知道如何使用 Trivy，Trivy 是一个二进制应用程序，所以我们可以在命令行中使用它。同时，Trivy 提供了它的 Docker 镜像，所以我们可以很容易地在 Pipeline 上设置和使用。命令如下，对于这个命令，我们需要重点说明一些参数。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ docker run --rm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v /var/run/docker.sock:/var/run/docker.sock <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  aquasec/trivy <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  image <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --exit-code <span class="m">1</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ignore-unfixed <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --severity HIGH,CRITICAL <span class="si">${</span><span class="nv">YOUR_IMAGE</span><span class="si">}</span></span></span></code></pre></div></div>
<ul>
<li>-v /var/run/docker.sock:/var/run/docker.sock 如果想扫描本地主机上的镜像，需要挂载 docker.sock</li>
<li>&ndash;ignore-unfixed 忽略未修复的漏洞问题；如果存在未修复的漏洞，Trivy 将忽略这些漏洞</li>
<li>&ndash;severity 设置要扫描的漏洞级别</li>
<li>&ndash;exit-code 发现漏洞时 Trivy 的退出状态（默认值：0)； 在 Pipeline 中，如果将该值设置为 1，且有漏洞被发现，则 Pipeline 将退出，而不会继续运行。如果将其设置为 0，则 Pipeline 将继续运行，但会报告结果。所以，如果你想在发现漏洞后阻止 Pipeline 继续执行，可以设置它为 1。</li>
</ul>
<p>想了解更多关于参数和使用方法的信息，请访问 Trivy 的官方网站：<a href="https://github.com/aquasecurity/trivy">https://github.com/aquasecurity/trivy</a><sup>[2]</sup>
。</p>
<h3 id="demo">Demo</h3>
<p>下面是一个 Demo，展示了 Trivy 如何打断 Pipeline 的执行 ，以及当我们修复问题后又发生什么。该项目将构建一个 Buildkite Dashboard（Buildkite 是一个 CI/CD 平台），它将过滤出你指定的组织下的项目的构建信息。这里我们使用 GitHub Actions 来构建这个应用程序，并在 Pipeline 中集成 Trivy，代码如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Trivy scanner</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      docker run --rm \
</span></span></span><span class="line"><span class="cl"><span class="sd">      -v /var/run/docker.sock:/var/run/docker.sock \
</span></span></span><span class="line"><span class="cl"><span class="sd">      aquasec/trivy image \
</span></span></span><span class="line"><span class="cl"><span class="sd">      --severity HIGH,CRITICAL \
</span></span></span><span class="line"><span class="cl"><span class="sd">      --exit-code 1 \
</span></span></span><span class="line"><span class="cl"><span class="sd">      dashboard:${{ github.sha }}</span></span></span></code></pre></div></div>
<p>在这个 Job 中，我们使用 <a href="https://hub.docker.com/_/nginx">Nignx:1.18</a><sup>[9]</sup>
 作为基础镜像来构建应用程序镜像。可以看到由于存在一些漏洞，本次构建失败了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/trivy-dashboard-failed.4bffhau2xvk0.png" alt="Trivy Dashboard Failed" /></p>
<p>现在，我们必须解决这个问题来达到持续交付目的。这里有两个步骤要做，首先，我们应该使用最新的 Nginx 镜像作为基础镜像；其次，我们可以忽略未修复的漏洞，因为我们可能无法在系统级别修复某些最新的漏洞。你可以通过如下链接查看修复该问题的代码更改；
<a href="https://github.com/guzhongren/Buildkite-Dashboard/commit/90182b9b3770aeb28a6e566208334dd0c6f8f725#annotation_843974303">https://github.com/guzhongren/Buildkite-Dashboard/commit/90182b9b3770aeb28a6e566208334dd0c6f8f725#annotation_843974303</a><sup>[10]</sup>
</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/trivy-dashboard-successfully.28w37b5otts0.png" alt="Trivy Dashboard Successfully" /></p>
<h2 id="总结">总结</h2>
<p>无论你在哪里，安全都是一个非常重要的问题。我们可以将 “<strong>安全左移（Shift Left Security）</strong>”，这样就可以减少生产环境中的安全风险；对于扫描工具 Trivy 来说，它对于保证镜像的安全性非常有用，它不仅可以扫描镜像，还可以扫描 Git 仓库，文件系统等。</p>
<p>最后，非常感谢同事张思楚、王亦晨和邢砚敏等人的大力支持和指导，在他们热心帮助和辛苦付出之下才有了这篇文章。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>SoneQube: <a href="https://www.sonarqube.org/" rel="noopener noreferrer">https://www.sonarqube.org/</a></li><li>Trivy: <a href="https://github.com/aquasecurity/trivy" rel="noopener noreferrer">https://github.com/aquasecurity/trivy</a></li><li>claire: <a href="https://github.com/quay/clair" rel="noopener noreferrer">https://github.com/quay/clair</a></li><li>Anchore Engine: <a href="https://github.com/anchore/anchore-engine" rel="noopener noreferrer">https://github.com/anchore/anchore-engine</a></li><li>Quay: <a href="https://github.com/quay/quay" rel="noopener noreferrer">https://github.com/quay/quay</a></li><li>Docker hub: <a href="https://hub.docker.com/" rel="noopener noreferrer">https://hub.docker.com/</a></li><li>GCR: <a href="https://cloud.google.com/container-registry" rel="noopener noreferrer">https://cloud.google.com/container-registry</a></li><li>NVD: <a href="https://nvd.nist.gov" rel="noopener noreferrer">https://nvd.nist.gov</a></li><li>Nignx:1.18: <a href="https://hub.docker.com/_/nginx" rel="noopener noreferrer">https://hub.docker.com/_/nginx</a></li><li>https://github.com/guzhongren/Buildkite-Dashboard/commit/90182b9b3770aeb28a6e566208334dd0c6f8f725#annotation_843974303: <a href="https://github.com/guzhongren/Buildkite-Dashboard/commit/90182b9b3770aeb28a6e566208334dd0c6f8f725#annotation_843974303" rel="noopener noreferrer">https://github.com/guzhongren/Buildkite-Dashboard/commit/90182b9b3770aeb28a6e566208334dd0c6f8f725#annotation_843974303</a></li></ol>
            </div>]]></description></item><item><title>敏捷开发中有哪些会议？</title><link>https://guzhongren.github.io/2021/08/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%9A%E8%AE%AE/</link><pubDate>Sat, 14 Aug 2021 11:35:52 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/08/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%9A%E8%AE%AE/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="常用会议">常用会议</h2>
<p>以下是一些我们在敏捷开发中常用的会议目录，我们可以使用这张表格对相关会议进行适当裁剪，应用到自身团队来提升团队的敏捷实践，提高效率。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Meeting name</th>
          <th style="text-align: left">Frequency</th>
          <th style="text-align: left">Duration</th>
          <th style="text-align: left">Host</th>
          <th style="text-align: left">Participators</th>
          <th style="text-align: left">Main content &amp; Target</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Standup meeting</td>
          <td style="text-align: left">Everyday</td>
          <td style="text-align: left">10’~15’</td>
          <td style="text-align: left">Team member take turns</td>
          <td style="text-align: left">All team member and your PO PM and so on</td>
          <td style="text-align: left">Describe your job yesterday and today, call out the block, and give a deadline</td>
      </tr>
      <tr>
          <td style="text-align: left">Showcase</td>
          <td style="text-align: left">Fortnightly</td>
          <td style="text-align: left">30’</td>
          <td style="text-align: left">Team member take turns</td>
          <td style="text-align: left">All team member and your PO PM and so on</td>
          <td style="text-align: left">Show delivery value</td>
      </tr>
      <tr>
          <td style="text-align: left">Code Review</td>
          <td style="text-align: left">Everyday</td>
          <td style="text-align: left">1h</td>
          <td style="text-align: left">Every dev</td>
          <td style="text-align: left">All dev</td>
          <td style="text-align: left">Go thought your code which is written today, feedback to others from tech and biz perspective</td>
      </tr>
      <tr>
          <td style="text-align: left">Backlog grooming</td>
          <td style="text-align: left">Fortnightly</td>
          <td style="text-align: left">1h</td>
          <td style="text-align: left">BA</td>
          <td style="text-align: left">All team member</td>
          <td style="text-align: left">BA and others will explain what /why we will do</td>
      </tr>
      <tr>
          <td style="text-align: left">Tech Huddle</td>
          <td style="text-align: left">Twice a week(1 short , 1 long)</td>
          <td style="text-align: left">30’ or 1h</td>
          <td style="text-align: left">Every dev take turns</td>
          <td style="text-align: left">All dev</td>
          <td style="text-align: left">Show some new tech, or deep work in some domain, Expand your influence</td>
      </tr>
      <tr>
          <td style="text-align: left">Retro</td>
          <td style="text-align: left">Fortnightly</td>
          <td style="text-align: left">1h</td>
          <td style="text-align: left">Every dev take turns</td>
          <td style="text-align: left">All team member, PO, PM</td>
          <td style="text-align: left">Collection some tips which can improve team member work efficiency and make work env more safe and happy</td>
      </tr>
      <tr>
          <td style="text-align: left">Delivery Health Check</td>
          <td style="text-align: left">Fortnightly</td>
          <td style="text-align: left">30’</td>
          <td style="text-align: left">BA / TL/ Volunteer</td>
          <td style="text-align: left">All team member</td>
          <td style="text-align: left">Check spring’s all cards and hight light the abnormal card， explain it and collection some tips to improve the  accuracy of estimating</td>
      </tr>
      <tr>
          <td style="text-align: left">Poker Planning</td>
          <td style="text-align: left">Fortnightly</td>
          <td style="text-align: left">1h</td>
          <td style="text-align: left">BA</td>
          <td style="text-align: left">All team member</td>
          <td style="text-align: left">Estimate cost which you do the specific card, and BA will pull some cards into next spring which all points match some number</td>
      </tr>
      <tr>
          <td style="text-align: left">Bug bash</td>
          <td style="text-align: left">Every release Before go-live</td>
          <td style="text-align: left">1h</td>
          <td style="text-align: left">QA</td>
          <td style="text-align: left">All team member</td>
          <td style="text-align: left">Find bugs from different perspective with different role</td>
      </tr>
      <tr>
          <td style="text-align: left">1 on 1</td>
          <td style="text-align: left">Monthly</td>
          <td style="text-align: left">20’</td>
          <td style="text-align: left">You or your PM/DM</td>
          <td style="text-align: left">You and your PM/DM</td>
          <td style="text-align: left">Talk about daily work and life, best to give feedbacks or suggestions</td>
      </tr>
  </tbody>
</table>
<h2 id="提升会议">提升会议</h2>
<p>上面这些都是些正常的日常会议，但是在日常的工作中还有其他不那么频繁的会议，并且这些会议大多数只是需要参与进去，而不是主持者；这些会议通常是扩大团队或者个人影响力的会议，所以建议你抓住机会。</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Meeting name</th>
          <th style="text-align: left">Frequency</th>
          <th style="text-align: left">Duration</th>
          <th style="text-align: left">Host</th>
          <th style="text-align: left">Participators</th>
          <th style="text-align: left">Main content &amp; Target</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Vertical or All Hands</td>
          <td style="text-align: left">Monthly</td>
          <td style="text-align: left">1h</td>
          <td style="text-align: left">Volunteer or someone who has impact</td>
          <td style="text-align: left">All team member and customer</td>
          <td style="text-align: left">understand some direction from customer’s company, and show what your team do to customers or other teams, expand you and your team member’s influence</td>
      </tr>
      <tr>
          <td style="text-align: left">Developer Cop(community of Practice)</td>
          <td style="text-align: left">Monthly</td>
          <td style="text-align: left">1h</td>
          <td style="text-align: left">TL/ Volunteer/TP</td>
          <td style="text-align: left">All dev and customer</td>
          <td style="text-align: left">Show some useful and practice tech, make everyone know and use your tech according to your suggestion</td>
      </tr>
      <tr>
          <td style="text-align: left">Gamba work</td>
          <td style="text-align: left">Once a year or  half-yearly</td>
          <td style="text-align: left">1h</td>
          <td style="text-align: left">TL/ Volunteer/TP</td>
          <td style="text-align: left">All team member</td>
          <td style="text-align: left">Show what your team members are doing and daily work to customer</td>
      </tr>
  </tbody>
</table>
<h2 id="按需裁减">按需裁减</h2>
<p>会议只是流程，选择真正适合自己团队的会议才能发挥更好的作用，同时，也要根据自己团队的现实情况适当裁减会议流程。</p>
]]></description></item><item><title>The Solution of Git Adding GPG Sign Failed</title><link>https://guzhongren.github.io/2021/08/the-soluction-of-git-adding-gpg-sign-failed/</link><pubDate>Sat, 07 Aug 2021 12:58:55 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/08/the-soluction-of-git-adding-gpg-sign-failed/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><ol>
<li>
<p>因为我对我的所有的 git commit 都开启了签名，而且每次 GPG 签名的最长缓存时间我设置成了 1 天， 所以过了今天明天就得重新输入密码了，这估计是个无解的问题，除非我生成没有密码的 GPG 密钥对。</p>
</li>
<li>
<p>同时，在我本记会出现另一个问题，就是签名失败。</p>
</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">error: gpg failed to sign the data
</span></span><span class="line"><span class="cl">fatal: failed to write commit object</span></span></code></pre></div></div>
<p>解决方法其实很简单，将 <code>export GPG_TTY=$(tty)</code> 这个加入你的 shell 启动文件里就可以了， 我这是 <code>.zshrc</code>, 然后使之生效。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">source</span> ~/.zshrc</span></span></code></pre></div></div>
]]></description></item><item><title>由 iWatch 是不是生产力工具想到的</title><link>https://guzhongren.github.io/2021/07/%E7%94%B1iwatch%E6%98%AF%E4%B8%8D%E6%98%AF%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7%E6%83%B3%E5%88%B0%E7%9A%84/</link><pubDate>Mon, 12 Jul 2021 16:22:37 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/07/%E7%94%B1iwatch%E6%98%AF%E4%B8%8D%E6%98%AF%E7%94%9F%E4%BA%A7%E5%8A%9B%E5%B7%A5%E5%85%B7%E6%83%B3%E5%88%B0%E7%9A%84/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>今天朋友发来一个 iWatch SE 的京东购买链接，然后问我这个手表怎么样。作为一个已经有 iWatch 的人来说，回答这个问题应该很简单吧？ 然并卵。</p>
<p>先不说，是不是生产力完全取决于你怎么使用它这个万能定律。</p>
<p>对我而言，我们公司都是把所有的会议时间都会以日历的形式发给需要参会的人。 然后我们只需要在特定的日历上登录我们的账号就可以跟踪参会了。对于 Apple 的设备，Mac, Pad, Watch， iPhone 都是互联的，所有只要你有一个账号登录的对应的应用，那么你的其他设备也是会时时收到消息的。比如，我将我的公司邮箱的日历订阅登陆到手机， Mac 和 pad 上，当有新的会议发过来的时候，我的这些设备都会收到消息；然后在你需要参会的时候，他会提前 15 分钟（默认）提醒你参加会议。还是很方便的，别的应用就先不说了。</p>
<p>那么， 问题就会是，你的生活中真的需要一部 iWatch 来辅助你么？</p>
<ul>
<li><i class="far fa-square fa-fw" aria-hidden="true"></i> 如果你有像我这样的需求，参会，信息提示等，那么你需要它；</li>
<li><i class="far fa-square fa-fw" aria-hidden="true"></i> 如果你想在带孩子的时候，不想被拿起手机影响你和孩子的互动，你需要它；</li>
<li><i class="far fa-square fa-fw" aria-hidden="true"></i> 如果……你需要它；</li>
</ul>
<p>每个产品都有他的价值，但是需要你用你的财富去买。作为使用者，我们如果能用它产生比产品更大的价值，那么它就买值了。</p>
<p>去买吧，用一次小小的尝试去满足一下你的小小的好奇心，下次，你就知道了你要买的东西值不值了。</p>
]]></description></item><item><title>花非花，雾非雾 新疆之旅</title><link>https://guzhongren.github.io/2021/07/%E8%8A%B1%E9%9D%9E%E8%8A%B1%E9%9B%BE%E9%9D%9E%E9%9B%BE-%E6%96%B0%E7%96%86%E4%B9%8B%E6%97%85/</link><pubDate>Fri, 09 Jul 2021 16:02:35 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/07/%E8%8A%B1%E9%9D%9E%E8%8A%B1%E9%9B%BE%E9%9D%9E%E9%9B%BE-%E6%96%B0%E7%96%86%E4%B9%8B%E6%97%85/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>旅行就是，你离开了你讨厌的城市去看看别人讨厌的城市。</p>
<h2 id="旅行抱团-羊毛出在羊身上">旅行抱团-羊毛出在羊身上</h2>
<h2 id="看山是山又要不是山">看山是山，又要不是山</h2>
<h2 id="避免无效沟通">避免无效沟通</h2>
<h2 id="我就喜欢你看不惯我还干不掉我的样子">“我就喜欢你看不惯我还干不掉我的样子”</h2>
<h2 id="每一份经历都是一份收获">每一份经历都是一份收获</h2>
]]></description></item><item><title>Js 数据精度之 521.3*100</title><link>https://guzhongren.github.io/2021/06/js%E6%95%B0%E6%8D%AE%E7%B2%BE%E5%BA%A6%E4%B9%8B521.3100/</link><pubDate>Sat, 19 Jun 2021 23:00:09 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/06/js%E6%95%B0%E6%8D%AE%E7%B2%BE%E5%BA%A6%E4%B9%8B521.3100/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="原罪">原罪</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="o">&gt;</span> <span class="mf">521.3</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span> <span class="mf">52129.99999999999</span></span></span></code></pre></div></div>
<p>用你的浏览器来执行上面的计算，你应该能得到这个神奇的结果（52129.99999999999）。 Why?</p>
<h2 id="js-数字丢失精度的原因">JS 数字丢失精度的原因</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> s eeeeeee eeeeffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff
</span></span><span class="line"><span class="cl"><span class="p">|</span>1<span class="p">|</span>       <span class="m">11</span>   <span class="p">|</span>                    <span class="m">52</span>                                  <span class="p">|</span></span></span></code></pre></div></div>
<blockquote>
<p>1 位用来表示符号位
11 位用来表示指数
52 位表示位数</p></blockquote>
<h2 id="example">Example</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="o">&gt;</span> <span class="mf">0.1</span> <span class="o">+</span> <span class="mf">0.2</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span> <span class="mf">0.30000000000000004</span></span></span></code></pre></div></div>
<p>为什么会是这样？</p>
<p>首先，十进制的 0.1 和 0.2 都会被转换成二进制，但由于浮点数用二进制表达时是无穷的</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="mf">0.1</span> <span class="o">-&gt;</span> <span class="mf">0.0001100110011001</span><span class="p">...</span><span class="err">（</span><span class="nx">无限</span><span class="err">）</span>
</span></span><span class="line"><span class="cl"><span class="mf">0.2</span> <span class="o">-&gt;</span> <span class="mf">0.0011001100110011</span><span class="p">...</span><span class="err">（</span><span class="nx">无限</span><span class="err">）</span></span></span></code></pre></div></div>
<p>IEEE 754 标准的 64 位双精度浮点数的小数部分最多支持 53 位二进制位，所以两者相加之后得到二进制为：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="mf">0.0100110011001100110011001100110011001100110011001100</span></span></span></code></pre></div></div>
<p>因浮点数小数位的限制而截断的二进制数字，再转换为十进制，就成了 0.30000000000000004。所以在进行算术计算时会产生误差</p>
<h2 id="如何解决">如何解决</h2>
<h3 id="tofix">toFix</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="o">&gt;</span> <span class="p">(</span><span class="mf">0.1</span><span class="o">+</span><span class="mf">0.2</span><span class="p">).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span> <span class="s2">&#34;0.3&#34;</span></span></span></code></pre></div></div>
<h3 id="mathround">Math.round</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="o">&gt;</span> <span class="mf">621.3</span><span class="o">*</span><span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span> <span class="mf">62129.99999999999</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="mf">621.3</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span> <span class="mi">62130</span></span></span></code></pre></div></div>
<h3 id="倍数">倍数</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="o">&gt;</span> <span class="kd">function</span> <span class="nx">toFixed</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">times</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">des</span> <span class="o">=</span> <span class="nx">num</span> <span class="o">*</span> <span class="nx">times</span> <span class="o">+</span> <span class="mf">0.5</span>
</span></span><span class="line"><span class="cl">    <span class="nx">des</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">des</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">/</span> <span class="nx">times</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">des</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;</span> <span class="nx">toFixed</span><span class="p">(</span><span class="mf">0.1</span><span class="o">+</span><span class="mf">0.2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span> <span class="mf">0.3</span></span></span></code></pre></div></div>
]]></description></item><item><title>对 forEach 和 for 两种循环类型中执行异步函数的复盘</title><link>https://guzhongren.github.io/2021/06/%E5%AF%B9foreach%E5%92%8Cfor%E4%B8%A4%E7%A7%8D%E5%BE%AA%E7%8E%AF%E7%B1%BB%E5%9E%8B%E4%B8%AD%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%E7%9A%84%E5%A4%8D%E7%9B%98/</link><pubDate>Sun, 06 Jun 2021 14:00:12 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/06/%E5%AF%B9foreach%E5%92%8Cfor%E4%B8%A4%E7%A7%8D%E5%BE%AA%E7%8E%AF%E7%B1%BB%E5%9E%8B%E4%B8%AD%E6%89%A7%E8%A1%8C%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%E7%9A%84%E5%A4%8D%E7%9B%98/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="问题">问题</h2>
<p>有这么一个需求，有一个合法的数组，需要每隔 3 秒执行一个异步函数，直到最后得到所有异步函数执行结果。</p>
<h2 id="伪解决方案">伪解决方案</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// testForEach.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">sleep</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="mi">3000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getDifferent</span> <span class="o">=</span> <span class="p">(</span><span class="nx">startDate</span><span class="p">,</span> <span class="nx">endDate</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">endDate</span> <span class="o">-</span> <span class="nx">startDate</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">startDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">566</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">async</span> <span class="kd">function</span> <span class="nx">testForEach</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">promiseList</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">list</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kr">async</span> <span class="nx">item</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;================1forEach================&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="kr">await</span> <span class="nx">sleep</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="nx">promiseList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kr">await</span> <span class="nx">item</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;================2forEach================&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="kr">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([...</span><span class="nx">promiseList</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">endDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDifferent</span><span class="p">(</span><span class="nx">startDate</span><span class="p">,</span> <span class="nx">endDate</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">result</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">testForEach</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<h3 id="解释就是">解释就是</h3>
<p><code>sleep</code> 函数用来等待函数执行；</p>
<p><code>getDifferent</code> 函数用来计算函数开始执行到结束的时间差；</p>
<p><code>testForEach</code> 中用  Array 的 <code>forEach</code>实现循环，并在其中使用休眠 3 秒的逻辑，且通过对原有数组进行异步计算（item * 2）, 然后返回 <code>await Promise.all</code>的结果。</p>
<p>最后一行，执行 Promise 函数，得到 Promise.all 的返回结果，打印，验证。</p>
<p>这一切是不是没有问题？ 最简单的验证办法就是在浏览器控制台运行一下； 这是我的运行结果</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="mi">12</span><span class="o">================</span><span class="mi">1</span><span class="nx">forEach</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="nb">Promise</span> <span class="p">{</span><span class="o">&lt;</span><span class="nx">fulfilled</span><span class="o">&gt;:</span> <span class="kc">undefined</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="mi">12</span><span class="o">================</span><span class="mi">2</span><span class="nx">forEach</span><span class="o">================</span></span></span></code></pre></div></div>
<p>前面的 12 代表 这行在最近被重复输出了 12 次，而且看下面，promise 的结果也还没得到，然后程序在输出 2 forEach 的时候停顿了 3 秒；总之，我们没有达到效果。 为什么呢？</p>
<h2 id="掩饰">掩饰</h2>
<p>查看 MDN 官网中关于 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">Array.prototype.forEach()</a><sup>[1]</sup>
 的解释，可以看到有一行说明</p>
<blockquote>
<p>Note: There is no way to stop or break a forEach() loop other than by throwing an exception. If you need such behavior, the forEach() method is the wrong tool.</p></blockquote>
<blockquote>
<p>Early termination may be accomplished with:</p></blockquote>
<blockquote>
<p>A simple for loop
A for&hellip;of / for&hellip;in loops
Array.prototype.every()
Array.prototype.some()
Array.prototype.find()
Array.prototype.findIndex()
Array methods: every(), some(), find(), and findIndex() test the array elements with a predicate returning a truthy value &gt;  to determine if further iteration is required.</p></blockquote>
<p>简单翻译一下，如果要让 forEach 停下，那么只有抛异常这一种方案；但是如果你想在循环中退出那么就需要考虑其他方案了。</p>
<p>但是在我们的案例中，我们需要让循环中的所有结果都正常运行，所以，我们得使用官方建议的方案。【试了一下， every 也是一样的效果，难道是我对文档理解有误？】</p>
<h2 id="新方案">新方案</h2>
<p>当遇到问题时，往往用原始的方法就可以解决问题。so 使用最原始的 for 循环来解决问题。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// testFor.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">sleep</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="mi">3000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">getDifferent</span> <span class="o">=</span> <span class="p">(</span><span class="nx">startDate</span><span class="p">,</span> <span class="nx">endDate</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">endDate</span> <span class="o">-</span> <span class="nx">startDate</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">startDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">566</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">async</span> <span class="kd">function</span> <span class="nx">testFor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">let</span> <span class="nx">promiseList</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;================1for length================&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="kr">await</span> <span class="nx">sleep</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nx">promiseList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kr">await</span> <span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;================2for length================&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="kr">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([...</span><span class="nx">promiseList</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">endDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">getDifferent</span><span class="p">(</span><span class="nx">startDate</span><span class="p">,</span> <span class="nx">endDate</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">result</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">testFor</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">value</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<p>代码很简单，没有什么可以解释的。在你的浏览器控制台中运行应该可以得到如下结果，在控制台输出的时候是每隔 3 秒输出 2for length 和 1for length 的，直到最后循环完成输出结果。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="o">================</span><span class="mi">1</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="nb">Promise</span> <span class="p">{</span><span class="o">&lt;</span><span class="nx">pending</span><span class="o">&gt;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">2</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">1</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">2</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">1</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">2</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">1</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">2</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">1</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">2</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">1</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">2</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">1</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">2</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">1</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">2</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">1</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">2</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">1</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">2</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">1</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">2</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">1</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="o">================</span><span class="mi">2</span><span class="k">for</span> <span class="nx">length</span><span class="o">================</span>
</span></span><span class="line"><span class="cl"><span class="mi">36</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1132</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">156</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">178</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span></span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<ul>
<li><strong>如果遇到问题用新特性解决不了，就需要考虑使用最原始的方法了</strong></li>
<li><strong>零信任</strong> 要有质疑精神，只要不是自己写的，就有可能有 bug， 不然那么多漏洞是怎么发现的</li>
<li>Keep simple, Keep run</li>
</ul>
<div class="references">
                <h2>参考</h2>
                <ol><li>Array.prototype.forEach(): <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach</a></li></ol>
            </div>]]></description></item><item><title>Test With 3rd Party Library</title><link>https://guzhongren.github.io/2021/04/test-with-3rd-party-library/</link><pubDate>Sun, 18 Apr 2021 21:57:08 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/04/test-with-3rd-party-library/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="场景">场景</h2>
<p>一般的前端开发情况下，我们都会用到其他的第三方库，比如 UI 库 <code>Ant Desgin</code>， 请求库 <code>axios</code> 等，通常对于 UI 库，我们可以通过快照等操作对其进行测试，但是对于像 axios 这类第三方库，我们必须通过 mock 的方式来实现。</p>
<h2 id="问题">问题</h2>
<p>上周四晚上突然收到同事的微信求助，怎么 mock 一个 <code>jwt-decode</code> 这个库。然而理想很丰满，现实很骨干。妹子找了 jest 官网的各种测试方式，没有成功，我岂能随随便便成功。</p>
<p>妹子的问题如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">jwt_decode</span> <span class="nx">from</span> <span class="s1">&#39;jwt-decode&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cookieAccessToken</span> <span class="o">=</span> <span class="nx">cookie</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;cookie-key&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">userJwt</span> <span class="o">=</span> <span class="p">(</span><span class="nx">cookieAccessToken</span> <span class="o">&amp;&amp;</span> <span class="nx">jwt_decode</span><span class="p">(</span><span class="nx">cookieAccessToken</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">....</span></span></span></code></pre></div></div>
<h2 id="解决方案">解决方案</h2>
<p>在构建项目前期，通过各种尝试启动一个支持 <code>import</code> 语法的项目，始终未遂。 最终还是按照 Jest 官网的提示一步步走，构建起了一个项目。</p>
<h3 id="参考官网示例">参考官网示例</h3>
<p>官网示例如下，是一个 mock 有方法的类的，但是通过上面的代码可知，这个不是一个类，而是直接使用的一个方法。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">moduleName</span><span class="p">,</span> <span class="p">{</span><span class="nx">foo</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../moduleName&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="s1">&#39;../moduleName&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">__esModule</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">default</span><span class="o">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="mi">42</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">foo</span><span class="o">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="mi">43</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">moduleName</span><span class="p">();</span> <span class="c1">// Will return 42
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">foo</span><span class="p">();</span> <span class="c1">// Will return 43
</span></span></span></code></pre></div></div>
<p>很明显这是不符合我么场景的。通过观察可知，jest.mock 的第二参数是工参数，返回了一个对象，然后通过调用个这个对象的方法，返回特定的 mock 数据。 那么对于我们这种情况，我们只需要返回一个 mock 后的方法即可。</p>
<p>so, 方案可整理如下</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">jwt_decode</span> <span class="nx">from</span> <span class="s2">&#34;jwt-decode&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="s2">&#34;jwt-decode&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">().</span><span class="nx">mockImplementation</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s2">&#34;test&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">it</span><span class="p">(</span><span class="s2">&#34;jwt&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">token</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmb28iOiJiYXIiLCJleHAiOjEzOTMyODY4OTMsImlhdCI6MTM5MzI2ODg5M30.4-iaDojEVl0pJQMjrbM1EzUIfAZgsbK_kgnVyVxFSVo&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kr">const</span> <span class="nx">decoded</span> <span class="o">=</span> <span class="nx">jwt_decode</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nx">expect</span><span class="p">(</span><span class="nx">decoded</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s2">&#34;test&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span></span></span></code></pre></div></div>
<p>然后运行 test，通过。</p>
<p>Code 地址：https://github.com/guzhongren/awesome-unittest/tree/main/JavaScript/Frontend/src/3rd-part-test</p>
]]></description></item><item><title>导出并保存 GPG 公密钥</title><link>https://guzhongren.github.io/2021/04/%E5%AF%BC%E5%87%BA%E5%B9%B6%E4%BF%9D%E5%AD%98gpg%E5%85%AC%E5%AF%86%E9%92%A5/</link><pubDate>Sat, 10 Apr 2021 20:12:25 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/04/%E5%AF%BC%E5%87%BA%E5%B9%B6%E4%BF%9D%E5%AD%98gpg%E5%85%AC%E5%AF%86%E9%92%A5/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="简介">简介</h2>
<p>GPG 是开源免费的身份验证工具，简单一句话就是对于公钥使用者可以和密钥拥有者秘密通信；对于密钥使用者，可以像外界证明某句话是你说的；在现实场景中，你可以写了一份信，但是大家怎么知道这份信是你写的呢？如果你身边有熟悉你的人，那 TA 可以通过你的笔迹或者你家生产的信纸来知道这份信是你的，但是对于别人呢？他们对你不了解，所以他们很难证明：你就是你？</p>
<p>在程序的世界里，你身边都是陌生人，怎么证明你就是你？一般都使用公钥私钥的非对称加密算法。在网上有很多关于 GPG 和 Github 结合的说明，比如 <a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification">GitHub 官网的 Doc</a><sup>[1]</sup>
; 最重要的另一件事是备份你的公钥和密钥。</p>
<h2 id="备份">备份</h2>
<h3 id="列出公钥">列出公钥</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ gpg --list-secret-keys --keyid-format LONG
</span></span><span class="line"><span class="cl">/Users/c4/.gnupg/pubring.kbx
</span></span><span class="line"><span class="cl">----------------------------
</span></span><span class="line"><span class="cl">sec   rsa4096/XXXXXXXXXXXXXX 2021-04-10 <span class="o">[</span>SC<span class="o">]</span>
</span></span><span class="line"><span class="cl">      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
</span></span><span class="line"><span class="cl">uid                 <span class="o">[</span> 绝对 <span class="o">]</span> user（仅用来签名 git, message<span class="o">)</span> &lt;user@email.com&gt;
</span></span><span class="line"><span class="cl">ssb   rsa4096/202XXXXXXXXXXXXX 2021-04-10 <span class="o">[</span>E<span class="o">]</span></span></span></code></pre></div></div>
<p>sec 下面的第二行 也就是所有字符都是 X 的那一行就是 keyId;</p>
<h3 id="导出公钥">导出公钥</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ gpg -a -o public-file.key --export keyId</span></span></code></pre></div></div>
<blockquote>
<p>-a 为 &ndash;armor 的简写，表示密钥以 ASCII 的形式输出，默认以二进制的形式输出；</p></blockquote>
<blockquote>
<p>-o 为 &ndash;output 的简写，指定写入的文件；</p></blockquote>
<p>导出会有一个 <code>public-file.key</code> 在当前目录下生成，里面存放你的公钥。</p>
<h3 id="导出私钥">导出私钥</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ gpg -a -o private-file.key --export-secret-keys keyId</span></span></code></pre></div></div>
<p>导出一个私钥 private-file.key.</p>
<h3 id="导入公钥私钥">导入公钥私钥</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ gpg --import xxxx.key</span></span></code></pre></div></div>
<p>xxxx.key 可以是公钥，也可以是私钥。</p>
<h3 id="保存">保存</h3>
<p>公钥可以放在自己的网站或者信任的服务器上，但是私钥一定要自己保管，千万千万不能泄漏出去。否则在计算机的世界里，人人都可以是你。</p>
<p>推荐将你的公钥和私钥都保存在像<code>1password</code>, <code>lastpassword</code> 或者<code>Bitwarden</code>里，我用的是 <code>bitwarden</code>; 因为不能存文件，只能将公钥和私钥的内容复制并拷贝进去。但效果是一样的。</p>
<h4 id="缓存">缓存</h4>
<p>在设置了强密码的前提下， 我们可以稍微的牺牲一些安全性， 通过配置 gpg-agent 的 default-cache-ttl， 让我们解密后的私钥在内存中存在的时间稍微长一些（默认 10 分钟）， 比如， 一天：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">#~/.gnupg/gpg-agent.conf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">default-cache-ttl-ssh <span class="m">86400</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">max-cache-ttl-ssh <span class="m">86400</span></span></span></code></pre></div></div>
<h2 id="分发">分发</h2>
<p>将公钥发送到 CA 管理中间机构，方便别人验证。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ gpg -k
</span></span><span class="line"><span class="cl">/Users/c4/.gnupg/pubring.kbx
</span></span><span class="line"><span class="cl">----------------------------
</span></span><span class="line"><span class="cl">pub   rsa4096 2021-04-11 <span class="o">[</span>SC<span class="o">]</span>
</span></span><span class="line"><span class="cl">      3D4DC54CDDA6FAFDD13A4970D18Axxxxxxxxxx
</span></span><span class="line"><span class="cl">uid           <span class="o">[</span> 绝对 <span class="o">]</span> guzhongren <span class="o">(</span>used <span class="k">for</span> git<span class="p">&amp;</span>message<span class="o">)</span> &lt;guzhongren@live.cn&gt;
</span></span><span class="line"><span class="cl">sub   rsa4096 2021-04-11 <span class="o">[</span>E<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ gpg --send-key 3D4DC54CDDA6FAFDD13A4970D18Axxxxxxxxxx</span></span></code></pre></div></div>
<h2 id="-注意">⚠️ 注意</h2>
<p>你的私钥差不多就是计算机世界里的另一个你，所以，把你自己保护好。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>GitHub 官网的 Doc: <a href="https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification" rel="noopener noreferrer">https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification</a></li></ol>
            </div>]]></description></item><item><title>[翻译] 初探性能测试</title><link>https://guzhongren.github.io/2021/04/%E5%88%9D%E6%8E%A2%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</link><pubDate>Sat, 03 Apr 2021 21:12:37 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/04/%E5%88%9D%E6%8E%A2%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="什么是性能测试">什么是性能测试</h2>
<p><img src="https://www.guru99.com/images/why_performance_testing.jpg" alt="为什么要做性能测试" /></p>
<p>性能测试是一种软件测试过程，用于测试特定工作负载下软件应用程序的速度、响应时间、稳定性、可靠性、可伸缩性和资源使用情况。性能测试的主要目的是识别和消除软件应用程序中的性能瓶颈。它是性能工程的一个子集，也被称为&quot;Perf Testing&quot;。</p>
<p>性能测试的重点是检查软件程序的以下几个性能：</p>
<ul>
<li><strong>速度</strong>    ——确定应用程序是否快速响应</li>
<li><strong>可伸缩性</strong>——确定软件应用程序能够处理的最大用户负载</li>
<li><strong>稳定性</strong>  &ndash;确定应用程序在变化的负载下是否稳定</li>
</ul>
<h2 id="为什么要做性能测试">为什么要做性能测试</h2>
<p>软件系统支持的特性和功能并不是唯一的关注点。软件应用程序的性能，如响应时间、可靠性、资源使用和可伸缩性都很重要。性能测试的目标不是发现 bug，而是消除性能瓶颈。</p>
<p>进行性能测试是为了向涉众提供有关其应用程序的速度、稳定性和可伸缩性方面的信息。更重要的是，性能测试揭示了在产品进入市场之前需要改进的地方。如果没有性能测试，软件很可能会遇到这样的问题：几个用户同时使用时运行缓慢，不同操作系统之间的不一致性以及易用性差。</p>
<p>性能测试将确定他们的软件在预期的工作负载下是否满足速度、可伸缩性和稳定性要求。由于不存在或糟糕的性能测试而将性能指标较差的应用程序发送到市场上，可能会获得坏名声，无法达到预期的销售目标等。</p>
<p>此外，诸如太空发射计划或救生医疗设备等关键任务应用程序应进行性能测试，以确保它们能够长期运行而无偏差。</p>
<p>据 Dunn &amp; Bradstreet 公司统计，59%的财富 500 强公司每周的停机时间估计为 1.6 小时。考虑到拥有至少 1 万名员工的《财富》500 强公司的平均工资是每小时 56 美元，这样的组织的停工部分的劳动成本将是每周 89.6 万美元，换算成每年超过 4600 万美元。</p>
<p>据估计，Google.com(8 月 19 日至 13 日）仅 5 分钟的停机时间就会给这家搜索巨头带来 54.5 万美元的损失。</p>
<p>另外，由于最近一次亚马逊网络服务中断，公司每秒损失了价值 1100 美元的销售额。</p>
<p>鉴于此，性能测试在保障服务可用性等方面真的很重要。</p>
<h2 id="性能测试的类型">性能测试的类型</h2>
<p><strong>负载测试</strong>    ——检查应用程序在预期用户负载下的执行能力。目标是在软件应用程序运行之前识别性能瓶颈。</p>
<p><strong>压力测试</strong>    ——包括在极端工作负载下测试应用程序，以了解它如何处理高流量或数据处理。目标是识别应用程序的极限。</p>
<p><strong>耐久性测</strong>  ——是为了确保软件能够在很长一段时间内处理预期的负载。</p>
<p><strong>峰值测试</strong>    ——测试软件对用户产生的突然的负载峰值的反应。</p>
<p><strong>体积测试</strong>    ——在大量测试数据被填充到数据库下，监测整个软件系统的行为。目标是检查软件应用程序在不同数据库容量下的性能。</p>
<p><strong>可伸缩性测试</strong>——可伸缩性测试的目标是确定软件应用程序在“扩展”以支持用户负载增加方面的有效性。它有助于规划软件系统的容量。</p>
<h2 id="常见的性能问题">常见的性能问题</h2>
<p>大多数性能问题都与速度、响应时间、加载时间和较差的可伸缩性有关。速度通常是应用程序最重要的属性之一。运行缓慢的应用程序将失去潜在的用户。性能测试是为了确保应用运行速度足以吸引用户的注意和兴趣。看看下面的常见性能问题列表，并注意到速度是其中的一个常见因素：</p>
<ul>
<li>
<p><strong>加载时间长</strong>——加载时间通常是应用程序启动的初始时间。这通常应该保持在最低限度。虽然有些应用程序不可能在一分钟内完成加载，但加载时间应该尽可能保持在几秒钟以内。</p>
</li>
<li>
<p><strong>响应时间短</strong>——响应时间是从用户向应用程序输入数据到应用程序输出对该输入的响应所花费的时间。一般来说，这应该很快。如果用户等待的时间过长，他们就会失去兴趣。</p>
</li>
<li>
<p><strong>可伸缩性差</strong>——当软件产品不能处理预期的用户数量或不能容纳足够大的用户范围时，它就会受到可伸缩性差的困扰。应该进行负载测试，以确定应用程序能够处理预期的用户数量。</p>
</li>
<li>
<p><strong>瓶颈</strong>-瓶颈是系统中会降低整体系统性能的障碍。瓶颈是编码错误或硬件问题导致在特定负载下吞吐量下降。瓶颈通常是由一个错误的代码部分引起的。修复瓶颈问题的关键是找到导致放缓的代码部分，并尝试修复它。瓶颈通常可以通过修复运行不良的进程或添加额外的硬件来解决。一些常见的性能瓶颈是：</p>
<ul>
<li><strong>CPU 利用率</strong></li>
<li><strong>内存利用率</strong></li>
<li><strong>网络利用率</strong></li>
<li><strong>操作系统限制</strong></li>
<li><strong>磁盘使用情况</strong></li>
</ul>
</li>
</ul>
<h2 id="性能测试过程">性能测试过程</h2>
<p>为性能测试所采用的方法可能有很大的不同，但是性能测试的目标是相同的。它可以帮助证明您的软件系统满足某些预先定义的性能标准。或者它可以帮助比较两个软件系统的性能。它还可以帮助识别降低软件系统性能的部分。</p>
<p>下面是关于如何执行性能测试的一般流程：</p>
<p><img src="https://www.guru99.com/images/performance_testing_process.png" alt="性能测试过程" /></p>
<ol>
<li>
<p><strong>确定您的测试环境</strong> —— 了解您的物理测试环境、生产环境以及可用的测试工具。在开始测试过程之前，请了解测试过程中使用的硬件、软件和网络配置的详细信息。它将帮助测试人员创建更有效的测试。它还将帮助识别测试人员在性能测试过程中可能遇到的挑战。</p>
</li>
<li>
<p><strong>确定性能验收标准</strong> —— 这包括吞吐量、响应时间和资源分配的目标和约束。在这些目标和约束之外确定项目成功的标准也是必要的。测试人员应该被授权设置性能标准和目标，因为项目规范通常不会包括足够广泛的性能基准。有时可能根本没有。如果可能，找到一个类似的应用程序进行比较是设置性能目标的好方法。</p>
</li>
<li>
<p><strong>计划和设计性能测试</strong> —— 确定最终用户的使用可能如何变化，并确定测试所有可能用例的关键场景。模拟各种终端用户、计划性能测试数据并概述将要收集的度量标准是必要的。</p>
</li>
<li>
<p><strong>配置测试环境</strong>—— 执行前准备测试环境。同时，安排工具和其他资源。</p>
</li>
<li>
<p><strong>执行测试设计</strong> —— 根据测试设计创建性能测试。</p>
</li>
<li>
<p><strong>运行测试</strong> &ndash; 执行和监视测试。</p>
</li>
<li>
<p>分析，调整和重新测试-合并，分析和共享测试结果。然后进行微调并再次测试，看看性能是否有改善或下降。由于每次重新测试的改进通常都会变小，所以当瓶颈是由 CPU 引起时就停止。然后，您可以考虑增加 CPU 功率。</p>
</li>
</ol>
<h2 id="性能测试指标参数监测">性能测试指标：参数监测</h2>
<p><img src="https://www.guru99.com/images/performancetestingparameters.png" alt="性能测试参数" /></p>
<p>在性能测试期间监视的基本参数包括：</p>
<ul>
<li><strong>处理器使用 (Processor Usage)</strong>——处理器执行非空闲线程所花费的时间。</li>
<li><strong>内存使用 (Memory use)</strong>——计算机上进程可用的物理内存总量。</li>
<li><strong>磁盘时间 (Disk time)</strong>——磁盘忙于执行读或写请求的时间。</li>
<li><strong>带宽 (Bandwidth)</strong>——显示一个网络接口每秒使用的比特数。</li>
<li><strong>私有字节数 (Private bytes)</strong>——一个进程分配的不能被其他进程共享的字节数。它们用于测量内存泄漏和使用情况。</li>
<li><strong>已提交内存量 (Committed memory)</strong>——使用的虚拟内存量。</li>
<li><strong>内存页数/秒 (Memory pages/second)</strong>&ndash;写入磁盘或从磁盘读取以解决硬页错误的页数。 硬页错误是指从其他位置调用不是来自当前工作集的代码并从磁盘中检索到的代码。</li>
<li><strong>页面故障数/秒 (Page faults/second)</strong>—&ndash;处理器处理故障页面的总速率。 当流程需要来自其工作集之外的代码时，会再次发生这种情况。</li>
<li><strong>CPU 每秒中断数 (CPU interrupts per second)</strong>———是一个处理器每秒接收和处理的硬件中断数的平均值。</li>
<li><strong>磁盘队列长度 (Disk queue length)</strong>&ndash;为平均长度。在采样间隔内对选定磁盘排队的读和写请求的值。</li>
<li><strong>网络输出队列长度 (Network output queue length)</strong>——报文输出队列的长度。如果超过两个，就意味着需要停止延误和瓶颈。</li>
<li><strong>网络字节每秒总数 (Network bytes total per second)</strong>——在接口上发送和接收的字节的速率，包括分帧字符。</li>
<li><strong>响应时间 (Response time)</strong>——从用户输入请求到收到响应的第一个字符的时间。</li>
<li><strong>吞吐量 (Throughput)</strong>&ndash;计算机或网络每秒接收请求的速率。</li>
<li><strong>连接池的数量 (Amount of connection pooling)</strong>&ndash;池连接所满足的用户请求的数量。池中的连接满足的请求越多，性能就越好。</li>
<li><strong>最大激活会话数 (Maximum active sessions)</strong>&ndash;次可以激活的最大会话数。</li>
<li><strong>命中率 (Hit ratios)</strong>——这与缓存数据处理 SQL 语句的数量有关，而不是昂贵的 I/O 操作。这是解决瓶颈问题的好起点。</li>
<li><strong>每秒点击次数 (Hits per second)</strong>&ndash;在负载测试中，每秒钟在 web 服务器上的点击量。</li>
<li><strong>回滚段 (Rollback segment)</strong>——在任何时间点都可以回滚的数据量。</li>
<li><strong>数据库锁定 (Database locks)</strong>——表和数据库的锁定需要被监视和仔细调优。</li>
<li><strong>顶级等待 (Top waits)</strong>——监视以确定在处理从内存检索数据的速度时可以减少哪些等待时间</li>
<li><strong>线程计数 (Thread counts)</strong>——应用程序运行状况可以通过编号进行度量。正在运行且当前处于活动状态的线程。</li>
<li><strong>垃圾回收 (Garbage collectio)</strong>——它与将未使用的内存返回给系统有关。需要监控垃圾收集的效率。</li>
</ul>
<h2 id="性能测试案例">性能测试案例</h2>
<ul>
<li>当 1000 个用户同时访问网站时，验证响应时间不超过 4 秒。</li>
<li>当网络连接较慢时，验证负载下应用程序的响应时间在可接受的范围内</li>
<li>检查应用程序在崩溃前可以处理的最大用户数。</li>
<li>当同时读写 500 条记录时，请检查数据库执行时间。</li>
<li>检查高峰负载条件下应用程序和数据库服务器的 CPU 和内存使用情况</li>
<li>验证应用程序在低、正常、中等和高负载条件下的响应时间。</li>
</ul>
<p>在实际的性能测试执行过程中，模糊的术语如可接受范围、重载等被具体的数字所取代。性能工程师根据业务需求和应用程序的技术前景来设置这些数字。</p>
<h2 id="性能测试工具">性能测试工具</h2>
<p>市场上有各种各样的性能测试工具。您选择的测试工具将取决于许多因素，如支持的协议类型、许可证成本、硬件要求、平台支持等。下面是一些常用的测试工具。</p>
<ul>
<li><em><a href="https://bit.ly/2W4Ytu5">LoadNinja</a><sup>[1]</sup>
</em> 是一个革命性的加载测试的方式的工具。这个基于云的负载测试工具使团队能够记录和即时回放全面的负载测试，无需复杂的动态关联，并在真实的浏览器中大规模运行这些负载测试。团队能够增加测试覆盖率。将负载测试时间减少 60%以上。</li>
<li><em><a href="https://www.guru99.com/loadrunner-v12-tutorials.html">HP LoadRunner</a><sup>[2]</sup>
</em> -是当今市场上最流行的性能测试工具。该工具能够模拟成千上万的用户，将应用程序置于真实的负载下，以确定它们在预期负载下的行为。Loadrunner 有一个虚拟用户生成器，可以模拟真人用户的动作。</li>
<li><em><a href="https://www.guru99.com/jmeter-tutorials.html">Jmeter</a><sup>[3]</sup>
</em> ——用于 web 和应用服务器负载测试的主要工具之一。</li>
</ul>
<h2 id="faq">FAQ</h2>
<h3 id="我们应该对哪些应用程序进行性能测试">我们应该对哪些应用程序进行性能测试？</h3>
<p>性能测试总是只针对基于客户机-服务器的系统。这意味着，任何不是基于客户机-服务器架构的应用程序都不需要性能测试。
例如，微软计算器既不是基于客户机-服务器，也不是运行多个用户；因此，它不是性能测试的候选对象。
<img src="https://www.guru99.com/images/blog/Loadrunner_architecture_8.png" alt="" /></p>
<h3 id="性能测试和性能工程的区别是什么">性能测试和性能工程的区别是什么</h3>
<p>理解性能测试与性能工程的区别具有重要意义。达成以下共识：</p>
<ul>
<li>性能测试是一门与测试和报告软件应用程序在各种参数下的当前性能有关的学科。</li>
<li>性能工程是为了实现所需的性能而对软件进行测试和调优的过程。这个过程旨在优化最重要的应用性能特征，即用户体验。</li>
<li>从历史上看，测试和调优一直是截然分开的、经常相互竞争的领域。然而，在过去的几年里，一些测试人员和开发人员已经独立合作创建了调优团队。由于这些团队已经取得了巨大的成功，将性能测试与性能调优相结合的概念已经流行起来，现在我们称之为性能工程。</li>
</ul>
<h2 id="结论">结论</h2>
<p>在软件工程中，在任何软件产品上市之前，性能测试都是必要的。它确保了客户的满意度，保护投资者的投资不受产品失败的影响。性能测试的成本通常可以通过提高客户满意度、忠诚度和保留度来弥补。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>LoadNinja: <a href="https://bit.ly/2W4Ytu5" rel="noopener noreferrer">https://bit.ly/2W4Ytu5</a></li><li>HP LoadRunner: <a href="https://www.guru99.com/loadrunner-v12-tutorials.html" rel="noopener noreferrer">https://www.guru99.com/loadrunner-v12-tutorials.html</a></li><li>Jmeter: <a href="https://www.guru99.com/jmeter-tutorials.html" rel="noopener noreferrer">https://www.guru99.com/jmeter-tutorials.html</a></li></ol>
            </div>]]></description></item><item><title>租房之弱势群体</title><link>https://guzhongren.github.io/2021/03/%E7%A7%9F%E6%88%BF%E4%B9%8B%E5%BC%B1%E5%8A%BF%E7%BE%A4%E4%BD%93/</link><pubDate>Wed, 24 Mar 2021 21:16:31 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/03/%E7%A7%9F%E6%88%BF%E4%B9%8B%E5%BC%B1%E5%8A%BF%E7%BE%A4%E4%BD%93/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>最近忙完了结婚大事，按计划接下来要开始装修房子了，那么第一件事就是找个容身之地-租房。在陪着媳妇逛了太白南路的两个房子和航天城那边的一个房子，又约了装修公司来家里看情况，半天下来累的都不想动了。然而之前联系的一个小哥，给我们推荐了朱雀大街上的一个酒店式公寓。在媳妇的催促下，只好抱着试试看的心态去看房。</p>
<p>到了酒店的房间，进去之后，看着环境还不错，在我看来还有点犹豫，三个人在房间里僵持了半个多小时，在我们看来也没得好的选择了，就说这个吧，然后就准备去最近的贝壳旗下的店面去签约，在路上，在经理人的怂恿下，给房东交了 500 块钱的定金，还是订金。然后在随便找的一个店里经过了各种麻烦的操作终于签订了合同，接下来就是最后一步，收房。</p>
<p>时间已经到了晚上 8:30 左右，天黑了，酒店里住的各式各样的人也回来了。刚到租的房子的那一层，就听到楼上在弹钢琴，我们一听，这要是以后每天都这样能行？然后就直接说，我们要解约，不租了，让贝壳这边解约，贝壳的经纪人说他会解决，然后我跟着他上了 7 楼，找到了弹钢琴的那家，然后敲了门，说了几句晚上弹琴会影响别人休息的话，人家也不弹了。我们就回房间了。</p>
<p>过了一会，我们刚才敲了人家门的那个人下来了，说了几句了解到，人家是音乐学院的老师，第二天有学生的课，在备课。抱怨了几句之后，重点戏来了，人家说，往年高考的时候有人大晚上的一直弹琴到睡觉，甚至，凌晨 3，4 点弹琴，唱歌的人都比比皆是。</p>
<p>一听到这，我们解约的心肯定是铁定的了，经纪人给房东打电话，然而房东说只给退三个月的租金，因为我们连押金一共交了 8 个月的房租，加上中介退的中介费，合起来要损失 4 个月，我们肯定呀。房子一天没住，就要损失 1800*4 个月的钱，感觉被抢劫了。</p>
<p>房东是个爱旅游的人，打电话过去一会说半小时后联系，一会 15 分钟后联系，完全就是大爷的姿态，说起退房租，人家还说，”房子刚租出去就退，你玩我呢“，态度强硬的不行。</p>
<p>那么对于这件事，作为租房者，我们感觉太委屈了。</p>
<ul>
<li>租房的时候中介没人跟我们说，这地方音乐学院的人比较多，晚上会比较吵，从头到尾，没人提一个字。</li>
<li>我们还没有拿钥匙，我们要解约，中介都同意了，房东你再牛逼，合同上也只是说，扣留一个月的房租，凭什么要扣我 4 个月的房租。</li>
<li>打电话给贝壳投诉，人家接电话的就是个记录的，说联系解决，其实什么都不干，不解决问题，就是个传话筒。</li>
<li>你说上诉，人家才不怕呢，房东已经收到钱了，钱在人家的口袋里；贝壳，人家只是中介，大公司，怕你一个小楼楼？上诉，不拖个半年一年的，法院会给你办？前期上诉的费用还得自己出，更何况还要浪费自己的时间去做笔录，接受询问等等的。</li>
</ul>
<h2 id="建议">建议</h2>
<p>以后租房，还是要学聪明点。</p>
<ul>
<li>要是要在繁华闹市或者学校附近租房，一定要白天去瞅一瞅，晚上再瞅一瞅，毕竟人生都百态呢，更何况是你控制不了的别人的环境</li>
<li>拿不定注意的时候不要做决定，任凭经纪人说过会，马上有人就要来看房了，要不你先叫个定（订）金之类的，经纪人就是拿这话来让你花钱的</li>
<li>对于所有的事物，尽量能拍照的时候拍照，能录音的时候录音，避免解约或者打官司的时候找不到证据</li>
<li>干房地产的这帮人，就是一群唯利是图的家伙，绝对不能把 ta 当朋友。你想买房，你就是大爷，你不买房了，你就是孙子，甚至连孙子都不如</li>
<li>多学点法律知识，干什么事都要有合同，要有验收标准，自己的钱只能到最后才能给别人。不然你就会成为下一个孙子。</li>
</ul>
]]></description></item><item><title>成长性思维</title><link>https://guzhongren.github.io/2021/02/%E6%88%90%E9%95%BF%E6%80%A7%E6%80%9D%E7%BB%B4/</link><pubDate>Tue, 23 Feb 2021 22:32:14 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/02/%E6%88%90%E9%95%BF%E6%80%A7%E6%80%9D%E7%BB%B4/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>人总是要成长的，尤其在毕业之后，进入社会这所大学，你所有的行为都得自己负责。</p>
<p>最好的方式，就是让自己成长，只有不再犯错或者可以避免犯错，你才有更多的时间和能力去解决更复杂的问题，获得更多的人生财富。以下几个思维方式可以借鉴。</p>
<h2 id="全局观念">全局观念</h2>
<p>人往高处走，水往低处流。在程序员这一行，一遍敲代码，一遍搞 <code>升级</code>，是必须的，毕竟你不可能一辈子就只在底层敲代码，和刚入行的小弟弟小妹妹们争夺那简单的几行代码。那么你就得成长，拿面试来说，刚工作那些年你去面试，面试题都考的是基础知识，面试官也问的是基础知识。但是当你工作 5 年以上以后，很难会遇到做面试题的工作，面试官也许是公司的总监，部门经理，亦或是老板，他们关注的不再是技术细节，而是你的到来能为公司带来什么价值。</p>
<p>上面这个案例是抽象的，可以举个🌰，如果你面试的架构师，那么老板们会考察你的抽象能力，设计能力，整合能力和归纳能力，因为只有对全局有了了解的能力才能更好的设计出最合适的架构。</p>
<p>再者，在平时工作中，一般都有上下级关系，而你怎么脱颖而出呢？想象一下，某天你的领导要离职了，公司希望你能顶上，那么你做到什么，或者之前做了设么，公司就会让你当这个领导？想想其实很明显，你要出色完成领导交给你的任务，可以站在公司的角度，帮助他人提升他人能力，可以通过各种形式的方法使公司或者项目获得最大的利益。&hellip;..</p>
<p>总结一句话，<code>在其位要不谋其政</code>。想的和做的永远要高于现有的范畴。</p>
<h2 id="消除固执">消除固执</h2>
<p>首先要想想，人为什么固执？</p>
<p><code>固执</code>，大多数都是由自己的认知不足导致的。导致认知不足的原因有很多，比如从小的家庭观念，见识少。&hellip;..</p>
<p>那么怎么消除固执呢？</p>
<h3 id="保持开放态度">保持开放态度</h3>
<ul>
<li>对所有事要有宽阔的胸怀，让不同的意见在团队或者集体中存在，且不要随意批判。让人人都可以畅所欲言，但要紧扣主题。</li>
<li>多读书，读好书。樊登读书会的樊登说，你是什么样的人是由你周围人决定的，你仅有的思维就代表了你周围人的平均思维，我认为这个观点很对。你的现状是不可能一下改变的，想要有更多思想，你就的接触更多不同思想的人，而你的圈子基本就限制这点很难做到；但是，如果多读书，读上下五千年的书，读国内外的书，这样你就可以随时随地的与拥有不同思想的人打交道了。所谓<code>腹有诗书气自华</code>。</li>
</ul>
<h2 id="复利思维">复利思维</h2>
<p>最近在忙结婚时事，联系婚庆公司就是一个必要环节。 因为婚礼要在老家县城酒店举办，所以就得联系县城周围的婚庆公司。出于程序员思维，所有的事都要列个表，做个<code> Todo</code>，一件一件的 <code>done</code> 了才算完事。</p>
<p>可是我也是第一次结婚，都不知道婚庆公司有什么服务，就像去饭店吃饭，你第一反应就是看个菜单。联系了婚庆公司，我说能给个你们公司办婚礼的价目表吗？问了两个婚庆公司，没有一个能提供的，有的就是各种小视屏，说所有的内容都可以在他们的朋友圈看到，还有一个更坑的是，他们问，你想要什么服务？听到这话啊，心里的那个🐎呀，我 TM 是第一次办婚礼，我怎么知道有什么服务，有什么环节。</p>
<p>就拿开店或者卖产品来说，你提供服务供顾客选择，如果一个两个客户还好，你可以慢慢解释，但是当你有成千上百万的客户怎么办呢，更何况，客户的需求永远都是各式各样的。</p>
<p>如果有一个菜单或者网站，只要客户有需要，你手一甩，一句话<code>资料都在这，请选择</code>，而你的付出只是整理一份文档或者卖个网站，更简单一点，在某些平台上创建店铺。你可以用省下的时间和精力去做更多更有趣的事。</p>
<p>这就是复利思维，将频繁且固定的内容固化下来，用一个产品去挣所有服务的财富。</p>
]]></description></item><item><title>2021 01 Insight</title><link>https://guzhongren.github.io/2021/02/2021-02-insight/</link><pubDate>Fri, 19 Feb 2021 23:13:35 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/02/2021-02-insight/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="key-words">Key words</h2>
<p><code>你创造的服务只能满足一小部分人</code></p>
<blockquote>
<p>企业家思维-发现问题，找到解决方案，规模化。</p></blockquote>
<p>GIS 是个好东西，可惜在现在的传统行业中体现不出它的价值。既不能让大众使用，更不能让大众看，对比最明显的就是红绿灯，敢问哪个 ZF 部门做的 GIS 产品敢投放到群众经常出现的地方。</p>
<p>没有哪个部门敢！因为做的东西不是为了完任务，就是为了捞钱。</p>
<p>敢问哪个传统 GIS 公司敢把公司开发的地址放出来！要在网上传播开来，估计连 C1K 都顶不住。</p>
<p>政府为了完任务，公司为了挣钱，推行用最小的代价糊弄甲方爸爸，只要交差验收了，至于后续。..</p>
<p>慢慢的传统 GIS 行业就会内卷，那些技术创新都是互联网巨头的事了。传统行业就只能吃别人剩下的了，至于剩下的是什么，自个体会吧。</p>
]]></description></item><item><title>今年疫情不回家</title><link>https://guzhongren.github.io/2021/01/%E4%BB%8A%E5%B9%B4%E7%96%AB%E6%83%85%E4%B8%8D%E5%9B%9E%E5%AE%B6/</link><pubDate>Sat, 30 Jan 2021 15:36:25 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/01/%E4%BB%8A%E5%B9%B4%E7%96%AB%E6%83%85%E4%B8%8D%E5%9B%9E%E5%AE%B6/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="疫情">疫情</h2>
<p>2020 年，魔幻的一年，记得小学一年级的时候有个什么疫情，导致期末都没考试，下学期就直接上了二年级；五年级的时候在外面骑自行车把右胳膊给整折了，又在遇到了非典；接着就是各种国家大事，什么汶川地震，舟曲泥石流。&hellip;.. 貌似二十一世纪就是多灾多难的一个世纪。</p>
<p>今年疫情，国家提倡高风险不回家，中风险，低风险尽量不回家。</p>
<h2 id="回家">回家？</h2>
<p>对我们来说，不回应该是个明智的选择。</p>
<h3 id="为了安全">为了安全</h3>
<p>坐车回家，各种交通工具，各地区的人，指不定危险就在身边，谁都无法避免“黑天鹅事件”的出现。</p>
<h3 id="替国家着想">替国家着想</h3>
<p>从去年武汉疫情开始，国家已经为这个社会付出了太多，没有哪个国家能做到如此。年，年年有，忍一忍，等国家彻底控制住疫情了，没有那么多危险的时候，年年都是年。</p>
<blockquote>
<p>小不忍则乱大谋。</p></blockquote>
<h3 id="嗯">嗯。</h3>
<h2 id="期望">期望</h2>
<p>疫情快点过去吧，就可以休婚假，各种出去嗨了</p>
]]></description></item><item><title>Tech Debt</title><link>https://guzhongren.github.io/2021/01/tech-debt/</link><pubDate>Sun, 10 Jan 2021 12:57:09 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/01/tech-debt/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://i.loli.net/2021/01/10/ToABlS78eDgYUZi.png" referrerpolicy="no-referrer">
            </div><h2 id="缘由">缘由</h2>
<p>做软件开发，不可避免的事就是用户需求的变化或者细化，和业务的不断迭代，那么对于开发者而言，最重要的事什么呢？我想有一条非常重要：及时将系统中存在的各种 bug，或者遗留问题快速解决。</p>
<p>比如前后端中的软件依赖升级，避免远端大版本升级导致项目需要进行大更改的问题；将系统中原有由 JDBC 实现的 Repository 层由 JPA 实现，提升开发效率，避免手写 SQL 的问题，且可以加快开发效率；再或者项目刚开始，将所有的功能都集中在一个项目中，随着项目的不断扩张，需要将系统的部分功能拆分出来作为一个单独的服务，实现服务的独立发布，部署；并且可以被其他服务消费，减轻原有服务的职责。</p>
<h2 id="tech-debt-是什么">Tech debt 是什么</h2>
<p>如上描述，在开发中我们会有各种各样的问题存在，在一个迭代里，一方面要实现客户价值，另一方面不能放入太多的技术债卡，所以哪些遗留问题不会被立即解决掉，那么随着时间的流失，遗留问题就会原来越多。</p>
<p>这是优先考虑快速交付而不是完美代码的结果。</p>
<p><code>Tech debt</code>: 团队为了加快交付速度而降低了代码或者架构层面的良好设计，或者对已有系统缺少更好的设计或测试。</p>
<h2 id="常用方案及设计">常用方案及设计</h2>
<p>明白了什么是 Tech Debt，那么肯定有一些业界的 Best Practice 可以参考，下面列出我设计的方案。</p>
<p>步骤：</p>
<ul>
<li>收集</li>
<li>分析</li>
<li>形成功能卡</li>
</ul>
<h3 id="tech-debt-收集">Tech debt 收集</h3>
<table>
  <thead>
      <tr>
          <th>Id</th>
          <th>Problem description</th>
          <th>Difficulty[easy, hard]</th>
          <th>Importance[low, high]</th>
          <th>Service involved</th>
          <th>Related resource</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>Upgrade dependences</td>
          <td>easy</td>
          <td>high</td>
          <td></td>
          <td></td>
      </tr>
      <tr>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
      </tr>
  </tbody>
</table>
<h4 id="说明">说明</h4>
<ul>
<li>Problem description: 阐明问题原因，及导致的结果</li>
<li>Difficulty: 解决该问题的困难程度</li>
<li>Importance: 解决该问题后带来的价值</li>
<li>Service involved: 问题所涉及的服务</li>
<li>Related resource: 解决该问题可用的资源</li>
</ul>
<p>根据上面的表格，组织会议，让大家填写自己所能想到的所有的技术债，然后对每一条技术债进行说明，对齐认识。然后对每一条从 Difficulty 和 Importance 角度进行投票。</p>
<h4 id="分析">分析</h4>
<p>在投票完成后需要对所有条目进行梳理分类，可以按照下面的表格进行分类。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">   ^
</span></span><span class="line"><span class="cl">  I<span class="p">|</span>      View result immediately       <span class="p">|</span>     Split <span class="p">&amp;</span> Plan
</span></span><span class="line"><span class="cl">  m<span class="p">|</span>                                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">  p<span class="p">|</span>                                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">  o<span class="p">|</span>                                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">  r<span class="p">|</span>                                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">  t<span class="p">|</span>                                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">  a<span class="p">|</span>                                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">  n<span class="p">|</span>                                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">  c<span class="p">|</span>                                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">  e<span class="p">|</span>                                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">   <span class="p">|</span>                                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">   ------------------------------------------------------------------------------&gt;
</span></span><span class="line"><span class="cl">   <span class="p">|</span>                                    <span class="p">|</span>
</span></span><span class="line"><span class="cl">   <span class="p">|</span>      Fix it <span class="k">if</span> have spare <span class="nb">time</span>     <span class="p">|</span>     Let it go
</span></span><span class="line"><span class="cl">   ------------------------------------------------------------------------------&gt;
</span></span><span class="line"><span class="cl">                                                                      Difficulty</span></span></code></pre></div></div>
<p>说明：</p>
<ul>
<li>横轴：从左到右 Difficulty 由简到难；</li>
<li>纵轴：从下到上 Importance 由低到高；</li>
<li><code>Fix it if have spare time</code>: 有时间就修复；</li>
<li><code>View result immediately</code>: 立即处理，因为简单且重要；</li>
<li><code>Split &amp; Plan</code>: 问题困难并且比较重要，需要拆分并安排进迭代；</li>
<li><code>Let it go</code>： 问题简单但是实现比较困难，有记录就行，如果有时间再实现即可。</li>
</ul>
<h2 id="产出是什么">产出是什么</h2>
<p>对于分析后的问题，按照其所在的不同区域的重要程度，一般需要将<code>Fix it if have spare time</code>, <code>View result immediately</code>和<code>Split &amp; Plan</code>这三个区域的问题梳理为卡（业务卡，技术卡或者 Bug 卡），分在不同的迭代去做。</p>
<h2 id="模板">模板</h2>
<p>介于此制作了一个可以复用的模板。
<a href="https://www.figma.com/file/7EzjLtMRXKcaJrGEmudLwC/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1?node-id=181%3A4">Tech debt: https://www.figma.com/file/7EzjLtMRXKcaJrGEmudLwC/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1?node-id=181%3A4</a><sup>[1]</sup>
</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Tech debt: https://www.figma.com/file/7EzjLtMRXKcaJrGEmudLwC/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1?node-id=181%3A4: <a href="https://www.figma.com/file/7EzjLtMRXKcaJrGEmudLwC/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1?node-id=181%3A4" rel="noopener noreferrer">https://www.figma.com/file/7EzjLtMRXKcaJrGEmudLwC/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1?node-id=181%3A4</a></li></ol>
            </div>]]></description></item><item><title>写代码的终极奥秘 人是不可信的</title><link>https://guzhongren.github.io/2021/01/%E5%86%99%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BB%88%E6%9E%81%E5%A5%A5%E7%A7%98-%E4%BA%BA%E6%98%AF%E4%B8%8D%E5%8F%AF%E4%BF%A1%E7%9A%84/</link><pubDate>Thu, 07 Jan 2021 20:23:49 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/01/%E5%86%99%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BB%88%E6%9E%81%E5%A5%A5%E7%A7%98-%E4%BA%BA%E6%98%AF%E4%B8%8D%E5%8F%AF%E4%BF%A1%E7%9A%84/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="缘起">缘起</h2>
<p>在 2020 年公司的最后一天 (12 月 29 号），客户也放了圣诞节和新年的假，我们还在公司吭哧吭哧写着代码，因为我们做的是支付相关的业务，这块比较敏感，所以在客户放假期间，禁止一切代码部署到生产环境。而我就在这一天给自己加戏了。</p>
<p>在做关于使用 Sumo Logic 做 Dashboard 的卡，正值下午，感觉没睡醒，因为要在 UAT 环境做测试，不经意间点开了一个 pipeline, 然后点了部署按钮，也没注意，以为是部署到 UAT， 没想到，pipeline 挂了！pipeline 挂了！ 再次跑了一次测试，还是挂了，仔细一看，<code>env: prod</code>? 啊？ 明明跑的 UAT 为撒是 PROD, 内心的那个马啊，此处省去一万字。</p>
<p>然后报告了组里的 TL 兼安全员，按照流程，看了日志，商讨了解决方案，心惊胆战的终于在下班前成功的让 pipeline 绿了。将生产环境的程序部署正确。</p>
<h2 id="事发生了下次怎么避免呢">事发生了，下次怎么避免呢</h2>
<h3 id="不要相信自己">不要相信自己</h3>
<p>再拿上面这件事说，客户都 code freeze 了，但我们作为人并不能通过管理自己来达到不能部署代码到生产环境这种事，但是工具可以，只要设定了，工具就回毫无疑问，毫无感情的执行。</p>
<h3 id="不要相信别人">不要相信别人</h3>
<p>你可以相信自己，知道自己工作的每一个步骤，每一个文件的权限，但是别人呢，别人不一定和你对项目的认知在一个水平线上，这就决定了你们的项目存在不确定性。</p>
<h2 id="结论">结论</h2>
<blockquote>
<p><em>人是不可信的</em></p></blockquote>
<p>不管是你，还是别人，对于写代码这事都别相信。 你写的代码，做的配置都是最优的。</p>
]]></description></item><item><title>Centos 安装 vim8.2</title><link>https://guzhongren.github.io/2020/12/centos%E5%AE%89%E8%A3%85vim8.2/</link><pubDate>Wed, 16 Dec 2020 23:08:36 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/12/centos%E5%AE%89%E8%A3%85vim8.2/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="删除已有的-vim">删除已有的 vim</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">yum remove vim</span></span></code></pre></div></div>
<h2 id="下载最新的-vim-到你的-centos-上">下载最新的 vim 到你的 centos 上</h2>
<p>vim 官网：https://www.vim.org/
Vim8.2 下载：https://ftp.nluug.nl/pub/vim/unix/vim-8.2.tar.bz2</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">wget https://ftp.nluug.nl/pub/vim/unix/vim-8.2.tar.bz2</span></span></code></pre></div></div>
<h2 id="解压">解压</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">tar -jxvf vim-8.2.tar.bz2</span></span></code></pre></div></div>
<p>解压生成 vim82 文件夹
进入 cd /vim82/src</p>
<h2 id="配置">配置</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>./configure</code></pre></div>
<p>如果遇到如下问题</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>no terminal library found
checking for tgetent()… configure: error: NOT FOUND!
You need to install a terminal library; for example ncurses.
Or specify the name of the library with –with-tlib.</code></pre></div>
<p>请执行如下命令安装依赖</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">yum install ncurses ncurses-devel</span></span></code></pre></div></div>
<h2 id="编译">编译</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">make</span></span></code></pre></div></div>
<h2 id="安装">安装</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo make install</span></span></code></pre></div></div>
<p>不出意外就安装完成了。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> tencent@VM-0-9-centos  ~  vim --version                               ✔  <span class="m">242</span>  23:14:30
</span></span><span class="line"><span class="cl">VIM - Vi IMproved 8.2 <span class="o">(</span><span class="m">2019</span> Dec 12, compiled Dec <span class="m">16</span> <span class="m">2020</span> 23:04:31<span class="o">)</span>
</span></span><span class="line"><span class="cl">编译者 tencent@VM-0-9-centos
</span></span><span class="line"><span class="cl">巨型版本 无图形界面。  可使用 <span class="o">(</span>+<span class="o">)</span> 与不可使用 <span class="o">(</span>-<span class="o">)</span> 的功能：
</span></span><span class="line"><span class="cl">+acl               -farsi             -mouse_sysmouse    -tag_old_static
</span></span><span class="line"><span class="cl">+arabic            +file_in_path      +mouse_urxvt       -tag_any_white
</span></span><span class="line"><span class="cl">+autocmd           +find_in_path      +mouse_xterm       -tcl
</span></span><span class="line"><span class="cl">+autochdir         +float             +multi_byte        +termguicolors
</span></span><span class="line"><span class="cl">-autoservername    +folding           +multi_lang        +terminal
</span></span><span class="line"><span class="cl">-balloon_eval      -footer            -mzscheme          +terminfo
</span></span><span class="line"><span class="cl">+balloon_eval_term +fork<span class="o">()</span>            +netbeans_intg     +termresponse
</span></span><span class="line"><span class="cl">-browse            +gettext           +num64             +textobjects
</span></span><span class="line"><span class="cl">++builtin_terms    -hangul_input      +packages          +textprop
</span></span><span class="line"><span class="cl">+byte_offset       +iconv             +path_extra        +timers
</span></span><span class="line"><span class="cl">+channel           +insert_expand     -perl              +title
</span></span><span class="line"><span class="cl">+cindent           +job               +persistent_undo   -toolbar
</span></span><span class="line"><span class="cl">-clientserver      +jumplist          +popupwin          +user_commands
</span></span><span class="line"><span class="cl">-clipboard         +keymap            +postscript        +vartabs
</span></span><span class="line"><span class="cl">+cmdline_compl     +lambda            +printer           +vertsplit
</span></span><span class="line"><span class="cl">+cmdline_hist      +langmap           +profile           +virtualedit
</span></span><span class="line"><span class="cl">+cmdline_info      +libcall           -python            +visual
</span></span><span class="line"><span class="cl">+comments          +linebreak         -python3           +visualextra
</span></span><span class="line"><span class="cl">+conceal           +lispindent        +quickfix          +viminfo
</span></span><span class="line"><span class="cl">+cryptv            +listcmds          +reltime           +vreplace
</span></span><span class="line"><span class="cl">+cscope            +localmap          +rightleft         +wildignore
</span></span><span class="line"><span class="cl">+cursorbind        -lua               -ruby              +wildmenu
</span></span><span class="line"><span class="cl">+cursorshape       +menu              +scrollbind        +windows
</span></span><span class="line"><span class="cl">+dialog_con        +mksession         +signs             +writebackup
</span></span><span class="line"><span class="cl">+diff              +modify_fname      +smartindent       -X11
</span></span><span class="line"><span class="cl">+digraphs          +mouse             -sound             -xfontset
</span></span><span class="line"><span class="cl">-dnd               -mouseshape        +spell             -xim
</span></span><span class="line"><span class="cl">-ebcdic            +mouse_dec         +startuptime       -xpm
</span></span><span class="line"><span class="cl">+emacs_tags        -mouse_gpm         +statusline        -xsmp
</span></span><span class="line"><span class="cl">+eval              -mouse_jsbterm     -sun_workshop      -xterm_clipboard
</span></span><span class="line"><span class="cl">+ex_extra          +mouse_netterm     +syntax            -xterm_save
</span></span><span class="line"><span class="cl">+extra_search      +mouse_sgr         +tag_binary
</span></span><span class="line"><span class="cl">     系统 vimrc 文件：<span class="s2">&#34;</span><span class="nv">$VIM</span><span class="s2">/vimrc&#34;</span>
</span></span><span class="line"><span class="cl">     用户 vimrc 文件：<span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.vimrc&#34;</span>
</span></span><span class="line"><span class="cl"> 第二用户 vimrc 文件：<span class="s2">&#34;~/.vim/vimrc&#34;</span>
</span></span><span class="line"><span class="cl">      用户 exrc 文件：<span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.exrc&#34;</span>
</span></span><span class="line"><span class="cl">       defaults file: <span class="s2">&#34;</span><span class="nv">$VIMRUNTIME</span><span class="s2">/defaults.vim&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="nv">$VIM</span> 预设值：<span class="s2">&#34;/usr/local/share/vim&#34;</span>
</span></span><span class="line"><span class="cl">编译方式：gcc -c -I. -Iproto -DHAVE_CONFIG_H     -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE<span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">链接方式：gcc   -L/usr/local/lib -Wl,--as-needed -o vim        -lm -ltinfo -lelf  -ldl</span></span></code></pre></div></div>
]]></description></item><item><title>不要活在别人的眼睛里</title><link>https://guzhongren.github.io/2020/11/%E4%B8%8D%E8%A6%81%E6%B4%BB%E5%9C%A8%E5%88%AB%E4%BA%BA%E7%9A%84%E7%9C%BC%E7%9D%9B%E9%87%8C/</link><pubDate>Fri, 13 Nov 2020 20:47:20 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/11/%E4%B8%8D%E8%A6%81%E6%B4%BB%E5%9C%A8%E5%88%AB%E4%BA%BA%E7%9A%84%E7%9C%BC%E7%9D%9B%E9%87%8C/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="牢骚两句">牢骚两句</h2>
<p>你经常是不是会发现，某个人发了朋友圈或者在抖音上发了一条视频，就会在发完之后时不时的打开谁关注了那条动态？</p>
<p>你经常是不是也发现，我们总是在意别人的观点，希望得到别人的赞扬或者肯定？</p>
<p>那么问题是，你到底怎么了？</p>
<h2 id="你期望的就是我希望的">你期望的就是我希望的？</h2>
<p>我们活着不是为了成为别人眼中的他人。</p>
<p>在小时候，你经常会跟你的父母犟嘴，强硬的要这要那。那时候的你是不是很有主见？都活成了最真实的自己。</p>
<p>但随着时间的流失，你慢慢的长大，融入了社会大学，开始夹着尾巴做人。还有现在的年轻人大多都买了房，房贷压力也很大，在工作上对领导也是<code>点头哈腰</code>，越来越没有自己的样子了。</p>
<h2 id="希望你起码的活出自己的样子">希望你起码的活出自己的样子</h2>
<p>什么样子呢？大概呢。</p>
<p>至少有一天，你发了朋友圈或者抖音之类的，不再关注浏览量，不再在乎别人评论的好与坏。对每一条评论都可以随心所欲，淡定自若的恢复。</p>
<blockquote>
<p>但愿有一天，可以找回小时候的自己。</p></blockquote>
]]></description></item><item><title>解决 vscode 配置 deno 时命令不可用的问题的记录</title><link>https://guzhongren.github.io/2020/10/%E8%A7%A3%E5%86%B3vscode%E9%85%8D%E7%BD%AEdeno%E6%97%B6%E5%91%BD%E4%BB%A4%E4%B8%8D%E5%8F%AF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95/</link><pubDate>Sun, 18 Oct 2020 17:43:16 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/10/%E8%A7%A3%E5%86%B3vscode%E9%85%8D%E7%BD%AEdeno%E6%97%B6%E5%91%BD%E4%BB%A4%E4%B8%8D%E5%8F%AF%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="缘由">缘由</h2>
<p>最近在用<code>vscode</code>写<code>deno</code>, 最佳拍档应该就是官方提供的插件了，但是使用插件需要对项目进行初始化 (<code>deno:init</code>)，其实就是在项目根目录创建一个文件 (.vscode/settings.json)， 然后在里面写入 deno 对该项目的配置。</p>
<p>在我刚开始写 deno 代码的时候，这个插件还是好的，但是参与到朋友的一个 demo 的时候就出问题了； 初始化：CMD+ Shift + P,<code>deno:init</code>, 然后右下角提示<code>deno._init_project</code>未找到，请重启 vscode。然后不管怎么重启，即使把插件的源码下载下来编译运行都不行。最终只有重新安装大法了。然而，重装了还是不行。</p>
<h2 id="解决方案">解决方案</h2>
<p>解决方案应该只能是将所有关于 vscode 的所有插件和配置都彻底删除重新安装才行。</p>
<h3 id="删除插件">删除插件</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">rm -rf ~/.vscode/extensions</span></span></code></pre></div></div>
<h3 id="删除系统缓存数据">删除系统缓存数据</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">rm -rf ~/Library/Application<span class="se">\ </span>Support/Code</span></span></code></pre></div></div>
<h3 id="从应用程序中删除-vscode">从应用程序中删除 vscode</h3>
<p>打开 Mac 的应用程序管理文件夹，删除 <code>Visual Studio Code</code></p>
<h3 id="重新安装-vscode">重新安装 vscode</h3>
<p>直接下载安装包或者使用 Homebrew</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">brew install visual-studio-code</span></span></code></pre></div></div>
<h3 id="安装-deno-插件">安装 deno 插件</h3>
<p>在 vscode 的扩展中搜索并安装 deno 插件。</p>
<h2 id="测试">测试</h2>
<p>打开 deno 相关的项目。CMD + Shift + P ， 输入 <code>deno：init</code>，应该不会再弹出命令找不到的错误提示了。</p>
]]></description></item><item><title>配置 iTerm2 使值更高效</title><link>https://guzhongren.github.io/2020/10/%E9%85%8D%E7%BD%AEiterm2%E4%BD%BF%E5%80%BC%E6%9B%B4%E9%AB%98%E6%95%88/</link><pubDate>Fri, 09 Oct 2020 22:40:08 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/10/%E9%85%8D%E7%BD%AEiterm2%E4%BD%BF%E5%80%BC%E6%9B%B4%E9%AB%98%E6%95%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wW-uFN_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wp.gabsii.com/wp-content/uploads/2019/11/Screenshot-2019-11-03-at-22.15.09-1024x583.png" referrerpolicy="no-referrer">
            </div><h2 id="缘由">缘由</h2>
<p>在平时开发中，尤其在 mac 上，我们经常要用到<code>iterm2</code>, 然而默认的配置使用起来对于开发者来说并不是那么高效，比如平时我们需要用<code>CMD+Delete</code>来删除整行命令， 使用<code>Opt+&lt;-</code>来向右跳过单词等等的，这些快捷键在默认情况下并没有，那么接下来就来解决这个问题，</p>
<h2 id="解决方案">解决方案</h2>
<p><img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wW-uFN_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wp.gabsii.com/wp-content/uploads/2019/11/Screenshot-2019-11-03-at-22.15.09-1024x583.png" alt="Preferences" /></p>
<p>使用<code>CMD+,</code>快捷键打开<code>Preferences &gt; Profile &gt; Keys</code>， 点击<code>Presets...</code>选择<code> Natural Text Editing</code>
从此，你的 itemr2 如你的 IDE 一样高效。</p>
<p>再也不用为删除单个单词，整行代码，左右快速跳转烦恼了。</p>
]]></description></item><item><title>最近我是 DevOps</title><link>https://guzhongren.github.io/2020/09/%E6%9C%80%E8%BF%91%E6%88%91%E6%98%AFdevops/</link><pubDate>Tue, 22 Sep 2020 19:46:57 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/09/%E6%9C%80%E8%BF%91%E6%88%91%E6%98%AFdevops/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>最近，在做项目中的 DevOps，主要工作是备份，恢复并且更新 <code>Parameter Store</code>， 即<code>Config as Code</code>; 由于使用<code>AWS 的服务</code>，可靠性还是由很多个 9 来保证的，但是在后期就会由很多问题；</p>
<ul>
<li>Team 创建了多少资源</li>
<li>都有哪些资源</li>
<li>怎么确定某一资源是 Team 项目中要用的</li>
<li>如果 AWS 服务不稳定直接挂了，或者创建的资源被 team 成员不小心删除了，怎么办</li>
<li>如果要更新，我不想登录 AWS Console 或者使用 CLI 来一个个的更新，那怎么办</li>
<li>&hellip;&hellip;</li>
</ul>
<p>对于以上问题，除了<code>as code</code> 还有什么好的方法么？如果有请告诉我。</p>
<p>接下来，我来简单说说我们项目的实践。在这个过程中遇到各种坑，但还是很有收获的。</p>
<p>在这先列个目录，主要罗列涉及到的服务，语言或者功能</p>
<ul>
<li><code>AWS Parameter Store</code>, <code>KMS</code>, <code>cfn(Cloudformation)</code></li>
<li><code>Shell</code></li>
<li><code>Python</code></li>
<li>加解密</li>
<li>MD5</li>
</ul>
<p>由于项目敏感性，在这就简单说说功能；项目中使用到 <code>AWS Parameter Store</code> 作为存储敏感数据的服务，而且所有的数据都是<code>SecurityString</code>（这种类型很重要，后面有坑），在每次项目部署或某些功能运行的时候需要使用其中的值，由于是经过 <code>KMS</code>加密的，要做备份和更新那么就需要调用<code>AWS</code>的服务或者<code>CLI</code>。</p>
<h2 id="第一步-备份">第一步 备份</h2>
<p>第一步，在恢复数据之前，先要获取原有的数据，并将其存储为原始数据。 获取数据倒是不难，写个 shell 直接调用 <code>AWS CLI</code>，将获取到的数据存在文本文件里即可。可以参考官网 <a href="">AWS CLI Get-Parameter by Path</a><sup>[1]</sup>
</p>
<h2 id="第二步-恢复">第二步 恢复</h2>
<p>恢复，简单想一下就是将备份的数据执行命令，一条一条的插入就可以，然而，你这么想你就是小孩子了。原因自己体会。在这说说我做的过程。</p>
<p>首先将所有的数据分类，分为<code>敏感数据</code>和<code>非敏感数据</code>，对于非敏感的数据我们直接将其存储为明文，对于非敏感的数据，我们需要在本地就行加密为密文，保存起来。然后通过读取敏感数据和非敏感数据，将其恢复即可。</p>
<p>在这就遇到了第一个坑。</p>
<p>如果使用 <code>cfn</code>, 创建两个 <code>cfn</code>, 一个用来存储敏感数据，一个用来存储非敏感数据，然后通过 <code>cfn</code> 来对所有的数据进行统一管控。想象是美好的。当我将所有的数据都分好类，建好 cfn 模版，将一个一个的数据填上去，准备修改数据类型为 <code>SecurityString</code>的时候发现，文档上大大的写着，<code>SecurityString</code> 不支持 cfn ！<code>SecurityString</code> 不支持 cfn ！<code>SecurityString</code> 不支持 cfn ！</p>
<p>想象是美好的，现实是骨感的。</p>
<p>既然不支持 cfn，那么只能想其他办法了；要么用支持的语言包，要么用 CLI, 貌似已经没有其他办法 as code 了。</p>
<h3 id="语言包">语言包</h3>
<p>因为做数据备份的项目是一个 DevOps 项目，所有的基础设施都是在这个项目中声明的，所以要使用 AWS 的 Java, Python 扩展包有点重，不合适。那么就剩下 CLI 这条路了。</p>
<h3 id="cli">CLI</h3>
<p>在写代码之前，我先将数据重新整理成了 <code>yaml</code> 格式，毕竟比 <code>JSON</code> 好用（可以写注释）。格式大致如下</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">parameter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">appName</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">customKey</span><span class="p">:</span><span class="w"> </span><span class="l">customKey</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">value</span></span></span></code></pre></div></div>
<p>作为恢复更新脚本，肯定是在 pipeline 运行的时候执行的，所以第一想法就是使用 <code>shell</code>; 想到就直撸起袖子直接干呗。写啊写，虽然网上也有写好的 <code>shell</code> 来处理 <code>yaml</code>, 将读取结果 <code>export</code> 到环境变量中，比如 <code>parameter_appName__customKey</code>，但是问题是，那么多 <code>parameter store</code>, 我怎么一个一个的找到对应的数据的键和值呢？</p>
<p>此路不通，那么立马换方案，使用 <code>grep</code>, <code>awk</code>,<code>Regex</code>进行匹配转换，终于所有的数据 (key， value) 对应上了，大致数据结构如下 <code>parameter_appName__customKey=123</code>; 然后就是对数据（key, value）进行循环处理了呗。</p>
<p>请注意，处理后的数据里有这么一种数据结构： <code>parameter_app__key=test 1231</code>; 当循环 value 到 <code>test 1231</code> 的时候，<code>shell</code> <code>list</code> 是以空格为分隔符的； 那么，就会造成 key 和 value 的长度不一致的问题，那么你的数据最终也会是错的。这个问题基本无解。所以此路又不通了。</p>
<p>考虑再三， <code>Python</code> 解析 <code>YAML</code> 需要安装第三方库，很不方便，但解析 <code>JSON</code> 很方便。在同事的帮助下，测试了 <code>pipeline</code> 是支持 <code>python</code> 的，又因为如果使用 <code>AWS</code> 的 Python 扩展包，需要额外安装依赖，所以直接考虑 <code>Python</code> 调用 <code>Shell</code>;</p>
<h4 id="py-玩-shell">Py 玩 Shell</h4>
<p>综合以上因素，将 <code>YAML</code>格式的数据转换为 <code>JSON</code>, 由 <code>Python</code> 解析 <code>JSON</code>, 然后循环数据，循环过程中使用 <code>subprocess</code> 调用 <code>shell</code>, 在 <code>shell</code>中调用 AWS CLI 命令即可将数据更新上去或者执行解密操作等。 调用示例代码如下；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">subprocess</span><span class="o">.</span></span></span></code></pre></div></div>
<p>在这需要重点说明一下的是，如果 <code>subprocess</code>调用的 <code>shell</code>是执行 <code>docker</code>命令，那么一定要在你要执行 <code>subprocess.run(['docker-compose', 'run', '-T', '-rm', 'shush', value])</code>这类命令前确保你已经拉取了 <code>shush</code> 涉及的镜像， 否则你第一次运行的输出结果里会有拉取镜像的日志。解决办法是在脚本真正运行之前获取镜像，可以使用如下密令</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-Shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">docker-compose pull shush</span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<ul>
<li>对于外部调用的 <code>Shell</code> 一定要写 <code>Usage</code>，也就是用户调用你的脚本的时候，如果出错，因该显示 <code>help</code> 信息</li>
<li>不要给可执行的脚本加 <code>.sh</code> ，<code>.py </code> 等后缀，只需要给其可执行权限即可</li>
<li><code>cfn</code> 不支持 <code>SecurityString</code></li>
<li><code>shush</code> 是个好工具，有 <code>Docker</code> 镜像，只要你的机器上有 <code>Docker</code>, 你就可以不用通过命令行安装它， 执行 <code>docker</code> 命令即可拿到结果；但需要注意的是：执行某个命令之前，需要先将镜像拉下来，不然第一次计算的结果中会有拉取镜像的日志。</li>
</ul>
<div class="references">
                <h2>参考</h2>
                <ol><li>AWS CLI Get-Parameter by Path: <a href="https://guzhongren.github.io/" rel="noopener noreferrer"></a></li></ol>
            </div>]]></description></item><item><title>如何写一份合格的 ADR</title><link>https://guzhongren.github.io/2020/08/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%BB%BD%E5%90%88%E6%A0%BC%E7%9A%84adr/</link><pubDate>Tue, 04 Aug 2020 22:06:29 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/08/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%BB%BD%E5%90%88%E6%A0%BC%E7%9A%84adr/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1596199737455-0b2e92661915?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1491&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="什么是-adr">什么是 ADR</h2>
<blockquote>
<p><em>ADR</em> 即* Architectural Decision Records*，架构决策记录。</p>
<ul>
<li>
<p>架构决策（AD）是一种软件设计选择，针对功能性或非功能性的需求进行的选择设计。</p>
</li>
<li>
<p>架构上重要的要求（ASR, Architecturally Significant Requirement）是对一个软件系统的体系结构和质量衡量效果的要求。</p>
</li>
<li>
<p>架构决策记录（ADR）捕捉 AD，如经常做写个人笔记或会议记录时；在项目中创建和维护的 ADR 集合构成其决策日志。</p>
</li>
</ul></blockquote>
<p>所有这些都属于架构知识管理 (AKM) 的主题。</p>
<p><img src="https://images.unsplash.com/photo-1583591900414-7031eb309cb6?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=675&amp;q=80" alt="Photo by Josep Martins" /></p>
<h2 id="adr-能干什么">ADR 能干什么</h2>
<ul>
<li>它可以记录某些决定背后的动机。</li>
</ul>
<p>其实这一条就够了，在敏捷项目或者大型项目开发中，我们不难避免作出架构变更的操作。如果一次次的变更都没有记录，对于后来的开发者或者维护者都会是灾难。
在没有文档或者前人的指导下，如果使用新的架构变更可能会导致意想不到的 bug 出现。</p>
<p>为了能使后来者了解项目架构变化或者更好的维护项目，将重要的架构变更记录下来是非常重要的。</p>
<ul>
<li>为客户更好的呈现现象及解决方案</li>
</ul>
<p>当你作为乙方，为你的甲方开发系统，突然有一个功能要更改之前的架构设计，那么你的这次的架构变更应该需要让甲方知道并同意，最好的方案就是给他 show 一个 ADR.</p>
<ul>
<li>梳理业务</li>
</ul>
<p>ADR 是一个思考过程，也是一个记录过程； 将抽象的思考，以文字和图表等的形式记录下来，可以更好地辅助我们理解业务，共享知识。</p>
<p><img src="https://images.unsplash.com/photo-1470790376778-a9fbc86d70e2?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=649&amp;q=80" alt="Photo by Brandi Redd" /></p>
<h2 id="什么情况下要使用-adr">什么情况下要使用 ADR</h2>
<p>如上所说，在项目架构有重大变更的时候需要做记录，让所有关系人都了解到这次变更。在此需要说一下，对于敏捷宣言其中有一句，<code>工作的软件高于详尽的文档</code>， 这句话的意思不是不写文档。所以，必要的文档还是要写的。</p>
<h2 id="怎么写呢">怎么写呢</h2>
<h3 id="标题">标题</h3>
<p>标题 (Title) 建议以 <code>ADR-[序号]-[项目/团队名称]-[ADR 主题]</code> 这样的形式，直观且有序。</p>
<h3 id="总结-summary">总结 (Summary)</h3>
<p>这部分的主要任务是让别人快速知道你的这次 ADR 的上下文 (Context) 是什么，有哪些目标 (Objective), 有哪些备选方案 (Options)，谁在主导 (Owner), 有谁审阅了 (Reviews), 有哪些相关的决策 (Related Decisions), 当前 ADR 的状态 (Status) 是什么等。</p>
<p>一般情况下，在 ADR 开始的时候用一个表格来总体概括当前 ADR 的一些状态。比如：</p>
<table>
  <thead>
      <tr>
          <th>Item</th>
          <th>Content</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>名称 (Title)</td>
          <td>ADR 的标题</td>
      </tr>
      <tr>
          <td>序号 (ID)</td>
          <td>ADR 序列号</td>
      </tr>
      <tr>
          <td>主导人 (Owner)</td>
          <td>负责人</td>
      </tr>
      <tr>
          <td>审阅人 (Reviewers)</td>
          <td>参与的审阅者</td>
      </tr>
      <tr>
          <td>上下文 (Context)</td>
          <td>这里介绍 ADR 的背景 (background)，目标 (objective)，是否紧急 (urgent)，如果不解决会有什么影响 (impact) 或者风险 (risk)，有什么限制，顾虑 (constraints) 等，所有可以为作出决定的内容都可以写在这里</td>
      </tr>
      <tr>
          <td>目标 (Objective)</td>
          <td>列出所有要达到的目标</td>
      </tr>
      <tr>
          <td>备选方案 (Options)</td>
          <td>以列表 (<code>Option</code>) 形式列出所有的备选方案</td>
      </tr>
      <tr>
          <td>相关决策 (Related decisions)</td>
          <td>关于此次决策相关的一些其他辅助链接</td>
      </tr>
      <tr>
          <td>状态 (Status)</td>
          <td>本 ADR 的状态，<code>INPROGRESS</code>, <code>PROPOSED</code>, <code>PENDING</code>, <code>DECIDED</code>和<code>REJECTED</code> 中的一个</td>
      </tr>
      <tr>
          <td>决定 (Decision)</td>
          <td>接受 (<code>Accepted</code>) 或者拒绝 (<code>Rejected</code>)</td>
      </tr>
      <tr>
          <td>决策 (Consequences)</td>
          <td>选择了哪个方案，有什么后果或者代价</td>
      </tr>
  </tbody>
</table>
<h3 id="详细背景-background">详细背景 (Background)</h3>
<p>如果以上的表格并没有清楚的说明问题，那么在这块就可以详细说明了。</p>
<p>建议：</p>
<ul>
<li>在阐述问题的时候尽量用图（截图，示意图，设计图，流程图）或者表来说明，因为图表比文字更直观，更容易理解；</li>
</ul>
<h3 id="方案对比-option-comparison">方案对比 (Option Comparison)</h3>
<p>以上内容已经让你的甲方了解到了你们遇到了什么问题，接下来的内容就是在各个方案之间对比了，当然作为陈述 ADR 的人，你必须有一个你推荐 (prefer) 的方案。</p>
<p>方案对比一般也是一个表格，比如：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">方案 (Options)</th>
          <th style="text-align: left">方案详细信息 (Solution Details)</th>
          <th style="text-align: left">优势 (pros)</th>
          <th style="text-align: left">劣势 (Cons)</th>
          <th style="text-align: left">决策后果或代价 (Consideration)</th>
          <th style="text-align: left">开发或测试成本 (Dev&amp;test Effort)</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">方案 1-option1 title</td>
          <td style="text-align: left">详细信息</td>
          <td style="text-align: left">有哪些优势</td>
          <td style="text-align: left">有哪些劣势</td>
          <td style="text-align: left">有什么要被顾虑</td>
          <td style="text-align: left">较小 (Small), 中等 (Medium)， 较难 (High) 中的一个</td>
      </tr>
      <tr>
          <td style="text-align: left">方案 2-option1 title</td>
          <td style="text-align: left">详细信息</td>
          <td style="text-align: left">有哪些优势</td>
          <td style="text-align: left">有哪些劣势</td>
          <td style="text-align: left">有什么要被顾虑</td>
          <td style="text-align: left">较小 (Small)</td>
      </tr>
      <tr>
          <td style="text-align: left">方案 3-option1 title</td>
          <td style="text-align: left">详细信息</td>
          <td style="text-align: left">有哪些优势</td>
          <td style="text-align: left">有哪些劣势</td>
          <td style="text-align: left">有什么要被顾虑</td>
          <td style="text-align: left">中等 (Medium)</td>
      </tr>
      <tr>
          <td style="text-align: left">方案 4-option1 title</td>
          <td style="text-align: left">详细信息</td>
          <td style="text-align: left">有哪些优势</td>
          <td style="text-align: left">有哪些劣势</td>
          <td style="text-align: left">有什么要被顾虑</td>
          <td style="text-align: left">较难 (High)</td>
      </tr>
  </tbody>
</table>
<h3 id="讨论拉通-discuss">讨论拉通 (Discuss)</h3>
<p>上面所有做的工作都是为这一次讨论服务的，在拉通的会议上，需要拉上所有与本次变更有关系的人，当然最主要的是将甲方爸爸拉上；在会议上，你需要先陈述上上面的内容，最后把选择权交到甲方爸爸手里，千万不要把甲方爸爸的唯一的权利剥夺了。至于为什么，我也不知道。😄</p>
<p>在所有讨论完毕，要将 ADR 更新，并更新 ADR 的总结部分 (Summary)， 方便后面的人快速得到决策信息。</p>
<h2 id="参考项目">参考项目</h2>
<ul>
<li><a href="https://adr.github.io/madr/">MADR</a><sup>[1]</sup>
 - Markdown 架构决策记录（MADR）。精益 ADR 可快速记录代码中的架构决策。</li>
<li><a href="https://adr.github.io/adr-log/">adr-log: https://adr.github.io/adr-log/</a><sup>[2]</sup>
 - 从 MADR 生成体系结构决策日志。</li>
<li><a href="https://adr.github.io/e-adr/">嵌入式架构决策记录：https://adr.github.io/e-adr/</a><sup>[3]</sup>
 显示如何通过 ADR 注释将分布式 AD 日志嵌入 Java 代码中。</li>
<li><a href="https://adr.github.io/eadlsync/">eadlsync:https://adr.github.io/eadlsync/</a><sup>[4]</sup>
 - 将嵌入式架构决策记录与架构决策存储库同步。</li>
<li><a href="https://github.com/adr/serepo">SE Repo: https://github.com/adr/serepo</a><sup>[5]</sup>
 - 软件工程资料库。用于版本化软件工程工件的存储库，可以是架构决策，模式等。</li>
</ul>
<p><img src="https://images.unsplash.com/photo-1569091791842-7cfb64e04797?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=675&amp;q=80" alt="Photo by Sheldon Liu" /></p>
<h2 id="总结">总结</h2>
<p>ADR 在大型项目或者大公司的项目中经常会用到，不管是对现有业务的澄清总结，还是对不确定的业务的拉通都有积极作用。当然也是一个<code>甩锅利器</code>。</p>
<p>建议：</p>
<ul>
<li>使用版本控制工具来管理 ADR, 比如 <a href="https://www.atlassian.com/software/confluence">Confluence</a><sup>[6]</sup>
, 国内的话有 <a href="https://www.yuque.com/">语雀</a><sup>[7]</sup>
, <a href="https://shimo.im/">石墨</a><sup>[8]</sup>
, 还有些代码管理平台也有<code>Wiki</code>, 如阿里云的 <a href="https://www.aliyun.com/product/yunxiao">云效</a><sup>[9]</sup>
, 腾讯的 <a href="https://coding.net/">Coding</a><sup>[10]</sup>
 等； 当然如果是小项目也可以存在代码仓库中。</li>
</ul>
<blockquote>
<p>万事皆可法；工作中的大部分事物都是有套路的；愿你选对套路，归来仍是高效 dev。</p></blockquote>
<div class="references">
                <h2>参考</h2>
                <ol><li>MADR: <a href="https://adr.github.io/madr/" rel="noopener noreferrer">https://adr.github.io/madr/</a></li><li>adr-log: https://adr.github.io/adr-log/: <a href="https://adr.github.io/adr-log/" rel="noopener noreferrer">https://adr.github.io/adr-log/</a></li><li>嵌入式架构决策记录：https://adr.github.io/e-adr/: <a href="https://adr.github.io/e-adr/" rel="noopener noreferrer">https://adr.github.io/e-adr/</a></li><li>eadlsync:https://adr.github.io/eadlsync/: <a href="https://adr.github.io/eadlsync/" rel="noopener noreferrer">https://adr.github.io/eadlsync/</a></li><li>SE Repo: https://github.com/adr/serepo: <a href="https://github.com/adr/serepo" rel="noopener noreferrer">https://github.com/adr/serepo</a></li><li>Confluence: <a href="https://www.atlassian.com/software/confluence" rel="noopener noreferrer">https://www.atlassian.com/software/confluence</a></li><li>语雀: <a href="https://www.yuque.com/" rel="noopener noreferrer">https://www.yuque.com/</a></li><li>石墨: <a href="https://shimo.im/" rel="noopener noreferrer">https://shimo.im/</a></li><li>云效: <a href="https://www.aliyun.com/product/yunxiao" rel="noopener noreferrer">https://www.aliyun.com/product/yunxiao</a></li><li>Coding: <a href="https://coding.net/" rel="noopener noreferrer">https://coding.net/</a></li></ol>
            </div>]]></description></item><item><title>基于 oak 的一次 TDD 实践</title><link>https://guzhongren.github.io/2020/07/%E5%9F%BA%E4%BA%8Eoak%E7%9A%84%E4%B8%80%E6%AC%A1tdd%E5%AE%9E%E8%B7%B5/</link><pubDate>Fri, 24 Jul 2020 22:21:11 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/07/%E5%9F%BA%E4%BA%8Eoak%E7%9A%84%E4%B8%80%E6%AC%A1tdd%E5%AE%9E%E8%B7%B5/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://wx2.sbimg.cn/2020/07/28/PpGwl.jpg" referrerpolicy="no-referrer">
            </div><h2 id="talking-is-cheap-show-me-code"><code>Talking is cheap! Show me code!</code></h2>
<blockquote>
<p><a href="https://github.com/guzhongren/deno-restful-api-with-postgresql-tdd">源码地址：<code>Deno Restful API With PostgreSql &amp; TDD</code></a><sup>[1]</sup>
</p></blockquote>
<h2 id="简介">简介</h2>
<p><code>Deno</code> 是<code>ry(Ryan Dahl)</code>的新项目，近期发布了其 <code>1.0.0</code> 版，在开发圈子里掀起了不小的风浪，与之创建的 Node 运行时有异曲同工之妙，<code>真香定律</code>又一次出现了。</p>
<p>在软件开发中，为了开发出可维护，高质量的程序，使用<code>TDD</code>开发可以有效提升项目质量和开发效率。</p>
<p>在这篇博客中，我将使用<code>Deno</code>, <code>Typescript</code>, <code>PostgreSql</code>来开发一个用户管理的 <code>API</code> 接口。</p>
<h2 id="deno--oak">Deno &amp; oak</h2>
<p>下面都是来自官网的介绍，写的很通俗易懂，就不用我来解读了。</p>
<h3 id="deno">Deno</h3>
<blockquote>
<p>Deno 是一个简单、现代且安全的 JavaScript 和 TypeScript 运行时环境，其基于 V8 引擎并采用 Rust 编程语言构建。</p>
<ul>
<li>默认安全设置。除非 显式开启，否则没有文件、网络，也不能访问运行环境。</li>
<li>天生支持 TypeScript。</li>
<li>只有一个单一的可执行文件。</li>
<li>自带实用工具，例如依赖检查器（deno info）和 代码格式化工具（deno fmt）。</li>
<li>有一套经过审核（审计）的标准模块， 确保与 Deno 兼容： deno.land/std。</li>
</ul></blockquote>
<h3 id="oak"><a href="https://github.com/oakserver/oak">oak</a><sup>[2]</sup>
</h3>
<blockquote>
<p>A middleware framework for Deno&rsquo;s net server 🦕</p></blockquote>
<p><code>oak</code> 是借鉴 <code>Node</code> 框架<code>Koa</code>的设计思路开发的一个高性能的框架，其<code>洋葱模型</code>式的中间件等思路在开发中使用起来也是非常方便。</p>
<h2 id="目标">目标</h2>
<p>基于对以上的基础知识的认识，我们计划开发一个用户管理的<code>API</code>平台；对于后端简单来说，就是提供关于用户的增删改查（<code>CURD</code>）操作。所以我们的主要目标就是提供 4 个对用户<code>CURD</code>的接口。</p>
<h2 id="工具">工具</h2>
<blockquote>
<p>工欲善其事，必先利其器。</p></blockquote>
<h3 id="开发工具">开发工具</h3>
<p><a href="https://code.visualstudio.com/"><code>VS Code</code></a><sup>[3]</sup>
, <a href="https://www.docker.com/"><code>Docker</code></a><sup>[4]</sup>
</p>
<h3 id="环境工具">环境工具</h3>
<p><a href="https://deno.land/"><code>Deno</code></a><sup>[5]</sup>
, <a href="https://www.typescriptlang.org/"><code>Typescript</code></a><sup>[6]</sup>
, <a href="https://nodejs.org/"><code>Node</code></a><sup>[7]</sup>
</p>
<blockquote>
<p>注： Node 是用来调试 Deno 的</p></blockquote>
<h2 id="基础环境信息">基础环境信息</h2>
<p>我的环境信息如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ node -v
</span></span><span class="line"><span class="cl">v12.13.0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ deno --version
</span></span><span class="line"><span class="cl">deno 1.2.0
</span></span><span class="line"><span class="cl">v8 8.5.216
</span></span><span class="line"><span class="cl">typescript 3.9.2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ docker --version
</span></span><span class="line"><span class="cl">Docker version 19.03.8, build afacb8b</span></span></code></pre></div></div>
<p>其他信息</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">类型</th>
          <th style="text-align: center">版本</th>
          <th style="text-align: center">备注</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left"><a href="https://hub.docker.com/_/postgres">PostgreSql</a><sup>[8]</sup>
</td>
          <td style="text-align: center">12</td>
          <td></td>
      </tr>
      <tr>
          <td style="text-align: left"><a href="https://hub.docker.com/r/dpage/pgadmin4">PGAdmin</a><sup>[9]</sup>
</td>
          <td style="text-align: center">latest</td>
          <td></td>
      </tr>
  </tbody>
</table>
<h3 id="项目结构">项目结构</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ tree -L <span class="m">1</span> deno-restful-api-with-postgresql-tdd
</span></span><span class="line"><span class="cl">deno-restful-api-with-postgresql-tdd
</span></span><span class="line"><span class="cl">├── .github         // github action
</span></span><span class="line"><span class="cl">├── .vscode         // debug 及 vscode 配置文件
</span></span><span class="line"><span class="cl">├── LICENSE         // 仓库许可
</span></span><span class="line"><span class="cl">├── README.md       // 项目说明，包括数据库连接，简化后的运行命令等
</span></span><span class="line"><span class="cl">├── _resources      // 基础资源
</span></span><span class="line"><span class="cl">│   ├── IaaS        // 基础设施，docker-compose 启动 postgresql
</span></span><span class="line"><span class="cl">│   ├── httpClient  // http 请求测试
</span></span><span class="line"><span class="cl">│   └── migration   // 负责生成数据库表
</span></span><span class="line"><span class="cl">├── deps.ts         // 项目依赖的库及项目中要用到的资源（import）
</span></span><span class="line"><span class="cl">├── lock.json       // 完整性检查与锁定文件，参考：https://nugine.github.io/deno-manual-cn/linking_to_external_code/integrity_checking.html
</span></span><span class="line"><span class="cl">├── makefile        // 将开发需要的命令行简化后目录
</span></span><span class="line"><span class="cl">├── src             // 源代码目录
</span></span><span class="line"><span class="cl">└── tests           // 测试目录
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">5</span> directories, <span class="m">5</span> files</span></span></code></pre></div></div>
<h2 id="实现过程">实现过程</h2>
<blockquote>
<p>先说明一下，如果要用文字写完整个开发过程个人认为是没有必要的，所以就以最开始的<code>health</code>和<code>addUser</code>(<code>post</code>接口）为例， 其他接口请参考 <a href="https://github.com/guzhongren/deno-restful-api-with-postgresql-tdd">代码实现</a><sup>[1]</sup>
。</p></blockquote>
<h3 id="启动基础设施数据库并初始化数据表">启动基础设施（数据库）并初始化数据表</h3>
<h4 id="启动数据库">启动数据库</h4>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make db
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ./_resources/Iaas <span class="o">&amp;&amp;</span> docker-compose up -d
</span></span><span class="line"><span class="cl">Starting iaas_db_1 ... <span class="k">done</span>
</span></span><span class="line"><span class="cl">Starting iaas_pgadmin_1 ... <span class="k">done</span></span></span></code></pre></div></div>
<h4 id="登录pgadmin-在默认的数据库postgres中新建query并执行如下操作完成初始化数据库">登录<code>pgadmin</code>, 在默认的数据库<code>postgres</code>中新建<code>Query</code>并执行如下操作，完成初始化数据库</h4>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sql">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">public</span><span class="p">.</span><span class="s2">&#34;user&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="n">uuid</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">username</span><span class="w"> </span><span class="nb">character</span><span class="w"> </span><span class="nb">varying</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span><span class="w">  </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">registration_date</span><span class="w"> </span><span class="k">timestamp</span><span class="w"> </span><span class="k">without</span><span class="w"> </span><span class="n">time</span><span class="w"> </span><span class="k">zone</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">password</span><span class="w"> </span><span class="nb">character</span><span class="w"> </span><span class="nb">varying</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span><span class="w">  </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">deleted</span><span class="w"> </span><span class="nb">boolean</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span></span></span></code></pre></div></div>
<h3 id="src-最终目录">src 最终目录</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ tree -a -L <span class="m">4</span> src
</span></span><span class="line"><span class="cl">src
</span></span><span class="line"><span class="cl">├── Utils
</span></span><span class="line"><span class="cl">│   └── client.ts
</span></span><span class="line"><span class="cl">├── config.ts
</span></span><span class="line"><span class="cl">├── controllers
</span></span><span class="line"><span class="cl">│   ├── UserController.ts
</span></span><span class="line"><span class="cl">│   ├── health.ts
</span></span><span class="line"><span class="cl">│   └── model
</span></span><span class="line"><span class="cl">│       └── IResponse.ts
</span></span><span class="line"><span class="cl">├── entity
</span></span><span class="line"><span class="cl">│   └── User.ts
</span></span><span class="line"><span class="cl">├── exception
</span></span><span class="line"><span class="cl">│   ├── InvalidedParamsException.ts
</span></span><span class="line"><span class="cl">│   └── NotFoundException.ts
</span></span><span class="line"><span class="cl">├── index.ts
</span></span><span class="line"><span class="cl">├── middlewares
</span></span><span class="line"><span class="cl">│   ├── error.ts
</span></span><span class="line"><span class="cl">│   ├── logger.ts
</span></span><span class="line"><span class="cl">│   └── time.ts
</span></span><span class="line"><span class="cl">├── repositories
</span></span><span class="line"><span class="cl">│   └── userRepo.ts
</span></span><span class="line"><span class="cl">├── router.ts
</span></span><span class="line"><span class="cl">└── services
</span></span><span class="line"><span class="cl">    ├── UserService.ts
</span></span><span class="line"><span class="cl">    └── fetchResource.ts
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">8</span> directories, <span class="m">16</span> files</span></span></code></pre></div></div>
<p>在开始之前，我们先定义一些常用的结构体和对象，如：response，exception 等</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/controllers/model/IResponse.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="kr">interface</span> <span class="nx">IResponse</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">success</span>: <span class="kt">boolean</span><span class="p">;</span> <span class="c1">// 表示此次请求是否成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">msg?</span>: <span class="kt">String</span><span class="p">;</span>     <span class="c1">// 发生错误时的一些日志信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">data?</span>: <span class="kt">any</span><span class="p">;</span>       <span class="c1">// 请求成功时返回给前端的数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/entity/User.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="kr">interface</span> <span class="nx">IUser</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">id?</span>: <span class="kt">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">username?</span>: <span class="kt">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">password?</span>: <span class="kt">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">registrationDate?</span>: <span class="kt">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">deleted?</span>: <span class="kt">boolean</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">class</span> <span class="nx">User</span> <span class="kr">implements</span> <span class="nx">IUser</span> <span class="p">{}</span></span></span></code></pre></div></div>
<p>异常用来处理错误情况，在最终返回给用户结果的时候，我们不能将异常返回给用户，而是以一种更友好的方式返回，具体流程可以参考<code>src/middlewares/error.ts</code>这个中间件的处理方式。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/exception/InvalidedParamsException.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">InvalidedParamsException</span> <span class="kr">extends</span> <span class="nb">Error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">constructor</span><span class="p">(</span><span class="nx">message</span>: <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">super</span><span class="p">(</span><span class="sb">`Invalided parameters, please check, </span><span class="si">${</span><span class="nx">message</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/exception/NotFoundException.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">NotFoundException</span> <span class="kr">extends</span> <span class="nb">Error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">constructor</span><span class="p">(</span><span class="nx">message</span>: <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">super</span><span class="p">(</span><span class="sb">`Not found resource, </span><span class="si">${</span><span class="nx">message</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h3 id="依赖管理">依赖管理</h3>
<p>Deno 没有像 Node 一样的诸如<code>package.json</code>来管理依赖，因为<code>Deno</code>的依赖是去中心化的，也就是以远程文件作为库，这一点和<code>Golang</code>很像。</p>
<p>我将系统中用到的依赖存放在根目录的<code>deps.ts</code>中，在最终提交的时候做一次 <a href="https://nugine.github.io/deno-manual-cn/linking_to_external_code/integrity_checking.html"><code>完整性检查与锁定文件</code></a><sup>[10]</sup>
, 来保证我所有的依赖在与其他协作者之间是相同的。</p>
<p>首先导入用到的测试相关的依赖。<strong>在后面开发中用到的相关依赖请自行添加到本文件中。</strong> 比较重要的我会列出来。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">export</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assert</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">equal</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;https://deno.land/std/testing/asserts.ts&#34;</span><span class="p">;</span></span></span></code></pre></div></div>
<h3 id="测试先行">测试先行</h3>
<p>现在<code>tests</code>目录下新建一个测试命名为<code>index.test.ts</code>, 写基本测试，证明测试和程序是可以<code>work</code>的。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">assert</span><span class="p">,</span> <span class="nx">equal</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">test</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Deno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;should work&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">universal</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">equal</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="nx">universal</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assert</span><span class="p">(</span><span class="mi">42</span> <span class="o">===</span> <span class="nx">universal</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span></span></span></code></pre></div></div>
<h3 id="第一次运行测试">第一次运行测试</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make <span class="nb">test</span>
</span></span><span class="line"><span class="cl">deno <span class="nb">test</span> --allow-env --allow-net -L info
</span></span><span class="line"><span class="cl">Check file:///xxxx/deno-restful-api-with-postgresql-tdd/.deno.test.ts
</span></span><span class="line"><span class="cl">running <span class="m">1</span> tests
</span></span><span class="line"><span class="cl"><span class="nb">test</span> should work ... ok <span class="o">(</span>6ms<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">test</span> result: ok. <span class="m">1</span> passed<span class="p">;</span> <span class="m">0</span> failed<span class="p">;</span> <span class="m">0</span> ignored<span class="p">;</span> <span class="m">0</span> measured<span class="p">;</span> <span class="m">0</span> filtered out <span class="o">(</span>6ms<span class="o">)</span></span></span></code></pre></div></div>
<h3 id="建立测试固件">建立测试固件</h3>
<p>将测试中用到的通用的测试信息存放在测试固件（<code>testFixtures</code>）中，可以在测试中复用，且可以简化代码。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// tests/testFixtures.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="kr">const</span> <span class="nx">TEST_PORT</span> <span class="o">=</span> <span class="mi">9000</span></span></span></code></pre></div></div>
<h3 id="health-接口">health 接口</h3>
<p><code>health</code> 接口可以作为系统的健康检查的一个出口，在运维平台中非常实用。对于此接口，我们只需要返回一个状态<code>OK</code>即可。其他情况可忽略。那么对应的<code>Todo</code>应该如下：</p>
<blockquote>
<p>当访问到系统的时候，应该返回系统的状态，且为 OK。</p></blockquote>
<p>所以，测试代码如下：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Application</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Router</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">getHealthInfo</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../src/controllers/health.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span><span class="nx">TEST_PORT</span><span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;../testFixtures.ts&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">test</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Deno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;health check&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">expectResponse</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">success</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="s2">&#34;Ok&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">abortController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AbortController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span> <span class="nx">signal</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">abortController</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">router</span><span class="p">.</span><span class="kr">get</span><span class="p">(</span><span class="s2">&#34;/health&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">({</span> <span class="nx">response</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">getHealthInfo</span><span class="p">({</span> <span class="nx">response</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">({</span> <span class="nx">port</span>: <span class="kt">TEST_PORT</span><span class="p">,</span> <span class="nx">signal</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="sb">`http://127.0.0.1:</span><span class="si">${</span><span class="nx">TEST_PORT</span><span class="si">}</span><span class="sb">/health`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">responseJSON</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="nx">responseJSON</span><span class="p">,</span> <span class="nx">expectResponse</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">abortController</span><span class="p">.</span><span class="nx">abort</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span></span></span></code></pre></div></div>
<h4 id="given">given</h4>
<blockquote>
<ul>
<li>上面的代码中，首先声明了我们期望的数据结构，即<code>expectResponse</code>；</li>
<li>然后创建一个应用程序和一个路由，</li>
<li>再创建一个终止应用的控制器，且从中取到信号标识，</li>
<li>接着， 向路由中添加一个<code>health</code>路由及其 handler；</li>
<li>然后将路由挂在到应用程序上；</li>
<li>监听应用程序端口，且传入应用程序信号。</li>
</ul></blockquote>
<h4 id="when">when</h4>
<blockquote>
<ul>
<li>给启动的应用发一个 get 请求，请求路径为<code>/health</code>;</li>
</ul></blockquote>
<h4 id="then">then</h4>
<blockquote>
<ul>
<li>根据 fetch 到的结果进行判定，看收到的<code>response</code>是不是和期望的一致， 且在最后终止上面的应用程序。</li>
<li>到此，如果运行测试肯定会发生错误，解决问题的也很简单，就是去实现<code>getHealthInfo</code> handler。</li>
</ul></blockquote>
<h4 id="实现-gethealthinfo-handler">实现 <code>getHealthInfo</code> handler</h4>
<p>在 src/controller 下新建<code>health.ts</code>，并以最简单的方案实现上面期望的结果，如下：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/controllers/health.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span> <span class="nx">Response</span><span class="p">,</span> <span class="nx">Status</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">IResponse</span> <span class="kr">from</span> <span class="s2">&#34;./model/IResponse.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">getHealthInfo</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">response</span> <span class="p">}</span><span class="o">:</span> <span class="p">{</span> <span class="nx">response</span>: <span class="kt">Response</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="nx">Status</span><span class="p">.</span><span class="nx">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">res</span>: <span class="kt">IResponse</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">success</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="s2">&#34;Ok&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">response</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<h4 id="运行测试">运行测试</h4>
<p>运行测试命令，测试通过；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make <span class="nb">test</span>
</span></span><span class="line"><span class="cl">deno <span class="nb">test</span> --allow-env --allow-net -L info
</span></span><span class="line"><span class="cl">Check file://xxx/deno-restful-api-with-postgresql-tdd/.deno.test.ts
</span></span><span class="line"><span class="cl">running <span class="m">2</span> tests
</span></span><span class="line"><span class="cl"><span class="nb">test</span> should work ... ok <span class="o">(</span>6ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> health check ... ok <span class="o">(</span>3ms<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">test</span> result: ok. <span class="m">2</span> passed<span class="p">;</span> <span class="m">0</span> failed<span class="p">;</span> <span class="m">0</span> ignored<span class="p">;</span> <span class="m">0</span> measured<span class="p">;</span> <span class="m">0</span> filtered out <span class="o">(</span>9ms<span class="o">)</span></span></span></code></pre></div></div>
<p>至此，使用<code>TDD</code>完成第一个简单的<code>health</code>接口；但对外没有暴露接口，所以需要在<code>src</code>目录中实现一个对外暴露该接口的应用。</p>
<h5 id="新建configts-做应用程序的配置管理文件">新建<code>config.ts</code>， 做应用程序的配置管理文件</h5>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/config.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">env</span> <span class="o">=</span> <span class="nx">Deno</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">toObject</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">APP_HOST</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">APP_HOST</span> <span class="o">||</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">APP_PORT</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">APP_PORT</span><span class="p">)</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">API_VERSION</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">API_VERSION</span> <span class="o">||</span> <span class="s2">&#34;/api/v1&#34;</span><span class="p">;</span></span></span></code></pre></div></div>
<p>配置文件中，记录了应用程序启动的默认 host, 端口，及数据库相关的信息，最后记录了应用程序 api 的前缀。</p>
<p>在开始之前，需要在<code>deps.ts</code>中引入所需要的库；</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">export</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Application</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Router</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Response</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Status</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Request</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">RouteParams</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">RouterContext</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">helpers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">send</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;https://deno.land/x/oak/mod.ts&#34;</span><span class="p">;</span></span></span></code></pre></div></div>
<h5 id="新建路由-routerts-引入heathts并绑定路由">新建路由 <code>router.ts</code>, 引入<code>Heath.ts</code>并绑定路由</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/router.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span> <span class="nx">Router</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">API_VERSION</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;./config.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">getHealthInfo</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;./controllers/health.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">prefix</span><span class="p">(</span><span class="nx">API_VERSION</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">router</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="kr">get</span><span class="p">(</span><span class="s2">&#34;/health&#34;</span><span class="p">,</span> <span class="nx">getHealthInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">router</span><span class="p">;</span></span></span></code></pre></div></div>
<h5 id="新建indexts-建立应用程序">新建<code>index.ts</code>, 建立应用程序</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/index.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span> <span class="nx">Application</span><span class="p">,</span> <span class="nx">send</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">APP_HOST</span><span class="p">,</span> <span class="nx">APP_PORT</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;./config.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">router</span> <span class="kr">from</span> <span class="s2">&#34;./router.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">listenToServer</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">app</span>: <span class="kt">Application</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="sb">`Application started, and listen to </span><span class="si">${</span><span class="nx">APP_HOST</span><span class="si">}</span><span class="sb">:</span><span class="si">${</span><span class="nx">APP_PORT</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">hostname</span>: <span class="kt">APP_HOST</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">port</span>: <span class="kt">APP_PORT</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">secure</span>: <span class="kt">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">createApplication</span><span class="p">()</span><span class="o">:</span> <span class="nx">Promise</span><span class="p">&lt;</span><span class="nt">Application</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">main</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createApplication</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">await</span> <span class="nx">listenToServer</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h5 id="启动应用">启动应用</h5>
<p>如果是<code>VSCode</code>， 可以使用<code>F5</code>功能键，快速启动应用，在低版本的 <code>VS Code(1.47.2 以下）</code> 中可以启动调试。也可以以下命令启动；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make dev
</span></span><span class="line"><span class="cl">deno run --allow-net --allow-env ./src/index.ts
</span></span><span class="line"><span class="cl">数据库链接成功！
</span></span><span class="line"><span class="cl">Application started, and listen to 127.0.0.1:8000</span></span></code></pre></div></div>
<h5 id="调用接口测试结果">调用接口测试结果</h5>
<p>这里使用<code>VS Code</code> 的 <a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client"><code>Rest Client</code></a><sup>[11]</sup>
 插件进行辅助测试。</p>
<h6 id="请求体">请求体</h6>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>// _resources/httpClient/healthCheck.http
GET http://localhost:8000/api/v1/health HTTP/1.1</code></pre></div>
<h6 id="请求结果">请求结果</h6>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>HTTP/1.1 200 OK
content-length: 28
x-response-time: 0ms
content-type: application/json; charset=utf-8

{
  &#34;success&#34;: true,
  &#34;data&#34;: &#34;Ok&#34;
}</code></pre></div>
<p>至此，完成第一个接口，有 <code>Oak</code> 提供应用服务，经过了<code>Unit test</code>和 <code>RestClient</code>的测试。完成了开始的<code>Todo</code>。</p>
<h3 id="添加用户接口-adduser">添加用户接口 (<code>addUser</code>)</h3>
<p>添加用户涉及到<code>Controller</code>, <code>Service</code> 和 <code>Repository</code>, 所以我们分三步来实现该接口。</p>
<h4 id="controller">Controller</h4>
<p><code>Controller</code> 是控制层，对外提供服务；添加用户接口可以为系统添加用户，那么对应的<code>Todo</code>如下：</p>
<blockquote>
<ul>
<li>输入用户名和密码，返回特定数据结构的用户信息</li>
<li>参数必须输入，否则抛异常</li>
<li>如果输入错误参数，则抛异常</li>
</ul></blockquote>
<p>在此过程中，我们需要用到 <a href="https://github.com/udibo/mock"><code>mock</code></a><sup>[12]</sup>
 来 <code>mock</code> 第三方依赖。</p>
<p>导入所需依赖，并新建<code>UserController.test.ts</code>，在<code>Coding</code> 过程中需要实现<code>UserService</code>, 但不需要实现<code>addUser</code>方法； 测试如下：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// tests/controllers/UserController.test.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">stub</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Stub</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">v4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrowsAsync</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Application</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Router</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">UserController</span> <span class="kr">from</span> <span class="s2">&#34;../../src/controllers/UserController.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">IResponse</span> <span class="kr">from</span> <span class="s2">&#34;../../src/controllers/model/IResponse.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">UserService</span> <span class="kr">from</span> <span class="s2">&#34;../../src/services/UserService.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">IUser</span><span class="p">,</span> <span class="p">{</span> <span class="nx">User</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../src/entity/User.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">InvalidedParamsException</span> <span class="kr">from</span> <span class="s2">&#34;../../src/exception/InvalidedParamsException.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span><span class="nx">TEST_PORT</span><span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;../testFixtures.ts&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">test</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Deno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">userId</span> <span class="o">=</span> <span class="nx">v4</span><span class="p">.</span><span class="nx">generate</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">registrationDate</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">toISOString</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mockedUser</span>: <span class="kt">User</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">id</span>: <span class="kt">userId</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">username</span><span class="o">:</span> <span class="s2">&#34;username&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">registrationDate</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">deleted</span>: <span class="kt">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;#addUser should return added user when add user&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserService</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">queryAllStub</span>: <span class="kt">Stub</span><span class="p">&lt;</span><span class="nt">UserService</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">stub</span><span class="p">(</span><span class="nx">userService</span><span class="p">,</span> <span class="s2">&#34;addUser&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">expectResponse</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">success</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span>: <span class="kt">mockedUser</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">returns</span> <span class="o">=</span> <span class="p">[</span><span class="nx">mockedUser</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userController</span><span class="p">.</span><span class="nx">userService</span> <span class="o">=</span> <span class="nx">userService</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">abortController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AbortController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span> <span class="nx">signal</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">abortController</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&#34;/users&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">await</span> <span class="nx">userController</span><span class="p">.</span><span class="nx">addUser</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">({</span> <span class="nx">port</span>: <span class="kt">TEST_PORT</span><span class="p">,</span> <span class="nx">signal</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="sb">`http://127.0.0.1:</span><span class="si">${</span><span class="nx">TEST_PORT</span><span class="si">}</span><span class="sb">/users`</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;POST&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">body</span><span class="o">:</span> <span class="s2">&#34;name=name&amp;password=123&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Content-Type&#34;</span><span class="o">:</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">responseJSON</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="nx">responseJSON</span><span class="p">,</span> <span class="nx">expectResponse</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">abortController</span><span class="p">.</span><span class="nx">abort</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;#addUser should throw exception about no params given no params when add user&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserService</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">queryAllStub</span>: <span class="kt">Stub</span><span class="p">&lt;</span><span class="nt">UserService</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">stub</span><span class="p">(</span><span class="nx">userService</span><span class="p">,</span> <span class="s2">&#34;addUser&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">returns</span> <span class="o">=</span> <span class="p">[</span><span class="nx">mockedUser</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userController</span><span class="p">.</span><span class="nx">userService</span> <span class="o">=</span> <span class="nx">userService</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">abortController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AbortController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span> <span class="nx">signal</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">abortController</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&#34;/users&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">await</span> <span class="nx">assertThrowsAsync</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">await</span> <span class="nx">userController</span><span class="p">.</span><span class="nx">addUser</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">InvalidedParamsException</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;should given params: name ...&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">abortController</span><span class="p">.</span><span class="nx">abort</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">({</span> <span class="nx">port</span>: <span class="kt">TEST_PORT</span><span class="p">,</span> <span class="nx">signal</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="sb">`http://127.0.0.1:</span><span class="si">${</span><span class="nx">TEST_PORT</span><span class="si">}</span><span class="sb">/users`</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;POST&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">body</span><span class="o">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Content-Type&#34;</span><span class="o">:</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="o">!</span><span class="p">.</span><span class="nx">cancel</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;#addUser should throw exception about no correct params given wrong params when add user&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserService</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">queryAllStub</span>: <span class="kt">Stub</span><span class="p">&lt;</span><span class="nt">UserService</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">stub</span><span class="p">(</span><span class="nx">userService</span><span class="p">,</span> <span class="s2">&#34;addUser&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">returns</span> <span class="o">=</span> <span class="p">[</span><span class="nx">mockedUser</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userController</span><span class="p">.</span><span class="nx">userService</span> <span class="o">=</span> <span class="nx">userService</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">abortController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AbortController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span> <span class="nx">signal</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">abortController</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&#34;/users&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">await</span> <span class="nx">assertThrowsAsync</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">await</span> <span class="nx">userController</span><span class="p">.</span><span class="nx">addUser</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">InvalidedParamsException</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;should given param name and password&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">abortController</span><span class="p">.</span><span class="nx">abort</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">({</span> <span class="nx">port</span>: <span class="kt">TEST_PORT</span><span class="p">,</span> <span class="nx">signal</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="sb">`http://127.0.0.1:</span><span class="si">${</span><span class="nx">TEST_PORT</span><span class="si">}</span><span class="sb">/users`</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;POST&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">body</span><span class="o">:</span> <span class="s2">&#34;wrong=params&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Content-Type&#34;</span><span class="o">:</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="o">!</span><span class="p">.</span><span class="nx">cancel</span><span class="p">();</span></span></span></code></pre></div></div>
<p><code>controller</code> 这一层需要调用<code>service</code>的服；作为<code>service</code>，对于<code>controller</code>是一个第三方服务，因此需要将<code>service</code>的方法<code>mock</code>，并以参数的形式传入<code>Controller</code>; 下面这段代码就是<code>mock</code>的应用；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserService</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">queryAllStub</span>: <span class="kt">Stub</span><span class="p">&lt;</span><span class="nt">UserService</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">stub</span><span class="p">(</span><span class="nx">userService</span><span class="p">,</span> <span class="s2">&#34;addUser&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">expectResponse</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">success</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span>: <span class="kt">mockedUser</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">returns</span> <span class="o">=</span> <span class="p">[</span><span class="nx">mockedUser</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userController</span><span class="p">.</span><span class="nx">userService</span> <span class="o">=</span> <span class="nx">userService</span><span class="p">;</span></span></span></code></pre></div></div>
<p>在此解释两个测试，第一个测试即<code>#addUser should return added user when add user</code>;</p>
<h5 id="given-1">given</h5>
<blockquote>
<ul>
<li>mock <code>UserService</code>, 给 UserService 的 <code>addUser</code>方法打桩，并返回特定的用户结构；</li>
<li>新建测试服务，并将 <code>UserController</code>注册给 post 接口 <code>/users</code>;</li>
</ul></blockquote>
<h5 id="when-1">when</h5>
<blockquote>
<ul>
<li>传入正确的 form 类型的参数，用<code>fetch</code>请求<code>http://127.0.0.1:9000/users</code>;</li>
</ul></blockquote>
<h5 id="then-1">then</h5>
<blockquote>
<ul>
<li>对获取到的结果进行判定，并中断测试应用，将打桩的方法恢复。</li>
</ul></blockquote>
<p>在此解释两个测试，第二个测试即<code>#addUser should throw exception about no params given no params when add user</code>; <code>given</code>和<code>when</code>与第一个测试的<code>given</code>和<code>when</code>查不多，只是<code>body</code>参数为空；最重要的不同点是这次的<code>then</code>是在<code>when</code>里面，因为抛异常会在<code>handler</code>上抛，所以，需要将<code>then</code>的判定放在<code>handler</code> 上。这里用到了<code>Deno</code>的<code>assertThrowsAsync</code>来捕获异常并判定异常。</p>
<h5 id="given-2">given</h5>
<blockquote>
<ul>
<li><code>mock</code> <code>UserService</code>, 给 UserService 的 <code>addUser</code>方法打桩，并返回特定的用户结构；</li>
<li>新建测试服务，并将 <code>UserController</code>注册给 post 接口 <code>/users</code>;</li>
</ul></blockquote>
<h5 id="when-2">when</h5>
<blockquote>
<ul>
<li>给<code>body</code>传入空参数，用<code>fetch</code>请求<code>http://127.0.0.1:9000/users</code>;</li>
</ul></blockquote>
<h5 id="then-2">then</h5>
<blockquote>
<ul>
<li><code>then</code>部分处于<code>given</code>的路由处理<code>handler</code>中，对异常进行捕获并判定，接着中断测试应用，将打桩的方法恢复。</li>
</ul></blockquote>
<h5 id="运行测试-1">运行测试</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make <span class="nb">test</span>
</span></span><span class="line"><span class="cl">deno <span class="nb">test</span> --allow-env --allow-net -L info
</span></span><span class="line"><span class="cl">Check file:///xxx/deno-restful-api-with-postgresql-tdd/.deno.test.ts
</span></span><span class="line"><span class="cl">running <span class="m">5</span> tests
</span></span><span class="line"><span class="cl"><span class="nb">test</span> should work ... ok <span class="o">(</span>5ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should return added user when add user ... ok (21ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should throw exception about no params given no params when add user ... ok (4ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should throw exception about no correct params given wrong params when add user ... ok (3ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> health check ... ok <span class="o">(</span>4ms<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">test</span> result: ok. <span class="m">5</span> passed<span class="p">;</span> <span class="m">0</span> failed<span class="p">;</span> <span class="m">0</span> ignored<span class="p">;</span> <span class="m">0</span> measured<span class="p">;</span> <span class="m">0</span> filtered out <span class="o">(</span>37ms<span class="o">)</span></span></span></code></pre></div></div>
<h4 id="service">Service</h4>
<p><code>Service</code>是服务层，通过组合其他服务和调用底层数据接口层提供服务；对于用户添加，对于添加用户的<code>Service</code>, 我们只需要将用户对象传递过来，然后由<code>Repository</code>来处理；所以，我们的<code>Todo</code>对应如下：</p>
<blockquote>
<p>当传入期望的用户信息，可返回特定数据结构的用户信息</p></blockquote>
<p>新建<code>UserService.test.ts</code>， 并导入相关依赖；</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// tests/services/UserService.test.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">stub</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Stub</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">v4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">UserRepo</span> <span class="kr">from</span> <span class="s2">&#34;../../src/repositories/userRepo.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">UserService</span> <span class="kr">from</span> <span class="s2">&#34;../../src/services/UserService.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">IUser</span> <span class="kr">from</span> <span class="s2">&#34;../../src/entity/User.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">test</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Deno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;UserService #addUser should return added user&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">parameter</span>: <span class="kt">IUser</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">username</span><span class="o">:</span> <span class="s2">&#34;username&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">password</span><span class="o">:</span> <span class="s2">&#34;password&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">registrationDate</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">toISOString</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">v4</span><span class="p">.</span><span class="nx">generate</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mockedUser</span>: <span class="kt">IUser</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span><span class="nx">parameter</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">registrationDate</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">deleted</span>: <span class="kt">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userRepo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserRepo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">createUserStub</span>: <span class="kt">Stub</span><span class="p">&lt;</span><span class="nt">UserRepo</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">stub</span><span class="p">(</span><span class="nx">userRepo</span><span class="p">,</span> <span class="s2">&#34;create&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">createUserStub</span><span class="p">.</span><span class="nx">returns</span> <span class="o">=</span> <span class="p">[</span><span class="nx">mockedUser</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserService</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userService</span><span class="p">.</span><span class="nx">userRepo</span> <span class="o">=</span> <span class="nx">userRepo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="k">await</span> <span class="nx">userService</span><span class="p">.</span><span class="nx">addUser</span><span class="p">(</span><span class="nx">parameter</span><span class="p">),</span> <span class="nx">mockedUser</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">createUserStub</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span></span></span></code></pre></div></div>
<p>代码逻辑很简单，基本不需要解释。运行测试肯定会失败，为了让代码通过测试，编写<code>UserService.ts</code>, 在<code>UserService.ts</code>中调用<code>Repository</code>的<code>create</code>方法。所以，也需要简单实现<code>UserRepo</code>，只需要添加<code>create</code>方法即可。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/services/UserService.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="nx">UserRepo</span> <span class="kr">from</span> <span class="s2">&#34;../repositories/userRepo.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">IUser</span> <span class="kr">from</span> <span class="s2">&#34;../entity/User.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">UserService</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">userRepo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserRepo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userRepo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserRepo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">async</span> <span class="nx">addUser</span><span class="p">(</span><span class="nx">user</span>: <span class="kt">IUser</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepo</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span></span></span></code></pre></div></div>
<h5 id="运行测试-2">运行测试</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make <span class="nb">test</span>
</span></span><span class="line"><span class="cl">deno <span class="nb">test</span> --allow-env --allow-net -L info
</span></span><span class="line"><span class="cl">Check file:///xxx/deno-restful-api-with-postgresql-tdd/.deno.test.ts
</span></span><span class="line"><span class="cl">running <span class="m">6</span> tests
</span></span><span class="line"><span class="cl"><span class="nb">test</span> should work ... ok <span class="o">(</span>5ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should return added user when add user ... ok (21ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should throw exception about no params given no params when add user ... ok (4ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should throw exception about no correct params given wrong params when add user ... ok (3ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> health check ... ok <span class="o">(</span>4ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserService <span class="c1">#addUser should return added user ... ok (1ms)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">test</span> result: ok. <span class="m">6</span> passed<span class="p">;</span> <span class="m">0</span> failed<span class="p">;</span> <span class="m">0</span> ignored<span class="p">;</span> <span class="m">0</span> measured<span class="p">;</span> <span class="m">0</span> filtered out <span class="o">(</span>38ms<span class="o">)</span></span></span></code></pre></div></div>
<h4 id="repository">Repository</h4>
<p><code>Repository</code>通常和数据库交互，将传入的数据持久化到数据库中；对于添加用户这个接口，我们的需求因该是将传入的信息以数据库要求的格式存储起来，并将结果返回给<code>Service</code>; 因此，<code>Todo</code>大致如下：</p>
<blockquote>
<ul>
<li>将传入的用户存入数据亏并返回特定数据结构的信息</li>
<li>如果参数中缺少基本字段则抛异常</li>
</ul></blockquote>
<p>测试如下：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// tests/repositories/UserRepo.test.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">stub</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Stub</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">v4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assert</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertMatch</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrowsAsync</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">UserRepo</span> <span class="kr">from</span> <span class="s2">&#34;../../src/repositories/userRepo.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">client</span> <span class="kr">from</span> <span class="s2">&#34;../../src/Utils/client.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">IUser</span> <span class="kr">from</span> <span class="s2">&#34;../../src/entity/User.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">NotFoundException</span> <span class="kr">from</span> <span class="s2">&#34;../../src/exception/NotFoundException.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">InvalidedParamsException</span> <span class="kr">from</span> <span class="s2">&#34;../../src/exception/InvalidedParamsException.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">test</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Deno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;UserRepo #create should return mocked User given username&amp;password when create&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">queryStub</span>: <span class="kt">Stub</span><span class="p">&lt;</span><span class="nt">Client</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">stub</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="s2">&#34;query&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mockedQueryResult</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">rowCount</span>: <span class="kt">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">queryStub</span><span class="p">.</span><span class="nx">returns</span> <span class="o">=</span> <span class="p">[</span><span class="nx">mockedQueryResult</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">parameter</span>: <span class="kt">IUser</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">username</span><span class="o">:</span> <span class="s2">&#34;username&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">password</span><span class="o">:</span> <span class="s2">&#34;password&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userRepo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserRepo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userRepo</span><span class="p">.</span><span class="nx">client</span> <span class="o">=</span> <span class="nx">client</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">createdUserResult</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">userRepo</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">parameter</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="nx">createdUserResult</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span> <span class="nx">parameter</span><span class="p">.</span><span class="nx">username</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="nx">createdUserResult</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span> <span class="nx">parameter</span><span class="p">.</span><span class="nx">password</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assert</span><span class="p">(</span><span class="nx">v4</span><span class="p">.</span><span class="nx">validate</span><span class="p">(</span><span class="nx">createdUserResult</span><span class="p">.</span><span class="nx">id</span><span class="o">!</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertMatch</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">createdUserResult</span><span class="p">.</span><span class="nx">registrationDate</span><span class="o">!</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="sr">/[\d]{4}-[\d]{2}-[\d]{2}T[\d]{2}:[\d]{2}:[\d]{2}\.[\d]{1,3}Z/</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">queryStub</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;UserRepo #create should throw exception given no value for field when create&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">parameter</span>: <span class="kt">IUser</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">username</span><span class="o">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">password</span><span class="o">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userRepo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserRepo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrowsAsync</span><span class="p">(</span><span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">await</span> <span class="nx">userRepo</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">parameter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span> <span class="nx">InvalidedParamsException</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;should supply valid username and password!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span></span></span></code></pre></div></div>
<p>因为<code>Repository</code>层要和数据库打交道，所以需要一个和数据库操作相应的处理工具库；在此我们期望通过使用<code>PostgreSql</code>自己的的<code>Client</code>来执行数据库操作。</p>
<p>在上面第一个测试代码中， 我们<code>mock</code>了<code>Client</code>的<code>query</code>方法，并且返回了预定的数据。接着调用<code>UserRepo</code>的<code>create</code>方法，判断返回数据的数据字段值与期望值是否一致。</p>
<p>运行测试依旧会失败，接下来以最简单的方式实现让测试通过。</p>
<p>导入<code>PostgreSql</code>相关的依赖；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">export</span> <span class="p">{</span> <span class="nx">Client</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;https://deno.land/x/postgres/mod.ts&#34;</span><span class="p">;</span></span></span></code></pre></div></div>
<p>及定义数据库连接信息</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/config.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="kr">const</span> <span class="nx">DB_HOST</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">DB_HOST</span> <span class="o">||</span> <span class="s2">&#34;localhost&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">DB_USER</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">DB_USER</span> <span class="o">||</span> <span class="s2">&#34;postgres&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">DB_PASSWORD</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">DB_PASSWORD</span> <span class="o">||</span> <span class="s2">&#34;0&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">DB_DATABASE</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">DB_DATABASE</span> <span class="o">||</span> <span class="s2">&#34;postgres&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">DB_PORT</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">DB_PORT</span> <span class="o">?</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">DB_PORT</span><span class="p">)</span> <span class="o">:</span> <span class="mi">5432</span><span class="p">;</span></span></span></code></pre></div></div>
<p>获取数据库连接的<code>Client</code>实例</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/Utils/client.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span> <span class="nx">Client</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">DB_HOST</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">DB_DATABASE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">DB_PORT</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">DB_USER</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">DB_PASSWORD</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../config.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">hostname</span>: <span class="kt">DB_HOST</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">database</span>: <span class="kt">DB_DATABASE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">user</span>: <span class="kt">DB_USER</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">password</span>: <span class="kt">DB_PASSWORD</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">port</span>: <span class="kt">DB_PORT</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">client</span><span class="p">;</span></span></span></code></pre></div></div>
<p>数据库应该在应用启动时连接，所以在<code>index.ts</code>引入<code>client</code>并建立连接和管理连接。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">main</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="o">+</span>  <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nx">connect</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="o">+</span>  <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">&#34;数据库链接成功！&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createApplication</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">   <span class="k">await</span> <span class="nx">listenToServer</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="o">+</span>  <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h5 id="重新启动测试">重新启动测试</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make <span class="nb">test</span>
</span></span><span class="line"><span class="cl">deno <span class="nb">test</span> --allow-env --allow-net -L info
</span></span><span class="line"><span class="cl">Check file:///xxx/deno-restful-api-with-postgresql-tdd/.deno.test.ts
</span></span><span class="line"><span class="cl">running <span class="m">8</span> tests
</span></span><span class="line"><span class="cl"><span class="nb">test</span> should work ... ok <span class="o">(</span>2ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserRepo <span class="c1">#create should return mocked User given username&amp;password when create ... ok (1ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserRepo <span class="c1">#create should throw exception given no value for field when create ... ok (1ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should return added user when add user ... ok (14ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should throw exception about no params given no params when add user ... ok (4ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should throw exception about no correct params given wrong params when add user ... ok (2ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> health check ... ok <span class="o">(</span>3ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserService <span class="c1">#addUser should return added user ... ok (1ms)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">test</span> result: ok. <span class="m">8</span> passed<span class="p">;</span> <span class="m">0</span> failed<span class="p">;</span> <span class="m">0</span> ignored<span class="p">;</span> <span class="m">0</span> measured<span class="p">;</span> <span class="m">0</span> filtered out <span class="o">(</span>28ms<span class="o">)</span></span></span></code></pre></div></div>
<h5 id="请求体-1">请求体</h5>
<p>由<code>RestClient</code>验证请求； 现在启动应用，发送如下请求；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>// _resources/httpClient/addUser.http
POST http://localhost:8000/api/v1/users HTTP/1.1
Content-Type: application/x-www-form-urlencoded

name=foo&amp;password=123</code></pre></div>
<h5 id="请求结果-1">请求结果</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>HTTP/1.1 201 Created
content-length: 149
x-response-time: 34ms
content-type: application/json; charset=utf-8

{
  &#34;success&#34;: true,
  &#34;data&#34;: {
    &#34;username&#34;: &#34;foo&#34;,
    &#34;password&#34;: &#34;123&#34;,
    &#34;id&#34;: &#34;7aea0bb7-e0bc-4f1f-a516-3a43f4e30fb6&#34;,
    &#34;registrationDate&#34;: &#34;2020-07-27T14:11:24.140Z&#34;
  }
}</code></pre></div>
<p>异常情况可以自己制造，在此就不演示了，至此完成用户添加的接口。</p>
<h2 id="打包">打包</h2>
<p>按照上面的步骤，我们可以完成查询单个用户 (<code>GET</code>:<code>/users/:id</code>), 查询所有用户 (<code>GET</code>:<code>/users</code>) 和删除 (<code>DELETE</code>:<code>/users/:id</code>) 等接口，快速且高效。当我们完成测试和接口后，使用<code>deno</code>的命令行工具，我们可以将整个工程打包为一个<code>.js</code>文件；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make bundle
</span></span><span class="line"><span class="cl">mkdir dist
</span></span><span class="line"><span class="cl">deno bundle src/index.ts dist/platform.js
</span></span><span class="line"><span class="cl">Bundle file:///xxx/deno-restful-api-with-postgresql-tdd/src/index.ts
</span></span><span class="line"><span class="cl">Emit <span class="s2">&#34;dist/platform.js&#34;</span> <span class="o">(</span>856.11 KB<span class="o">)</span></span></span></code></pre></div></div>
<p>对于<code>NodeJs</code>开发的后端应用，可怕的<code>node_modules</code>依赖在打包时会是个问题，一般的<code>Node</code>后端应用都是直接将环境变量更新一下，然后将其部署在生产环境；
开发者写的工程文件并没有多大，而应用依赖的<code>node_modules</code>大多时候时工程文件的几十倍甚至几百倍。然后<code>Deno</code>很好的解决了这个问题。</p>
<h2 id="启动应用-1">启动应用</h2>
<p>如有需要将打包好的<code>.js</code>拷贝到目标目录，只要有<code>Deno</code>环境，我们就可以直接启动应用；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make start
</span></span><span class="line"><span class="cl"><span class="nv">APP_PORT</span><span class="o">=</span><span class="m">1234</span> deno run --allow-net --allow-env ./dist/platform.js
</span></span><span class="line"><span class="cl">数据库链接成功！
</span></span><span class="line"><span class="cl">Application started, and listen to 127.0.0.1:1234</span></span></code></pre></div></div>
<h2 id="乱中取整">乱中取整</h2>
<p>通过学习<code>Deno</code>, 有了一些心得体会；</p>
<ul>
<li>兼容浏览器<code>API</code>,<code>Deno</code>工程可以使用<code>Javascript</code>和<code>Typescript</code>进行编程，大大降低了认知复杂度和学习难度；</li>
<li>如果使用<code>Typescript</code>开发，那么会避免<code>动态一时爽，重构火葬场</code>的尴尬局面，所以推荐使用<code>Typescript</code>来写应用；</li>
<li>去中心化仓库，以单文件的形式分发，在协作开发的时候，为了统一库版本，就需校验依赖的版本，<code>Deno</code>提供了生成<code>lock.json</code>的形式来保证不同协作者之间的版本依赖；</li>
<li>&hellip;</li>
</ul>
<p>最后感谢 <a href="https://yihaimen.github.io/">海门</a><sup>[13]</sup>
 和 <a href="https://github.com/hylerrix">亦乐</a><sup>[14]</sup>
 的校对与指导；在他们的帮助下，我顺利完成了这篇博客。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>源码地址：<code>Deno Restful API With PostgreSql &amp; TDD</code>: <a href="https://github.com/guzhongren/deno-restful-api-with-postgresql-tdd" rel="noopener noreferrer">https://github.com/guzhongren/deno-restful-api-with-postgresql-tdd</a></li><li>oak: <a href="https://github.com/oakserver/oak" rel="noopener noreferrer">https://github.com/oakserver/oak</a></li><li><code>VS Code</code>: <a href="https://code.visualstudio.com/" rel="noopener noreferrer">https://code.visualstudio.com/</a></li><li><code>Docker</code>: <a href="https://www.docker.com/" rel="noopener noreferrer">https://www.docker.com/</a></li><li><code>Deno</code>: <a href="https://deno.land/" rel="noopener noreferrer">https://deno.land/</a></li><li><code>Typescript</code>: <a href="https://www.typescriptlang.org/" rel="noopener noreferrer">https://www.typescriptlang.org/</a></li><li><code>Node</code>: <a href="https://nodejs.org/" rel="noopener noreferrer">https://nodejs.org/</a></li><li>PostgreSql: <a href="https://hub.docker.com/_/postgres" rel="noopener noreferrer">https://hub.docker.com/_/postgres</a></li><li>PGAdmin: <a href="https://hub.docker.com/r/dpage/pgadmin4" rel="noopener noreferrer">https://hub.docker.com/r/dpage/pgadmin4</a></li><li><code>完整性检查与锁定文件</code>: <a href="https://nugine.github.io/deno-manual-cn/linking_to_external_code/integrity_checking.html" rel="noopener noreferrer">https://nugine.github.io/deno-manual-cn/linking_to_external_code/integrity_checking.html</a></li><li><code>Rest Client</code>: <a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client" rel="noopener noreferrer">https://marketplace.visualstudio.com/items?itemName=humao.rest-client</a></li><li><code>mock</code>: <a href="https://github.com/udibo/mock" rel="noopener noreferrer">https://github.com/udibo/mock</a></li><li>海门: <a href="https://yihaimen.github.io/" rel="noopener noreferrer">https://yihaimen.github.io/</a></li><li>亦乐: <a href="https://github.com/hylerrix" rel="noopener noreferrer">https://github.com/hylerrix</a></li></ol>
            </div>]]></description></item><item><title>How to Encrypt Git Files</title><link>https://guzhongren.github.io/2020/07/how-to-encrypt-git-files/</link><pubDate>Sun, 12 Jul 2020 11:00:42 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/07/how-to-encrypt-git-files/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://s1.ax1x.com/2020/07/12/U32INn.png" referrerpolicy="no-referrer">
            </div><h2 id="为什么需要-crypt">为什么需要 crypt</h2>
<p>在开发过程中经常会遇到一个问题：</p>
<blockquote>
<p>怎么将敏感数据让特定的人获取到？</p></blockquote>
<p>常用的解决方法如下：</p>
<ul>
<li>使用如 AWS 的 KMS, ParameterStore 等服务，给不同的用户以访问该数据的角色；</li>
<li>有专人托管，在需要的时候联系他，由特定方式转发给你，如加密邮件等</li>
</ul>
<h3 id="分析">分析</h3>
<ul>
<li>对于第二种方式，相对简单粗暴，但是不利于管理。</li>
<li>第一种方案，你需要依托第三方服务，你得绝对信任他，相信他是不会出问题的；再者，你的数据管理也需要有特定的规范，不然你都不知道你存储了什么数据，更不知道有哪些数据。</li>
</ul>
<p>针对第一种情况，当我们的数据越来多的时候，我们需要将其状态可控起来，其实就是 <code>date as code</code>, 每次对数据的增删改查，我们都可以有追踪和数据保存。</p>
<h2 id="有哪些方案呢">有哪些方案呢？</h2>
<ul>
<li><a href="https://github.com/AGWA/git-crypt">git-crypt</a><sup>[1]</sup>
</li>
<li><a href="https://github.com/elasticdog/transcrypt">transcrypt</a><sup>[2]</sup>
</li>
</ul>
<p>在这里，我推荐使用 <code>git-crypt</code>, 其特点如下：</p>
<ul>
<li>加密后上传 git，在 git 上保存的是<code>二进制</code>文件；</li>
<li>分发<code>密钥</code>给可信开发人员，进行解密，维护配置文件；</li>
<li>解密后为明文内容，如需上传，不用再进行加密，工具<code>自动</code>（配合<code>git hook</code>) 会生成最新的二进制文件后上传；</li>
<li>由<code>c++</code>编写；</li>
<li>Mac 可以通过<code>brew 等</code>方式下载；</li>
<li>利用了加密工具<code>gpg</code>进行加密处理。</li>
</ul>
<h3 id="gpg">GPG</h3>
<p><img src="https://ruanyifeng.com/blogimg/asset/201307/bg2013071202.png" alt="GPG" /></p>
<p>要了解什么是 GPG，就要先了解 PGP。</p>
<p>1991 年，程序员 Phil Zimmermann 为了避开政府监视，开发了加密软件 PGP。这个软件非常好用，迅速流传开来，成了许多程序员的必备工具。但是，它是商业软件，不能自由使用。所以，自由软件基金会决定，开发一个 PGP 的替代品，取名为 GnuPG。这就是 GPG 的由来。</p>
<p>gpg 可以对密钥的<code>增删改查</code>进行操作，也可以将公钥发送到 pgp 等服务器，让别人搜索到你，具体操作可以参考阮一峰的这片博文 <a href="https://ruanyifeng.com/blog/2013/07/gpg.html">《GPG 入门教程》</a><sup>[3]</sup>
</p>
<h2 id="git-crypt-操作">git-crypt 操作</h2>
<h3 id="安装-gpg-和-git-crypt">安装 gpg 和 git-crypt</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">brew install git-crypt
</span></span><span class="line"><span class="cl">brew install gpg</span></span></code></pre></div></div>
<h3 id="gpg-version">gpg version</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gpg --version
</span></span><span class="line"><span class="cl">gpg <span class="o">(</span>GnuPG<span class="o">)</span> 2.2.19
</span></span><span class="line"><span class="cl">libgcrypt 1.8.5
</span></span><span class="line"><span class="cl">Copyright <span class="o">(</span>C<span class="o">)</span> <span class="m">2019</span> Free Software Foundation, Inc.
</span></span><span class="line"><span class="cl">License GPLv3+: GNU GPL version <span class="m">3</span> or later &lt;https://gnu.org/licenses/gpl.html&gt;
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Home: /Users/c4/.gnupg
</span></span><span class="line"><span class="cl">支持的算法：
</span></span><span class="line"><span class="cl">公钥： RSA, ELG, DSA, ECDH, ECDSA, EDDSA
</span></span><span class="line"><span class="cl">密文： IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
</span></span><span class="line"><span class="cl">    CAMELLIA128, CAMELLIA192, CAMELLIA256
</span></span><span class="line"><span class="cl">散列： SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
</span></span><span class="line"><span class="cl">压缩：  不压缩，ZIP, ZLIB, BZIP2</span></span></code></pre></div></div>
<h3 id="生成-gpg-userid">生成 gpg userId</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gpg --full-generate-key
</span></span><span class="line"><span class="cl">gpg <span class="o">(</span>GnuPG<span class="o">)</span> 2.2.19<span class="p">;</span> Copyright <span class="o">(</span>C<span class="o">)</span> <span class="m">2019</span> Free Software Foundation, Inc.
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">请选择您要使用的密钥类型：
</span></span><span class="line"><span class="cl">   <span class="o">(</span>1<span class="o">)</span> RSA 和 RSA （默认）
</span></span><span class="line"><span class="cl">   <span class="o">(</span>2<span class="o">)</span> DSA 和 Elgamal
</span></span><span class="line"><span class="cl">   <span class="o">(</span>3<span class="o">)</span> DSA（仅用于签名）
</span></span><span class="line"><span class="cl">   <span class="o">(</span>4<span class="o">)</span> RSA（仅用于签名）
</span></span><span class="line"><span class="cl">  <span class="o">(</span>14<span class="o">)</span> Existing key from card
</span></span><span class="line"><span class="cl">您的选择是？
</span></span><span class="line"><span class="cl">RSA 密钥的长度应在 <span class="m">1024</span> 位与 <span class="m">4096</span> 位之间。
</span></span><span class="line"><span class="cl">您想要使用的密钥长度？<span class="o">(</span>2048<span class="o">)</span> <span class="m">4096</span>
</span></span><span class="line"><span class="cl">请求的密钥长度是 <span class="m">4096</span> 位
</span></span><span class="line"><span class="cl">请设定这个密钥的有效期限。
</span></span><span class="line"><span class="cl">         <span class="nv">0</span> <span class="o">=</span> 密钥永不过期
</span></span><span class="line"><span class="cl">      &lt;n&gt;  <span class="o">=</span> 密钥在 n 天后过期
</span></span><span class="line"><span class="cl">      &lt;n&gt;w <span class="o">=</span> 密钥在 n 周后过期
</span></span><span class="line"><span class="cl">      &lt;n&gt;m <span class="o">=</span> 密钥在 n 月后过期
</span></span><span class="line"><span class="cl">      &lt;n&gt;y <span class="o">=</span> 密钥在 n 年后过期
</span></span><span class="line"><span class="cl">密钥的有效期限是？<span class="o">(</span>0<span class="o">)</span>
</span></span><span class="line"><span class="cl">密钥永远不会过期
</span></span><span class="line"><span class="cl">这些内容正确吗？ <span class="o">(</span>y/N<span class="o">)</span> y
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">GnuPG 需要构建用户标识以辨认您的密钥。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">真实姓名： guzhongren
</span></span><span class="line"><span class="cl">电子邮件地址： guzhongren@live.cn
</span></span><span class="line"><span class="cl">注释： guzhongren
</span></span><span class="line"><span class="cl">您选定了此用户标识：
</span></span><span class="line"><span class="cl">    “guzhongren <span class="o">(</span>guzhongren<span class="o">)</span> &lt;guzhongren@live.cn&gt;”
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">更改姓名（N）、注释（C）、电子邮件地址（E）或确定（O）/退出（Q）？ o
</span></span><span class="line"><span class="cl">我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘
</span></span><span class="line"><span class="cl">、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数
</span></span><span class="line"><span class="cl">发生器有更好的机会获得足够的熵。
</span></span><span class="line"><span class="cl">我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘
</span></span><span class="line"><span class="cl">、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数
</span></span><span class="line"><span class="cl">发生器有更好的机会获得足够的熵。
</span></span><span class="line"><span class="cl">gpg: 密钥 25DD25A47AEF036A 被标记为绝对信任
</span></span><span class="line"><span class="cl">gpg: 吊销证书已被存储为‘/Users/c4/.gnupg/openpgp-revocs.d/4FA612D2DB4244E7D64A1C1025DD25A47AEF036A.rev’
</span></span><span class="line"><span class="cl">公钥和私钥已经生成并被签名。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pub   rsa4096 2020-07-11 <span class="o">[</span>SC<span class="o">]</span>
</span></span><span class="line"><span class="cl">      4FA612D2DB4244E7D64A1C1025DD25A47AEF036A
</span></span><span class="line"><span class="cl">uid                      guzhongren <span class="o">(</span>guzhongren<span class="o">)</span> &lt;guzhongren@live.cn&gt;
</span></span><span class="line"><span class="cl">sub   rsa4096 2020-07-11 <span class="o">[</span>E<span class="o">]</span></span></span></code></pre></div></div>
<h3 id="获取-userid">获取 UserID</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gpg --list-secret-keys --keyid-format LONG
</span></span><span class="line"><span class="cl">gpg: 正在检查信任度数据库
</span></span><span class="line"><span class="cl">gpg: 绝对信任密钥 8823E362E95562B8 的公钥未找到
</span></span><span class="line"><span class="cl">gpg: marginals needed: <span class="m">3</span>  completes needed: <span class="m">1</span>  trust model: pgp
</span></span><span class="line"><span class="cl">gpg: 深度：0  有效性：  <span class="m">4</span>  已签名：  <span class="m">0</span>  信任度：0-，0q，0n，0m，0f，4u
</span></span><span class="line"><span class="cl">gpg: 下次信任度数据库检查将于 2022-01-26 进行
</span></span><span class="line"><span class="cl">/Users/c4/.gnupg/pubring.kbx
</span></span><span class="line"><span class="cl">----------------------------
</span></span><span class="line"><span class="cl">sec   rsa4096/25DD25A47AEF036A 2020-07-11 <span class="o">[</span>SC<span class="o">]</span>
</span></span><span class="line"><span class="cl">      4FA612D2DB4244E7D64A1C1025DD25A47AEF036A
</span></span><span class="line"><span class="cl">uid                 <span class="o">[</span> 绝对 <span class="o">]</span> guzhongren <span class="o">(</span>guzhongren<span class="o">)</span> &lt;guzhongren@live.cn&gt;
</span></span><span class="line"><span class="cl">ssb   rsa4096/DCC72940818AB355 2020-07-11 <span class="o">[</span>E<span class="o">]</span></span></span></code></pre></div></div>
<p><code>sec   rsa4096/25DD25A47AEF036A 2020-07-11 [SC]</code> 中 <code>25DD25A47AEF036A</code>就是 gpg userId</p>
<h2 id="git-crypt-操作-1">git-crypt 操作</h2>
<h3 id="初始化">初始化</h3>
<p>进入需要做加密的 git repo 做 git-crypt 初始化操作，并将上面获取到的 gpg userId 添加进去</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git-crypt init
</span></span><span class="line"><span class="cl">git-crypt add-gpg-user 25DD25A47AEF036A</span></span></code></pre></div></div>
<h3 id="加密文件过滤器gitattributes">加密文件过滤器<code>.gitattributes</code></h3>
<p>格式为： * filter=git-crypt diff=git-crypt ；如下，我需要加密<code>secretfile</code>, <code>*.key</code>和<code>secretdir/**</code>, 那么内容如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>secretfile filter=git-crypt diff=git-crypt
*.key filter=git-crypt diff=git-crypt
secretdir/** filter=git-crypt diff=git-crypt</code></pre></div>
<h3 id="清理-config-的-git-缓存">清理 config 的 git 缓存</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git rm -r –cached config</span></span></code></pre></div></div>
<h3 id="添加需要加密的文件和数据">添加需要加密的文件和数据</h3>
<p>在<code>secretdir</code>文件夹下添加 <code>secret.yaml</code>, 并添加如下内容：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">username:password</span></span></span></code></pre></div></div>
<h3 id="上传到-git-仓库">上传到 git 仓库</h3>
<p>此步不用担心你的<code>secret.yaml</code>文件以明文的形式上传，git-crypt 会在 commit 之前将过滤后的数据加密成二进制，所以不用担心在仓库中存储敏感信息。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git add .
</span></span><span class="line"><span class="cl">git commit -m ‘git-crypt’
</span></span><span class="line"><span class="cl">git push</span></span></code></pre></div></div>
<p>如果你去 git 仓库中浏览 secret.yaml 文件，会是一个二进制文件，如图：</p>
<p><img src="https://i.loli.net/2020/07/12/lXVnNw5EbKCcvhe.png" alt="git-crypt.png" /></p>
<h2 id="协作">协作</h2>
<p>与他人协作，别人需要知道对应解密的 key</p>
<h3 id="导出密钥">导出密钥</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git-crypt export-key ~/Desktop/git-crypt.key</span></span></code></pre></div></div>
<p>得到 git-crypt.key 后，将该密钥分发给可信的团队成员，团队成员将仓库 clone 下来后，使用如下命令解密即可</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git-crypt unlock /path/to/git-crypt.key</span></span></code></pre></div></div>
<p>此时，在本地就可以看到加密后的文件内容了。</p>
<h3 id="更新密钥">更新密钥</h3>
<p>因为 git-crypt 没有提供删除或者更新密钥的命令，所以参考了一个 issue: <a href="https://github.com/AGWA/git-crypt/issues/47#issuecomment-492939759;">https://github.com/AGWA/git-crypt/issues/47#issuecomment-492939759;</a><sup>[4]</sup>
 步骤如下：</p>
<ul>
<li>Make a backup (with decrypted files): cp -r . /path/to/backup</li>
<li>Save a list of files that are encrypted: git crypt status | grep -v &rsquo;not encrypted&rsquo; &gt; ../encrypted-files.txt</li>
<li>Make git-crypt forget about itself: rm .git-crypt</li>
<li>Delete the encrypted files: awk &lsquo;{print $2}&rsquo; ../encrypted-files.txt | xargs rm</li>
<li>Commit (at this point you get a repo without git-crypt stuff)</li>
<li>Add git-crypt from scratch (init and add-gpg-user)</li>
<li>Copy the decrypted files from the backup: awk &lsquo;{print $2}&rsquo; ../encrypted-files.txt | while read l; do cp /path/to/backup/$l $l; done</li>
<li>Commit (at this point you are done, but be sure to verify things are properly encrypted before publishing)</li>
</ul>
<p>实践结果：在更新完成之后，协作者需要重新 clone 仓库，然后用新的密钥来解密，对密钥管理者来说操作比较麻烦</p>
<h3 id="总结">总结</h3>
<p>在敏感数据越来越多的时候，作为开发者，我们更应该将所有的数据都<code>as code</code>, 为以后维护提供方便。<code>git-crypt</code>确实是一个比较好的选择。</p>
<p>但是<code>git-crypt</code>有一个最大的缺点：</p>
<ul>
<li>只能添加不能删除 gpg userId, 导致更新密钥会比较麻烦，如果要更新密钥，那么就需要做重置</li>
</ul>
<div class="references">
                <h2>参考</h2>
                <ol><li>git-crypt: <a href="https://github.com/AGWA/git-crypt" rel="noopener noreferrer">https://github.com/AGWA/git-crypt</a></li><li>transcrypt: <a href="https://github.com/elasticdog/transcrypt" rel="noopener noreferrer">https://github.com/elasticdog/transcrypt</a></li><li>《GPG 入门教程》: <a href="https://ruanyifeng.com/blog/2013/07/gpg.html" rel="noopener noreferrer">https://ruanyifeng.com/blog/2013/07/gpg.html</a></li><li>https://github.com/AGWA/git-crypt/issues/47#issuecomment-492939759;: <a href="https://github.com/AGWA/git-crypt/issues/47#issuecomment-492939759;" rel="noopener noreferrer">https://github.com/AGWA/git-crypt/issues/47#issuecomment-492939759;</a></li></ol>
            </div>]]></description></item><item><title>基于 Deno 的一次 TDD 实践</title><link>https://guzhongren.github.io/2020/07/%E5%9F%BA%E4%BA%8Edeno%E7%9A%84%E4%B8%80%E6%AC%A1tdd%E5%AE%9E%E8%B7%B5/</link><pubDate>Sun, 05 Jul 2020 10:23:18 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/07/%E5%9F%BA%E4%BA%8Edeno%E7%9A%84%E4%B8%80%E6%AC%A1tdd%E5%AE%9E%E8%B7%B5/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1593918092889-a4cd49ee8081?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1489&amp;q=80" referrerpolicy="no-referrer">
            </div><p>视频记录了我基于<code>Deno</code> Web 框架 <code>oak</code> 使用 <code>TDD</code>的方式写的一个简单的工程化的 demo。</p>
<iframe src="https://guzhongren.github.io///player.bilibili.com/player.html?aid=413678008&bvid=BV1uV41167Fo&cid=208888409&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 100%;min-height: 500px;> </iframe>
]]></description></item><item><title>Window 对象的各种测试方法总结</title><link>https://guzhongren.github.io/2020/06/window%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%90%84%E7%A7%8D%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 07 Jun 2020 11:21:14 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/06/window%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%90%84%E7%A7%8D%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1591510459618-ffd147f35f23?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=2089&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="前言">前言</h2>
<p>在平时前端项目开发中有很多需要对<code>window</code>对象进行进行操作，比如改变<code>window.location.href</code>的值，在前端页面中，这会使浏览器发生页面跳转，还有如<code>window.location.replace()</code>, 那么在测试中，虽然 jest 会有部分初始值，但有时候我们需要明确给定值，让测试更明确。</p>
<h2 id="window-对象测试分析">Window 对象测试分析</h2>
<p>window 对象有属性 (<code>property</code>) 和方法 (<code>method</code>), 在此我们以<code>href</code>, <code>window.location.href</code> + hash 和 <code>postMessage</code>几个特性来测试， 对每个类型 (property/method) 将使用至少三种方法来展示，测试方法可以分为如下四类：</p>
<ul>
<li>delete - 在原对象 window 上进行测试</li>
<li>Object.defineProperty - 重新定义属性</li>
<li>mockfile - mock 整个被测文件</li>
<li>spyOn - 对特定方法进行 mock</li>
</ul>
<h2 id="被测文件">被测文件</h2>
<p>在这可以不用遵循<code>TDD</code>的流程，直接给出被测文件内容，也可在 github</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-typescript">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">changeHref</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span>: <span class="kt">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">value</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">addHash</span> <span class="o">=</span> <span class="p">(</span><span class="nx">hash</span>: <span class="kt">string</span><span class="p">)</span><span class="o">:</span> <span class="kt">string</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">+</span> <span class="sb">`#</span><span class="si">${</span><span class="nx">hash</span><span class="si">}</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">sendMessage</span> <span class="o">=</span> <span class="p">(</span><span class="nx">message</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">window</span><span class="p">.</span><span class="nx">top</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="kr">type</span><span class="o">:</span> <span class="s1">&#39;message&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span>: <span class="kt">message</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span> <span class="s1">&#39;*&#39;</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h2 id="测试">测试</h2>
<h3 id="property---changehref">property - changeHref</h3>
<h4 id="delete">delete</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-typescript">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">changeHref</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;../src/attribute&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;attribute&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span> <span class="nx">location</span> <span class="p">}</span> <span class="o">=</span> <span class="nb">window</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">afterEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="nx">location</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should change href to http://test.com when newURL is http://test.com&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">newURL</span> <span class="o">=</span> <span class="s2">&#34;http://test.com&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="p">...</span><span class="nx">location</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">href</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">changeHref</span><span class="p">(</span><span class="nx">newURL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="nx">newURL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<h4 id="objectdefineproperty">Object.defineProperty</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-typescript">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">changeHref</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;../src/attribute&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;attribute&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">windowSpy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">windowSpy</span><span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;location&#39;</span><span class="p">,</span> <span class="s1">&#39;get&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">afterEach</span><span class="p">(()</span> <span class="o">=&gt;</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">windowSpy</span><span class="p">.</span><span class="nx">mockRestore</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;jest.spyOn&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;http://localhost/&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">newURL</span> <span class="o">=</span> <span class="s2">&#34;http://test.com&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">windowSpy</span><span class="p">.</span><span class="nx">mockImplementation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">href</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}))</span>
</span></span><span class="line"><span class="cl">    <span class="nx">changeHref</span><span class="p">(</span><span class="nx">newURL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">windowSpy</span><span class="p">).</span><span class="nx">toHaveBeenCalled</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<h4 id="spyon">spyOn</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-typescript">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">changeHref</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;../src/attribute&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;attribute&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">windowSpy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">windowSpy</span><span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;location&#39;</span><span class="p">,</span> <span class="s1">&#39;get&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">afterEach</span><span class="p">(()</span> <span class="o">=&gt;</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">windowSpy</span><span class="p">.</span><span class="nx">mockRestore</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;jest.spyOn&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;http://localhost/&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">newURL</span> <span class="o">=</span> <span class="s2">&#34;http://test.com&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">windowSpy</span><span class="p">.</span><span class="nx">mockImplementation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">        <span class="nx">href</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}))</span>
</span></span><span class="line"><span class="cl">    <span class="nx">changeHref</span><span class="p">(</span><span class="nx">newURL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">windowSpy</span><span class="p">).</span><span class="nx">toHaveBeenCalled</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<h3 id="method---addhash">method - addHash</h3>
<h4 id="delete-1">delete</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-typescript">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">addHash</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;../src/attribute&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;method&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span> <span class="nx">location</span> <span class="p">}</span> <span class="o">=</span> <span class="nb">window</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="p">...</span><span class="nx">location</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">href</span><span class="o">:</span> <span class="s1">&#39;http://href.com&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">afterEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="nx">location</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">it</span><span class="p">(</span><span class="s2">&#34;should return http://href.com#123 when give 123&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">addHash</span><span class="p">(</span><span class="s1">&#39;123&#39;</span><span class="p">)).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;http://href.com#123&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<h4 id="objectdefineproperty-1">Object.defineProperty</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-typescript">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">addHash</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;../src/attribute&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;method&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span> <span class="nx">location</span> <span class="p">}</span> <span class="o">=</span> <span class="nb">window</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;location&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">value</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">...</span><span class="nx">location</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">href</span><span class="o">:</span> <span class="s1">&#39;http://href.com&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">afterEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;location&#39;</span><span class="p">,</span> <span class="nx">location</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">it</span><span class="p">(</span><span class="s2">&#34;should return http://href.com#123 when give 123&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">expect</span><span class="p">(</span><span class="nx">addHash</span><span class="p">(</span><span class="s1">&#39;123&#39;</span><span class="p">)).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;http://href.com#123&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<h4 id="mockfile">mockFile</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-typescript">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="o">*</span> <span class="kr">as</span> <span class="nx">attribute</span> <span class="kr">from</span> <span class="s1">&#39;../src/attribute&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="s1">&#39;../src/attribute&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">__esModule</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">addHash</span>: <span class="kt">jest.fn</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">beforeEach</span><span class="p">(</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">jest</span><span class="p">.</span><span class="nx">resetModules</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;method&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;mocks `addHash`&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">jest</span><span class="p">.</span><span class="nx">isMockFunction</span><span class="p">(</span><span class="nx">attribute</span><span class="p">.</span><span class="nx">addHash</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;verify method has been invoked&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">attribute</span><span class="p">.</span><span class="nx">addHash</span><span class="p">).</span><span class="nx">not</span><span class="p">.</span><span class="nx">toHaveBeenCalled</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// will failed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// expect(attribute.addHash(&#39;test&#39;)).toEqual(&#39;http://localhost/#test&#39;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">attribute</span><span class="p">.</span><span class="nx">addHash</span><span class="p">(</span><span class="s1">&#39;234&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">attribute</span><span class="p">.</span><span class="nx">addHash</span><span class="p">).</span><span class="nx">toHaveBeenCalled</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">attribute</span><span class="p">.</span><span class="nx">addHash</span><span class="p">).</span><span class="nx">toBeCalledTimes</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">attribute</span><span class="p">.</span><span class="nx">addHash</span><span class="p">).</span><span class="nx">toBeCalledWith</span><span class="p">(</span><span class="s1">&#39;234&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<h4 id="spyon-1">spyOn</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-typescript">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">addHash</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;../src/attribute&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;method&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">windowSpy</span>
</span></span><span class="line"><span class="cl">  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">windowSpy</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;location&#39;</span><span class="p">,</span> <span class="s1">&#39;get&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">afterEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">windowSpy</span><span class="p">.</span><span class="nx">mockRestore</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;mocks `addHash`&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">jest</span><span class="p">.</span><span class="nx">isMockFunction</span><span class="p">(</span><span class="nx">windowSpy</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;spyOn for addHash&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">windowSpy</span><span class="p">.</span><span class="nx">mockImplementation</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="nx">href</span><span class="o">:</span> <span class="s1">&#39;http://test.com&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}))</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">windowSpy</span><span class="p">).</span><span class="nx">not</span><span class="p">.</span><span class="nx">toHaveBeenCalled</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">addHash</span><span class="p">(</span><span class="s1">&#39;123&#39;</span><span class="p">)).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;http://test.com#123&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">windowSpy</span><span class="p">).</span><span class="nx">toHaveBeenCalled</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<h3 id="method---postmessage">method - postMessage</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-typescript">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span><span class="nx">sendMessage</span><span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;../src/attribute&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;multiple&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;sendMessage test with multiple test method&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;top&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">value</span>: <span class="kt">window</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">writable</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">enumerable</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">configurable</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;postMessage&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">writable</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">value</span>: <span class="kt">jest.fn</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sendMessage</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">).</span><span class="nx">toHaveBeenCalled</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">).</span><span class="nx">toBeCalledTimes</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<blockquote>
<p>总结就是整理自己，方便自己，如若能方便他人，那就是意外了。</p></blockquote>
<p>源代码：<a href="https://github.com/AndorLab/test-window-object">https://github.com/AndorLab/test-window-object</a><sup>[1]</sup>
</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>https://github.com/AndorLab/test-window-object: <a href="https://github.com/AndorLab/test-window-object" rel="noopener noreferrer">https://github.com/AndorLab/test-window-object</a></li></ol>
            </div>]]></description></item><item><title>Cargo 运行出错及解决方案</title><link>https://guzhongren.github.io/2020/06/cargo%E8%BF%90%E8%A1%8C%E5%87%BA%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Sat, 06 Jun 2020 11:03:11 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/06/cargo%E8%BF%90%E8%A1%8C%E5%87%BA%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1591414855728-7e70d9a7b4e0?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1267&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="问题">问题</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ cargo run
</span></span><span class="line"><span class="cl">error: failed to run <span class="sb">`</span>rustc<span class="sb">`</span> to learn about target-specific information
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Caused by:
</span></span><span class="line"><span class="cl">  process didn<span class="err">&#39;</span>t <span class="nb">exit</span> successfully: <span class="sb">`</span>rustc - --crate-name ___ --print<span class="o">=</span>file-names -Zprofile -Ccodegen-units<span class="o">=</span><span class="m">1</span> -Copt-level<span class="o">=</span><span class="m">0</span> -Clink-dead-code -Coverflow-checks<span class="o">=</span>off -Zpanic_abort_tests -Cpanic<span class="o">=</span>abort --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print<span class="o">=</span>sysroot --print<span class="o">=</span>cfg<span class="sb">`</span> <span class="o">(</span><span class="nb">exit</span> code: 1<span class="o">)</span>
</span></span><span class="line"><span class="cl">--- stderr
</span></span><span class="line"><span class="cl">error: the option <span class="sb">`</span>Z<span class="sb">`</span> is only accepted on the nightly compiler<span class="sb">`</span></span></span></code></pre></div></div>
<p>最近更新了<code>rust</code>, 然后运行<code>cargo run</code>, 莫名其妙的出现了上面的问题。</p>
<h2 id="原因">原因</h2>
<p>在 rust 官网的 issue 里找解决方案，都是 open 状态的，没有实际意义。那么就得回到原始方式。
按照提示，说<code>Z</code> 这个参数仅适用于<code>nightly</code>版本的 rust 编译器，但是我用的是<code>stable</code>版本的 rust;</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ rustup show
</span></span><span class="line"><span class="cl">Default host: x86_64-apple-darwin
</span></span><span class="line"><span class="cl">rustup home:  /Users/c4/.rustup
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">stable-x86_64-apple-darwin <span class="o">(</span>default<span class="o">)</span>
</span></span><span class="line"><span class="cl">rustc 1.44.0 <span class="o">(</span>49cae5576 2020-06-01<span class="o">)</span></span></span></code></pre></div></div>
<p>版本确定，那么只能将语音归结到命令行某个地方有注入参数。第一个想到的就是环境变量，打开我的<code>~/.zshrc</code>, 果然在最下面找到了这么一条记录，看到<code>-Z</code>, 应该就是他了。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">RUSTFLAGS</span><span class="o">=</span><span class="s2">&#34;-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort&#34;</span></span></span></code></pre></div></div>
<h2 id="解决方案">解决方案</h2>
<p>删除该行记录，运行程序，成功输出<code>hello world</code>。</p>
]]></description></item></channel></rss>