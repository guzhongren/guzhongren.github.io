<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 谷中仁的博客</title><link>https://guzhongren.github.io/posts/</link><description>所有文章 | 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 28 Mar 2025 22:32:34 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>基于AI大模型开发一个Slack Bot的总结</title><link>https://guzhongren.github.io/2025/03/%E5%9F%BA%E4%BA%8Eai%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAslack-bot%E7%9A%84%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 28 Mar 2025 22:32:34 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/03/%E5%9F%BA%E4%BA%8Eai%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAslack-bot%E7%9A%84%E6%80%BB%E7%BB%93/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="起因">起因</h2>
<p>最近一个半月都在Beach，虽然离开了项目，但每天的生活比项目期间还要忙碌，同时也学到了很多新知识。</p>
<hr>
<p>在Beach期间，我参与了两个与AI相关的项目。虽然AI功能的开发占比不大，但通过代码学习了AI开发的相关模式，例如Google Cloud Platform、Terraform、Vertex AI、CrewAI以及Agent的编排。Agent编排在正式项目中尤为重要，因为AI无法一次性理解并完成复杂任务，需要将任务（Work）拆分为多个子任务（Task），通过编排的Agent组合完成。这种编排的控制逻辑和编码逻辑基本一致，主要包括顺序、循环和组合等基本形式。</p>
<hr>
<p>第一个项目是关于遗留系统维护质量评估的，涉及了许多新技术，例如CrewAI、Vertex AI、Streamlit、Hugging Face和Agent编排。在这个项目中，我首次使用Python Flask独立构建了一个后端服务，并结合Streamlit开发了服务端渲染的前端，为用户提供了优秀的交互体验。简单来说，这个功能类似于一个聊天记录的展示。</p>
<hr>
<p>第二个项目与SRE相关，目标是将可观测链路上的Alert转换为Incident，并通过<code>ChatOps</code>形式处理这些Incident。为此，我们需要一个集成AI功能的Bot来提升Incident处理效率。例如，当一个Manager加入Incident Channel时，需要一个简要的总结（当前Incident的情况总结）。这也是本文的来源。</p>
<h2 id="需求">需求</h2>
<p>在<code>ChatOps</code>中，当Manager加入Incident处理的聊天组时，需要及时获取当前Incident的处理情况，包括实时状态、关键行为以及可能的建议。</p>
<h2 id="基本流程">基本流程</h2>
<p>基于上述需求，我们需要为Chat设计一个Bot。这个Bot在接收到简单指令后，可以生成当前Incident的关键数据报告，类似于PIR（Post-Incident Report），但不需要那么详细。</p>
<div class="mermaid" id="id-1"></div>
<h2 id="开发流程">开发流程</h2>
<p>在开发过程中，我们需要完成以下任务：</p>
<ol>
<li>在Slack上创建一个Bot，作为用户与Slack之间的沟通桥梁。</li>
<li>使用无服务器函数处理Bot发送的请求，获取AI所需数据，并将其传递给AI模型，最终将AI返回的内容发送回Slack。</li>
</ol>
<h3 id="创建slack-bot">创建Slack Bot</h3>
<p>在<a href="https://api.slack.com/apps" target="_blank" rel="noopener noreffer ">Slack官网</a>上创建Bot有两种方式： 1, Manifest， 2，Scratch 方式</p>
<div class="mermaid" id="id-2"></div>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw" aria-hidden="true"></i>提示<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">创建Slack Bot需要Slack Workspace的管理员权限。</div>
        </div>
    </div>
<h4 id="manifest方式">Manifest方式</h4>
<p>这种方式相对简单，支持JSON和YAML格式，所有配置都集中在Manifest文件中。以下是一个YAML格式的示例：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">display_information</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">XBot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">bot_user</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">display_name</span><span class="p">:</span><span class="w"> </span><span class="l">XBot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">always_online</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">slash_commands</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">/summary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;ServerLess HTTPS URL&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="l">summary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">usage_hint</span><span class="p">:</span><span class="w"> </span><span class="l">it</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">should_escape</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">oauth_config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scopes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">bot</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">channels:join</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">channels:read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">chat:write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">chat:write.public</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">commands</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">channels:history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">app_mentions:read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">incoming-webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">settings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">event_subscriptions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">request_url</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;ServerLess HTTPS URL&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">bot_events</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">app_mention</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">interactivity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">is_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">request_url</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;ServerLess HTTPS URL&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">org_deploy_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">socket_mode_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">token_rotation_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span></span></span></code></pre></div></div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>示例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">ServerLess HTTPS URL: <a href="https://serverless.functions.url/x-bot" target="_blank" rel="noopener noreffer ">https://serverless.functions.url/x-bot</a></div>
        </div>
    </div>
<p>这种方式适合已经创建过一个Bot，需要重新创建的情况，例如测试完成后需要创建正式的Bot。</p>
<h4 id="scratch方式">Scratch方式</h4>
<p>按照提示逐步完成配置，涉及多个模块，例如<code>Basic Information</code>、<code>Socket Mode</code>、<code>Incoming Webhooks</code>、<code>Slash Command</code>、<code>OAuth &amp; Permissions</code>和<code>Event Subscriptions</code>等。具体权限可参考Manifest的YAML配置。</p>
<p>通过上述两种方式之一创建Bot后，需要获取以下Token，这些Token将在无服务器函数中使用：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">项目</th>
          <th style="text-align: left">位置</th>
          <th style="text-align: left">操作</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">SIGNING_SECRET</td>
          <td style="text-align: left"><code>Basic Information</code> -&gt; <code>Signing Secret</code></td>
          <td style="text-align: left">复制</td>
      </tr>
      <tr>
          <td style="text-align: left">SLACK_APP_TOKEN</td>
          <td style="text-align: left"><code>Basic Information</code> -&gt; <code>App-Level Tokens</code></td>
          <td style="text-align: left">点击<code>Generate Token and Scope</code>，命名并赋予<code>connections:write</code>权限</td>
      </tr>
      <tr>
          <td style="text-align: left">SLACK_BOT_TOKEN</td>
          <td style="text-align: left"><code>OAuth &amp; Permissions</code> -&gt; <code>OAuth Tokens</code></td>
          <td style="text-align: left">复制</td>
      </tr>
  </tbody>
</table>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>重要提示<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>在本地开发代码并与Slack测试时，启用<code>Socket Mode</code>可以避免每次都部署代码，从而节省时间和资源</li>
<li>启用<code>Socket Mode</code>时，如果多人开发同一个Bot，可能会收到彼此的请求返回结果。建议每人创建一个独立的Workspace以避免冲突</li>
<li>更改完配置之后，需要将 App 安装到你的 Workspace 中</li>
</ul>
</div>
        </div>
    </div>
<h3 id="创建无服务器函数处理用户请求">创建无服务器函数处理用户请求</h3>
<p>这里选择使用 Python 来作为Serferless 处理工具，并将其部署在云服务器上，比如 AWS Lambda, Azure Function， 或者 Google Cloud Platform 的Cloud Run Functions中，这里不讲工程构建之类的，直接给出部分参考代码。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">slack_bolt</span> <span class="kn">import</span> <span class="n">App</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">slack_bolt.adapter.flask</span> <span class="n">imp</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">vertexai</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">vertexai.preview.generative_models</span> <span class="kn">import</span> <span class="n">GenerativeModel</span><span class="p">,</span> <span class="n">GenerationConfig</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">token</span><span class="o">=</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;SLACK_BOT_TOKEN&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">signing_secret</span><span class="o">=</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;SIGNING_SECRET&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">raise_error_for_unhandled_request</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="nd">@app.command</span><span class="p">(</span><span class="s2">&#34;/summary&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">handle_summary_command</span><span class="p">(</span><span class="n">ack</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">say</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">ack</span><span class="p">(</span><span class="s2">&#34;Thinking...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">channel_id</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s2">&#34;channel_id&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">check_channel_membership</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">channel_id</span><span class="p">,</span> <span class="n">say</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">slack_channel_histories</span> <span class="o">=</span> <span class="n">get_chat_history</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">channel_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">input</span> <span class="o">=</span> <span class="n">format_events</span><span class="p">(</span><span class="n">incident_id</span><span class="p">,</span> <span class="n">slack_channel_histories</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Use AI to summarize</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">system_prompt</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;</span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="s1">    You are an operations analysis expert. You .....
</span></span></span><span class="line"><span class="cl"><span class="s1">    ......
</span></span></span><span class="line"><span class="cl"><span class="s1">    Output format:
</span></span></span><span class="line"><span class="cl"><span class="s1">    ......
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">vertexai</span><span class="o">.</span><span class="n">init</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">project</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;GCP_PROJECT&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">location</span><span class="o">=</span><span class="s2">&#34;us-central1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span> <span class="o">=</span> <span class="n">GenerativeModel</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">model_name</span><span class="o">=</span><span class="s2">&#34;gemini-2.0-flash&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">system_instruction</span><span class="o">=</span><span class="p">[</span><span class="n">system_prompt</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">gen_config</span> <span class="o">=</span> <span class="n">GenerationConfig</span><span class="p">(</span><span class="n">temperature</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">generate_content</span><span class="p">([</span><span class="n">prompt</span><span class="p">],</span> <span class="n">generation_config</span><span class="o">=</span><span class="n">gen_config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span>
</span></span><span class="line"><span class="cl">    <span class="n">say</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">blocks</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;header&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;plain_text&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;Here is the summary of the incident:&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;section&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;mrkdwn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="n">summary</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">handler</span> <span class="o">=</span> <span class="n">SlackRequestHandler</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Main</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">slack_bot</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="n">handle</span><span class="p">(</span><span class="n">request</span><span class="p">)</span></span></span></code></pre></div></div>
<p>比如使用如下命令将这个程序部署在 GCP 中：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gcloud functions deploy x-bot <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --runtime python310 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --trigger-http <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --allow-unauthenticated <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --entry-point slack_bot <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --timeout<span class="o">=</span>120s <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --set-env-vars <span class="nv">GCP_PROJECT</span><span class="o">=</span><span class="s1">&#39;&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --set-env-vars <span class="nv">SLACK_BOT_TOKEN</span><span class="o">=</span><span class="s1">&#39;&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --set-env-vars <span class="nv">SIGNING_SECRET</span><span class="o">=</span><span class="s1">&#39;&#39;</span></span></span></code></pre></div></div>
<h2 id="注意事项">注意事项</h2>
<p>部署好Serverless Function 之后，需要将Serverless Function 的访问的 URL 添加到 Slack App 的配置中；</p>
<ul>
<li>将 <code>Socket Mode</code> 关闭</li>
<li>将 URL 填到 <code>Event Subscriptions</code>, 需要通过其校验</li>
<li>将 URL 填到 <code>Slash Commands</code> 添加的那个Command（<code>/summary</code>） 中</li>
</ul>
<h2 id="总结">总结</h2>
<p>Slack bot 的开发相对简单，大部分内容是简单的配置；重要的是将获取到的数据以某中特定的 Prompt ，并将其传递给 AI model 获取到准确的结果。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
<li><a href="https://api.slack.com/apps" target="_blank" rel="noopener noreffer ">Slack 官网:https://api.slack.com/apps</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>本地跑deepseek 7b模型</title><link>https://guzhongren.github.io/2025/02/%E6%9C%AC%E5%9C%B0%E8%B7%91deepseek-7b%E6%A8%A1%E5%9E%8B/</link><pubDate>Tue, 11 Feb 2025 22:31:58 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/02/%E6%9C%AC%E5%9C%B0%E8%B7%91deepseek-7b%E6%A8%A1%E5%9E%8B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="背景">背景</h2>
<p>最近，Deepseek 因其卓越的性能和高效的推理速度在技术圈内引起了广泛关注。</p>
<p>Deepseek 采用了先进的算法(使用汇编和 CUDA 混编的方式调用 GPU)和训练方法(蒸馏)，不仅显著提升了推理速度，还降低了对硬件配置的要求，使其能够在更多设备上运行。</p>
<p>然而，使用在线 Deepseek 服务时，用户可能会遇到“服务器繁忙，请稍后再试”的问题。</p>
<p>作为程序员，我们自然不能忍受这种情况，因此本文将指导你如何在本地搭建 Deepseek 模型。</p>
<h2 id="搭建步骤">搭建步骤</h2>
<h3 id="所需软件及环境">所需软件及环境</h3>
<h4 id="环境">环境</h4>
<ul>
<li><strong>操作系统</strong>: MacOS M1 (Sequoia [Version 15.3])</li>
</ul>
<h4 id="软件">软件</h4>
<ul>
<li><strong><a href="https://ollama.com/" target="_blank" rel="noopener noreffer ">Ollama</a></strong>: 用于管理和运行大模型。</li>
<li><strong><a href="https://chatboxai.app/" target="_blank" rel="noopener noreffer ">Chatbox AI</a></strong>: 提供与大模型交互的界面。</li>
</ul>
<h3 id="安装步骤">安装步骤</h3>
<h4 id="安装-ollama">安装 Ollama</h4>
<p>Ollama 可以通过命令行或手动下载安装包进行安装。手动安装后，系统会自动启动 Ollama 服务；而通过命令行安装后，则需要手动启动服务。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">brew install ollama
</span></span><span class="line"><span class="cl"><span class="c1"># 安装完成后，启动 Ollama 服务</span>
</span></span><span class="line"><span class="cl">ollama serve</span></span></code></pre></div></div>
<h4 id="运行-deepseek模型">运行 deepseek模型</h4>
<ol>
<li>访问 Ollama 模型库，搜索 deepseek。</li>
<li>选择 deepseek-r1 模型，并选择 7b 版本。</li>
<li>点击复制按钮，将命令行粘贴到终端中运行。Ollama 将自动拉取并启动该模型。</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ollama run deepseek-r1:7b</span></span></code></pre></div></div>
<h4 id="安装-chatbox">安装 Chatbox</h4>
<p>Chatbox 是与大模型进行交互的界面。你可以选择直接安装软件或通过 Docker 运行。推荐使用软件安装，以便快速启动和操作。</p>
<p>可安装软件或者通过docker 运行，推荐软件安装，可以快速启动软件来提速。</p>
<h4 id="配置">配置</h4>
<p>Chatbox 安装完成并且 deepseek 大模型运行起来后，在 Chatbox -&gt; Settings 中选择本地启动的模型即可。</p>
<h2 id="总结">总结</h2>
<p>随着人工智能技术的快速发展，社会分工可能会发生显著变化, 最明显的是人工智能会淘汰掉社会分工的中间层。</p>
<p>未来的趋势可能是：要么成为顶层的规则设计者，要么成为底层的实践者。通过本地搭建和运行 Deepseek 模型，我们不仅能够避免在线服务的限制，还能更深入地理解和掌握这一前沿技术。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
<li><a href="https://www.deepseek.com/" target="_blank" rel="noopener noreffer ">Deepseek:https://www.deepseek.com/</a></li>
<li><a href="https://ollama.com/" target="_blank" rel="noopener noreffer ">Ollama:https://ollama.com/</a></li>
<li><a href="https://chatboxai.app/" target="_blank" rel="noopener noreffer ">Chatbox AI:https://chatboxai.app/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>Home Assistant搭建和配置并配置米家集成极简教程</title><link>https://guzhongren.github.io/2025/01/home-assistant%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%B1%B3%E5%AE%B6%E9%9B%86%E6%88%90%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/</link><pubDate>Sun, 05 Jan 2025 21:55:05 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/01/home-assistant%E6%90%AD%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%B1%B3%E5%AE%B6%E9%9B%86%E6%88%90%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="小米发布home-assistant-集成">小米发布Home Assistant 集成</h2>
<p>2024年底，小米突然在 GitHub 上开源了<a href="https://github.com/XiaoMi/ha_xiaomi_home" target="_blank" rel="noopener noreffer ">基于Home Assistant的米家集成</a>，顿时引起热议，正好我家里也是小米的设备，并且也是个Home Assistant 小白，所以正好可以探索一波。</p>
<p>因为网上有很多关于Home Assistant的说明及安装教程, 在这推荐<a href="https://sspai.com/post/95117" target="_blank" rel="noopener noreffer ">正是入坑好时节：在米家官方支持之际，再聊新人 Home Assistant 入门</a>，我就不赘述了。</p>
<h2 id="基于-docker-的home-assistant-安装并集成小米集成">基于 Docker 的Home Assistant 安装并集成小米集成</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 创建本地路径用于挂在其道 Docker container 中</span>
</span></span><span class="line"><span class="cl">mkdir -p home-assistant/custom_components/hacs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启动 Home assistant 最新的镜像</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 设置时区</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 配置目录映射</span>
</span></span><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --name homeassistant <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --privileged <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --restart<span class="o">=</span>unless-stopped <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -e <span class="nv">TZ</span><span class="o">=</span>Asia/Shanghai <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -v ~/home-assistant:/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --network<span class="o">=</span>host <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>homeassistant/home-assistant
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在容器中安装HACS</span>
</span></span><span class="line"><span class="cl">docker <span class="nb">exec</span> -it homeassistant sh -c <span class="s2">&#34;mkdir -p /config/custom_components &amp;&amp; cd /config/custom_components &amp;&amp; wget -O - https://get.hacs.xyz | bash -&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">##===NOT IMPORTANT===</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Restart HA</span>
</span></span><span class="line"><span class="cl"><span class="c1"># `Add Intergration` to use HACS</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Authrizate HACS with GitHub</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Add `Custom repositories`</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Download</span>
</span></span><span class="line"><span class="cl"><span class="c1"># `Add Intergration` to use Xiaomi Home</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Auth via OAuth2 of xiaomi</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Chose phone or email</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Change url of `homeassistant.local` to localhost</span></span></span></code></pre></div></div>
<p>在正确操作如上步骤，重启Home Assistant 容器之后，访问 http://localhost:8123/ 就可以体验连接了自己家的小米账号的 Home Assistant 了。</p>
<h2 id="总结">总结</h2>
<p>小米发布的 Home Assistant集成确实很简单，实用, 就像大家说的，通过这次开源和发布，小米已经在家庭物联网这块占据了领导地位，为其后续各种设备集成，扩展奠定了坚实的基础。</p>
<p>如果小米后续推出其 NAS 集成，肯定又会收割一波 <code>流量</code>。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
<li><a href="https://sspai.com/post/95117" target="_blank" rel="noopener noreffer ">正是入坑好时节：在米家官方支持之际，再聊新人 Home Assistant 入门</a></li>
<li><a href="https://github.com/XiaoMi/ha_xiaomi_home" target="_blank" rel="noopener noreffer ">基于Home Assistant的米家集成</a></li>
<li><a href="https://github.com/hacs/get" target="_blank" rel="noopener noreffer ">HACS</a></li>
<li><a href="https://www.hacs.xyz/docs/use/configuration/options/#to-change-the-hacs-configuration-options" target="_blank" rel="noopener noreffer ">Configuration options</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>Git多 user 管理</title><link>https://guzhongren.github.io/2024/08/git%E5%A4%9Auser%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 17 Aug 2024 07:53:16 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2024/08/git%E5%A4%9Auser%E7%AE%A1%E7%90%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="痛点">痛点</h2>
<p>平时在一个电脑上会有不同的项目开发，尤其是个人项目和公司项目；</p>
<ul>
<li>通常，我们不希望工作在公司项目上的时候用自己个人的git 信息提交commit, 相反也是一样</li>
<li>在不同目录下，在命令行中切换git config 也是个重复劳动的工作，比较费精力</li>
</ul>
<h2 id="方案">方案</h2>
<h3 id="方案1不同的gitconfig配置">方案1：不同的gitconfig配置</h3>
<p>此方案的实现思路是，git 检测当前目录是否是已经配置的目录，如果是配置的目录，那么就加载对应的gitconfig</p>
<h4 id="步骤">步骤</h4>
<ul>
<li>更新<code>~/.gitconfig</code>, 按需追加并修复如下内容</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-git">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[includeIf &#34;gitdir:~/01.Project/&#34;]
</span></span><span class="line"><span class="cl">  path = ~/.gitconfigs/.gitconfig-personal
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[includeIf &#34;gitdir:~/04.company/&#34;]
</span></span><span class="line"><span class="cl">  path = ~/.gitconfigs/.gitconfig-company</span></span></code></pre></div></div>
<ul>
<li>建立相应的目录和文件，如~/.gitconfigs/.gitconfig-personal</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">mkdir -p ~/.gitconfigs1 <span class="o">&amp;&amp;</span> touch ~/.gitconfigs1/.gitconfig-personal</span></span></code></pre></div></div>
<ul>
<li>配置个人信息</li>
</ul>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-git">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[user]
</span></span><span class="line"><span class="cl">	email = personal@email.com
</span></span><span class="line"><span class="cl">	name = personalName
</span></span><span class="line"><span class="cl">	signingkey = signingkey
</span></span><span class="line"><span class="cl">[commit]
</span></span><span class="line"><span class="cl">	gpgsign = true
</span></span><span class="line"><span class="cl">[init]
</span></span><span class="line"><span class="cl">	defaultBranch = main
</span></span><span class="line"><span class="cl">[tag]
</span></span><span class="line"><span class="cl">	forceSignAnnotated = true
</span></span><span class="line"><span class="cl">[pull]
</span></span><span class="line"><span class="cl">	rebase = true
</span></span><span class="line"><span class="cl">[gpg]
</span></span><span class="line"><span class="cl">	program = gpg
</span></span><span class="line"><span class="cl">[core]
</span></span><span class="line"><span class="cl">	sshCommand = ssh -i ~/.ssh/id_github
</span></span><span class="line"><span class="cl">	ignorecase = false</span></span></code></pre></div></div>
<p>如上内容根据自己的需求更改即可。</p>
<h3 id="方案2简化git-config-命令">方案2：简化git config 命令</h3>
<h4 id="思路">思路</h4>
<p>使用git alias 执行命令加载不同的配置</p>
<h4 id="步骤-1">步骤</h4>
<ul>
<li>在~/.gitconfig中追加如下配置，并按需更改即可</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-git">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[alias]
</span></span><span class="line"><span class="cl">  personal = &#34;!f() { git config user.name &#39;personalUserName&#39; &amp;&amp; git config user.email &#39;personal@email.com&#39; &amp;&amp; git config --global user.signingkey KEY; }; f&#34;
</span></span><span class="line"><span class="cl">  company = &#34;!f() { git config user.name &#39;company&#39; &amp;&amp; git config user.email &#39;company@email.com&#39; &amp;&amp; git config --global user.signingkey KEY; }; f&#34;</span></span></code></pre></div></div>
<ul>
<li>使用时只需要执行一个git alias命令，如下</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git company</span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<p>99%的事物皆可自动化！</p>
<p>第一种方案自动化程度更高，更可取。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>MacOS 使用指纹解锁 Sudo 密码</title><link>https://guzhongren.github.io/2024/07/macos-%E4%BD%BF%E7%94%A8%E6%8C%87%E7%BA%B9%E8%A7%A3%E9%94%81-sudo-%E5%AF%86%E7%A0%81/</link><pubDate>Wed, 17 Jul 2024 13:01:36 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2024/07/macos-%E4%BD%BF%E7%94%A8%E6%8C%87%E7%BA%B9%E8%A7%A3%E9%94%81-sudo-%E5%AF%86%E7%A0%81/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="出发点">出发点</h2>
<p>我们平时用Mac电脑进行命令行操作的时候，可能需要使用<code>sudo</code> 进行操作，那么就得输入密码。但在Mac系统上，我们通常用指纹来作为密码管理器。</p>
<p>其实我们可以通过简单的配置就可以实现。</p>
<h2 id="解决步骤">解决步骤</h2>
<ul>
<li>编辑文件</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sha">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo vim /etc/pam.d/sudo</span></span></code></pre></div></div>
<ul>
<li>在文件最前面加入如下代码</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-text">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">auth       sufficient     pam_tid.so</span></span></code></pre></div></div>
<ul>
<li><code>wq!</code> 保存推出即可。</li>
</ul>
<h2 id="总结">总结</h2>
<p>配置即生产力。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>研发效能之度量</title><link>https://guzhongren.github.io/2024/03/%E7%A0%94%E5%8F%91%E6%95%88%E8%83%BD%E4%B9%8B%E5%BA%A6%E9%87%8F/</link><pubDate>Sun, 31 Mar 2024 22:06:49 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2024/03/%E7%A0%94%E5%8F%91%E6%95%88%E8%83%BD%E4%B9%8B%E5%BA%A6%E9%87%8F/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>在当前复杂的商业环境下，企业普遍倡导内部降本增效。在这种背景下，研发活动也越来越倾向于数字化度量和呈现。通过研发效能度量，组织能够获取更准确、全面的研发数据，从而更好地制定优化研发的决策和计划。</p>
<p>利用研发效能度量数据，组织可以更合理地管理和分配研发资源，进而提高研发效率和品质。这种优化不仅为企业在激烈的市场竞争中脱颖而出提供了有力支持，还为其展现更强的核心竞争力创造了更有利的条件。</p>
<h2 id="研发效能的范围">研发效能的范围</h2>
<p>研发效能的范围涵盖了研发活动的各个方面，主要包括以下几个方面：</p>
<ul>
<li>
<p>效率：评估需求前置时间，流动时间，流动速率等。</p>
</li>
<li>
<p>成本效能：衡量完成项目所需的成本，包括人力资源、设备、材料等方面的费用。</p>
</li>
<li>
<p>质量效能：评估研发产品或服务的质量水平，包括产品的可靠性、性能、用户体验等方面。</p>
</li>
<li>
<p>技术能力：评估组件或产品的可复用能力，可配置能力和可扩展能力等。</p>
</li>
<li>
<p>工程能力：评估变更前置时间，部署频率和测试覆盖率等。</p>
</li>
<li>
<p>协作能力：评估团队工作的流动效率，流动负载和流动分布等。</p>
</li>
</ul>
<p>这些方面共同构成了研发效能的范围，通过对这些方面的度量和评估，可以全面了解研发活动的表现和效果，从而进行有效的管理和优化。</p>
<p>这么多的效能面，从产品研发迭代过程来看，我们可以直接量化的是效率，工程能力和协作能力。</p>
<h2 id="当前研发效能的问题">当前研发效能的问题</h2>
<p>人人都在说效能，可没有人拿出数据来展示自己的效能。</p>
<p>人人都在说效能，可没有人说，除了 DORA Metrics 可以衡量部署，恢复等工作效率之外，还有哪些指标可以衡量团队所有人的效能。</p>
<p>人人都在说提效，但没人能说清楚使用了某个方法论之后，到底提效了多少。</p>
<h2 id="研发效能的难点">研发效能的难点</h2>
<h3 id="工具不统一">工具不统一</h3>
<p>大多数组织都在使用不用的工具进行项目管理和产品构建部署等，并没有统一的套件来组织整个流程; 比如有的组织在用 Jira 管理需求，也有的组织在用 Trello, 也有开源组织在用 GitHub 的 Issues 或者 <a href="https://github.com/kubernetes/kubernetes/projects/10" target="_blank" rel="noopener noreffer ">Projects</a>; 在部署工具中，有的组织在用Jenkins, Buildkite，有的组织也在用 <a href="" rel="">GitHub Actions</a>,<a href="" rel=""> GitLab Suites</a>; 在源代码控制方面，各个组织也有不同的选择，比如GitHub, GitLab 等版本控制工具。</p>
<h3 id="数据关系复杂">数据关系复杂</h3>
<p>一个组织下肯定会有不同的项目组或者团队，每个团队在看板上对每一列的定义可能不尽相同，那么在计算效能的时候就需要定制化地去选择对应的数据。比如一个Account 大家都在用Jira, 每个团队有自己的定义过的看板，那么在最终统计看板效能的时候，大家的维度都不一样，可想而知，其最终的结果肯定也是不准确的。</p>
<h3 id="统计维度多样">统计维度多样</h3>
<p>对于管理者，不同的人需要看到不同的维度，这样的统计才有意义。比如：</p>
<ul>
<li>作为项目经理(Project Manager)，我想知道团队交付趋势(Momentum), 从而可以看出项目是否有风险</li>
<li>作为交付经理(Delivery Manager)，我想知道当前迭代团队的交付指标(Metrics)，从而知道团队交付速率，数据和质量等</li>
<li>作为技术领导(Tech Lead)，我想知道团队冲刺速度(Velocity)和周期时间(Cycle time)，从而分析出每个超出预定目标卡的原因并找到对应的提升办法，并在下个迭代改进</li>
<li>&hellip;&hellip;</li>
</ul>
<h3 id="指标收集粗略且范围单一">指标收集粗略且范围单一</h3>
<p>当然，市场上存在多种收集，统计工具，比如</p>
<ul>
<li><a href="https://web.techdash.thoughtworks.net/" target="_blank" rel="noopener noreffer ">Tech Dash</a> Thoughtworks 内部统计 DORA Metrics 的统计工具</li>
<li><a href="https://www.sleuth.io/" target="_blank" rel="noopener noreffer ">Sleuth</a> 统计 DORA Metrics 的工具</li>
<li><a href="https://polaris.thoughtworks.net/" target="_blank" rel="noopener noreffer ">polaris</a> Thoughtworks 内部统计 DORA Metrics 的统计工具</li>
<li><a href="https://github.com/thoughtworks/metrik" target="_blank" rel="noopener noreffer ">Metrik</a> Thoughtworks 开源的 DORA Metrics 统计工具</li>
<li><a href="https://devlake.apache.org/" target="_blank" rel="noopener noreffer ">DevLake</a>, 收集，分析和可视化 DevOps 工具的零散数据，以提取卓越工程的洞见。</li>
<li><a href="https://github.com/GoogleCloudPlatform/fourkeys" target="_blank" rel="noopener noreffer ">Four Keys</a>, measures the four key metrics.</li>
<li><a href="https://github.com/kuona/kuona-project" target="_blank" rel="noopener noreffer ">Kuona project for IT Analytics</a>, provides a dashboard on data from various sources.</li>
<li><a href="https://github.com/anandbagmar/tta" target="_blank" rel="noopener noreffer ">Test Trend Analyzer</a>, consumes test results for test trends.</li>
<li><a href="https://github.com/thetestpeople/trt" target="_blank" rel="noopener noreffer ">TRT</a>, consumes test results for test trends.</li>
<li><a href="https://extensions-docs.gocd.org/analytics/current/" target="_blank" rel="noopener noreffer ">GoCD&rsquo;s analytics extension</a>, collects and displays build metrics for GoCD.</li>
<li><a href="https://www.pulse.codacy.com" target="_blank" rel="noopener noreffer ">pulse</a>, support the continuous improvement of your engineering teams with data-driven insights.</li>
<li><a href="https://jellyfish.co" target="_blank" rel="noopener noreffer ">Jellyfish</a>, translate and maximize the business impact of engineering.</li>
<li><a href="https://github.com/marketplace/buildpulse" target="_blank" rel="noopener noreffer ">BuildPulse</a>, automatically detects flaky tests.</li>
</ul>
<p>在此，我们选择如下部分工具进行对比并说明。</p>
<h2 id="解决方案对比">解决方案对比</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left"></th>
          <th style="text-align: left">Heartbeat</th>
          <th style="text-align: left">Sleuth</th>
          <th style="text-align: left">Metrik</th>
          <th style="text-align: left">DevLake</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">开源</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">免费</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">自动统计</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">人工表单收集</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
      </tr>
      <tr>
          <td style="text-align: left">社区活跃程度</td>
          <td style="text-align: left">🔋</td>
          <td style="text-align: left">🪫</td>
          <td style="text-align: left">➖</td>
          <td style="text-align: left">🔋</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 GitHub 作为版本控制工具</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 GitLab 作为版本控制工具</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 GitHub Actions 作为 Pipeline 工具</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 BuildKite 作为 Pipeline 工具</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 GitLab 套件作为 Pipeline 工具</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 Jenkins 作为 Pipeline 工具</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持度量 PR/MR 的前置时间</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持度量基于版本控制工具的特定分支的 DORA Metrics</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持自定义仓库统计</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持 Jira 作为项目管理工具</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持度量迭代完成点数</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持度量迭代完成卡数</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">支持按人统计迭代卡的时间分配</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
      </tr>
      <tr>
          <td style="text-align: left">支持度量每张卡在每个状态中的时间消耗</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
      </tr>
      <tr>
          <td style="text-align: left">支持度量返工（Rework）</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
      </tr>
      <tr>
          <td style="text-align: left">导出 DORA Metrics 报告</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
          <td></td>
      </tr>
      <tr>
          <td style="text-align: left">导出迭代内项目管理工具每张卡的时间消耗报告</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">❌</td>
          <td style="text-align: left">✅</td>
      </tr>
      <tr>
          <td style="text-align: left">多个迭代的图表展示</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
          <td style="text-align: left">✅</td>
      </tr>
  </tbody>
</table>
<p>从组织精准度量研发效能角度看，Heartbeat 统计的数据来源更多，比如统计 DORA Metrics 的数据源 Pipeline(BuildKite), 项目管理工具(Jira) 和版本控制工具(GitHub)，并且各个部分的自定义能力较强, 更能体现出交付质量和价值。</p>
<h3 id="heartbeat-的解决方案">Heartbeat 的解决方案</h3>
<h4 id="heartbeat-是什么">Heartbeat 是什么</h4>
<table>
  <thead>
      <tr>
          <th style="text-align: left"></th>
          <th></th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">对于</br> 目标用户/客户</td>
          <td style="text-align: left">TL, BA, PM, PO</td>
      </tr>
      <tr>
          <td style="text-align: left">谁</br> 需求/机会</td>
          <td style="text-align: left">1. 更好的了解交付效能</br> 2. 提高团队生产力和效率</td>
      </tr>
      <tr>
          <td style="text-align: left">产品</td>
          <td style="text-align: left">Heartbeat</td>
      </tr>
      <tr>
          <td style="text-align: left">是一个</br></td>
          <td style="text-align: left">可视化项目交付效能的开源工具</td>
      </tr>
      <tr>
          <td style="text-align: left">它可以</br>关键好处，使用的竞争理由</td>
          <td style="text-align: left">1. 整合3个开发与进度管理产品</br> 2. 自动计算8个交付性能指标</br> 3. 可以导出相关数据报告</td>
      </tr>
      <tr>
          <td style="text-align: left">相比于</br>主要竞争替代方案</td>
          <td style="text-align: left">Sleuth, Metrics 和 DevLake</td>
      </tr>
      <tr>
          <td style="text-align: left">优势</br>差异点</td>
          <td style="text-align: left">1. 自动从第三方获取数据并计算交付效能指标</br> 2. 从数据源获取的最真实的交付效能指标，而不是通过手动收集所得</td>
      </tr>
  </tbody>
</table>
<h4 id="为什么会有-heartbeat">为什么会有 Heartbeat</h4>
<p>在 Thoughtworks， 我们有 SDP(Sensible Default Practice) 来指导日常的软件工程开发工作，通过遵循 SDP 的最佳实践，组织可以提高研发效能；反之，通过分析收集到的各个指标，作为 TL 等角色的人，可以分析出哪些行为是团队所需要提升的，从而针对性地在找到最佳实践，近而采取行动来促进研发效能。</p>
<p></p>
<h2 id="总结">总结</h2>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>2023年终总结</title><link>https://guzhongren.github.io/2024/02/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link><pubDate>Sat, 03 Feb 2024 22:45:07 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2024/02/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="女儿">女儿</h2>
<p>新年开始，女儿就出生了，从刚开始的毫无力气到现在单手可以拿起手机，在家里随处乱跑，每一天都是新的一天。</p>
<p>娃很爱笑，从出生到现在感觉也就是屈指可数的哭过几次，要么是第一次打针疼了，要么是第一次从床上掉下来。</p>
<p>以前上班，我们跟她说再见，她几乎没有什么反应，但现在，每天早上我们快要出门的时候，就会缠着你让你抱抱，不抱的话还会哭。</p>
<p>从此，人的感情也越累越脆弱了。</p>
<h2 id="忙忙碌碌-却也碌碌无为">忙忙碌碌, 却也碌碌无为</h2>
<p>2023年，项目一塌糊涂。</p>
<h2 id="2024">2024</h2>
<p>&ldquo;家人最重要&rdquo; - 《燃爆点》， 正在看的一部电影。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>使用 setuptools 工具搭建 Python 工程</title><link>https://guzhongren.github.io/2023/10/%E4%BD%BF%E7%94%A8setuptools%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BApython%E5%B7%A5%E7%A8%8B/</link><pubDate>Fri, 13 Oct 2023 21:26:15 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/10/%E4%BD%BF%E7%94%A8setuptools%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BApython%E5%B7%A5%E7%A8%8B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>最近运维项目上要使用Pyspark进行报告生成，嗯，是的，运维项目的技术栈永远是你想象不到的。</p>
<p>有活就干，这形势只能“狗着”。</p>
<p>技术栈是Python, 硅基生命时代的基础之一； 工程化管理工具是<a href="https://setuptools.pypa.io/en/latest/userguide/index.html" target="_blank" rel="noopener noreffer ">setuptools</a>, 嗯，对我来说是新工具，在工作的8年里，第一次听说这个。这次的重点就是利用它来构建一个模块化的工程。 相对于前端架构而言，其就相当于 <code>package.json</code>。</p>
<h2 id="期望">期望</h2>
<p>基于 setuptools 产出一个模块化的工程，高级模块要依赖通用模块(commons)。</p>
<h2 id="工具介绍">工具介绍</h2>
<p>按照 setuptools 官网介绍，我们需要更新最新的 setuptools，安装 <code>build</code> 和 <code>whell</code>, 依赖管理会在 setuptools 的 <code>install_requires</code> 中体现，如下;</p>
<blockquote>
<p>pip 最好是 pip3, Python 最好是最新版的 Python3。</p>
</blockquote>
<h2 id="代码实践">代码实践</h2>
<h3 id="虚拟环境">虚拟环境</h3>
<p>在 Python 工程中，虚拟环境是一个非常重要的概念。 你可以随时创建纯净的虚拟环境开始你的（已有/新的）工程。 最简单的好处就是不会在系统级别相互影响。</p>
<p>在我们这个示例中，最简单的好处就是生成的包不会影响系统中已有的包。退出虚拟环境后，在虚拟环境中安装的包不会在系统中出现。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 在你合适的位置创建目录管理 Python 虚拟环境</span>
</span></span><span class="line"><span class="cl">mkdir myenv
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> myenv
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 Python 自带的 venv 来创建全新的虚拟环境</span>
</span></span><span class="line"><span class="cl">python3 -m venv myenv
</span></span><span class="line"><span class="cl"><span class="c1"># 激活当前环境，然后就可以切换目录到工程目录进行编码了</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> bin/activate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 退出当前虚拟环境</span>
</span></span><span class="line"><span class="cl">deactivate</span></span></code></pre></div></div>
<h3 id="setuptools">setuptools</h3>
<p>setuptools 是 Python 官方的工程构建工具。 其可以打包项目、打包 lib等。有三种配置格式， 分别为<code>pyproject.toml</code>、 <code>setup.cfg</code> 和 <code>setup.py</code>, 竟然不支持 yaml 语法。 官方不推荐 <code>setup.py</code> 这种形式，但其可读性真的好啊，因为我不是很喜欢 <code>toml</code>。</p>
<h3 id="目标工程">目标工程</h3>
<h4 id="文件结构">文件结构</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">tree -L <span class="m">3</span>
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── LICENSE
</span></span><span class="line"><span class="cl">├── setup.py
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── commons
</span></span><span class="line"><span class="cl">│   │   └── __init__.py
</span></span><span class="line"><span class="cl">│   ├── module1
</span></span><span class="line"><span class="cl">│   │   ├── __init__.py
</span></span><span class="line"><span class="cl">│   │   └── __main__.py
</span></span><span class="line"><span class="cl">│   └── timmins
</span></span><span class="line"><span class="cl">│       ├── __init__.py
</span></span><span class="line"><span class="cl">│       └── __main__.py
</span></span><span class="line"><span class="cl">└── tests
</span></span><span class="line"><span class="cl">    └── test.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">6</span> directories, <span class="m">8</span> files</span></span></code></pre></div></div>
<h3 id="setuppy">setup.py</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">setup</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;zhongren&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">version</span><span class="o">=</span><span class="s1">&#39;0.1.1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry_points</span><span class="o">=</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;console_scripts&#39;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hello-world = timmins:hello_world&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;module = module1:say_hello&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="n">install_requires</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;build&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;wheel&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></div></div>
<p>这个文件主要描述了工程的名字和版本，最重要的是 <code>entry_points</code> 和 <code>install_requires</code>。</p>
<ul>
<li><code>entry_points</code> 数组中的每一条记录都会被打包成一个可执行程序，在这里将会产生 <code>hell-world</code>和 <code>module</code> 两个可执行程序。</li>
<li><code>install_requires</code> 指定依赖的第三方库，这里不指定版本，使用最新版。</li>
</ul>
<h5 id="commons">commons</h5>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __init.py</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">something</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;commons say: &#34;</span> <span class="o">+</span> <span class="n">something</span><span class="p">)</span></span></span></code></pre></div></div>
<p><code>commons</code> 是项目公共方法，供高层模块调用。</p>
<h5 id="module1">module1</h5>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __init__.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">commons</span> <span class="kn">import</span> <span class="n">say</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">say_hello</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">say</span><span class="p">(</span><span class="s1">&#39;zhongren world&#39;</span><span class="p">)</span></span></span></code></pre></div></div>
<p>在 <code>__init__.py</code> 中，我们通过加载指定的绝对路径的方法，调用了 commons 模块中的 say 方法，实现了 <code>低耦合</code>。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __main__.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">say_hello</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">say_hello</span><span class="p">()</span></span></span></code></pre></div></div>
<p>在同样的工程下面，为什么还要有 <code>__main__.py</code>呢？</p>
<p>因为我们要将工程打包，并生成多个模块，在这里是模块 <code>module1</code>
和 <code>timmins</code>；并在模块中调用了底层模块的 <code>say</code> 方法。并且这部分会是可运行程序的<code>入口</code>。</p>
<h5 id="timmins">timmins</h5>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __init__.py</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello world&#34;</span><span class="p">)</span></span></span></code></pre></div></div>
<p>此模块只是暴露方法出去，相当于 lib。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __main__.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">hello_world</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello_world</span><span class="p">()</span></span></span></code></pre></div></div>
<p>此模块和 module1 的功能相同，只是调用了自己目录下 <code>Lib</code> 的方法。</p>
<h4 id="构建">构建</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python setup.py install
</span></span><span class="line"><span class="cl">......
</span></span><span class="line"><span class="cl">Processing zhongren-0.1.1-py3.11.egg
</span></span><span class="line"><span class="cl">Removing /usr/local/lib/python3.11/site-packages/zhongren-0.1.1-py3.11.egg
</span></span><span class="line"><span class="cl">Copying zhongren-0.1.1-py3.11.egg to /usr/local/lib/python3.11/site-packages
</span></span><span class="line"><span class="cl">Adding zhongren 0.1.1 to easy-install.pth file
</span></span><span class="line"><span class="cl">Installing hello-world script to /usr/local/bin
</span></span><span class="line"><span class="cl">Installing module script to /usr/local/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Installed /usr/local/lib/python3.11/site-packages/zhongren-0.1.1-py3.11.egg
</span></span><span class="line"><span class="cl">Processing dependencies <span class="k">for</span> <span class="nv">zhongren</span><span class="o">==</span>0.1.1
</span></span><span class="line"><span class="cl">Finished processing dependencies <span class="k">for</span> <span class="nv">zhongren</span><span class="o">==</span>0.1.1</span></span></code></pre></div></div>
<p>按照提示，打包后的模块已经被安装在了 <code>/usr/local/bin</code> 中了。我们可以使用两种方式进行验证。</p>
<ol>
<li>CMD</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">module
</span></span><span class="line"><span class="cl">&gt; commons say: zhongren world
</span></span><span class="line"><span class="cl">hello-world
</span></span><span class="line"><span class="cl">&gt; Hello world</span></span></code></pre></div></div>
<p>可以看到两个 <code>entry_points</code> 模块运行后的输出和我们在程序中定义的一致。</p>
<ol start="2">
<li>测试</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># test.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">timmins</span> <span class="kn">import</span> <span class="n">hello_world</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">module1</span> <span class="kn">import</span> <span class="n">say_hello</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">hello_world</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">say_hello</span><span class="p">()</span></span></span></code></pre></div></div>
<p>通过执行<code>python3 test</code>, 输出如下</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python3 tests/test.py
</span></span><span class="line"><span class="cl">&gt; Hello world
</span></span><span class="line"><span class="cl">&gt; commons say: zhongren world</span></span></code></pre></div></div>
<h4 id="wheel-构建">wheel 构建</h4>
<p>我们最终想要的肯定是一个可以部署的包（package）,在 Python 里，通常使用 <code>.whl</code> wheel 包来分享或者部署。</p>
<h5 id="打包-whl-包">打包 whl 包</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python3 setup.py bdist_wheel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">running bdist_wheel
</span></span><span class="line"><span class="cl">running build
</span></span><span class="line"><span class="cl">running build_py
</span></span><span class="line"><span class="cl">......
</span></span><span class="line"><span class="cl">running install_scripts
</span></span><span class="line"><span class="cl">creating build/bdist.macosx-13-x86_64/wheel/zhongren-0.1.1.dist-info/WHEEL
</span></span><span class="line"><span class="cl">creating <span class="s1">&#39;dist/zhongren-0.1.1-py3-none-any.whl&#39;</span> and adding <span class="s1">&#39;build/bdist.macosx-13-x86_64/wheel&#39;</span> to it
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;commons/__init__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;module1/__init__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;module1/__main__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;timmins/__init__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;timmins/__main__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/LICENSE&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/METADATA&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/WHEEL&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/entry_points.txt&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/top_level.txt&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/RECORD&#39;</span>
</span></span><span class="line"><span class="cl">removing build/bdist.macosx-13-x86_64/wheel</span></span></code></pre></div></div>
<p>可以看到 <code>zhongren-0.1.1-py3-none-any.whl</code> 在 <code>dist</code> 目录下被成功构建。</p>
<p>同样，可以使用安装命令来测试安装, 并用上面的<code>python3 tests/test.py</code> 来验证。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">pip3 install dist/zhongren-0.1.1-py3-none-any.whl
</span></span><span class="line"><span class="cl">Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
</span></span><span class="line"><span class="cl">Processing ./dist/zhongren-0.1.1-py3-none-any.whl
</span></span><span class="line"><span class="cl">Installing collected packages: zhongren
</span></span><span class="line"><span class="cl">Successfully installed zhongren-0.1.1</span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<p>学习最佳实践，可以节约时间，同时，也是真爱生命。</p>
<p>项目工程地址: <a href="https://github.com/beef-noodles/py-project" target="_blank" rel="noopener noreffer ">https://github.com/beef-noodles/py-project</a></p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
<li><a href="https://setuptools.pypa.io/en/latest/userguide/index.html" target="_blank" rel="noopener noreffer ">setuptools: https://setuptools.pypa.io/en/latest/userguide/index.html</a></li>
<li><a href="https://www.delftstack.com/howto/python/python-import-from-parent-directory/" target="_blank" rel="noopener noreffer ">Import Modules From Parent Directory in Python: https://www.delftstack.com/howto/python/python-import-from-parent-directory/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>使用Google Sheet Apps Script提升工作效率</title><link>https://guzhongren.github.io/2023/09/%E4%BD%BF%E7%94%A8google-sheet-apps-script%E6%8F%90%E5%8D%87%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/</link><pubDate>Wed, 13 Sep 2023 22:44:56 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/09/%E4%BD%BF%E7%94%A8google-sheet-apps-script%E6%8F%90%E5%8D%87%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>一切总是在往熵增大的方向发展。</p>
<h2 id="遇到的问题">遇到的问题</h2>
<p>团队周内每天需要都有个Code Diff 的会议来进行代码review, 但是不是每个人都有代码要被Review, 如果有个工具每天在Code Diff 前进行统计，大家有需要代码Review 的就在消息下面标记一下，或者回复一哈；如果大家有标记，那么再进行代码Review，是不是就可以省下一部分时间了？</p>
<p>团队内每周站会的主持人要轮流，要是大家轮流记，估计很快就乱了，如果有个工具，每周一早上在群里自动更新一哈是不是就更好了？对于Oncall 等活动也是一样，是不是就完美了？</p>
<p>这么多问题怎么解决呢？</p>
<p>肯定就是各种机器人啦。我们团队用的都是Google 的那套办公软件，而Google Sheet 是我们经常用来流程化记录内容的工具；同时Google Chat 是我们团队的沟通协作工具。</p>
<p>而Google 全家桶的好处就是其各个应用之间调用协作非常方便。那么我们就用Google Sheet 和Google Chat 来实现一个简单的机器人应用来干上面各种麻烦的事吧。</p>
<h2 id="google-chat-webhooks">Google Chat Webhooks</h2>
<p>Google Chat 的Webhooks 允许其他应用程序调用，并可以对消息进行<code>创建</code>、<code>读取</code> 、<code>更新</code> 和<code>删除</code>。如同对数据库的增删改差一般。</p>
<p></p>
<p>关于如何创建Google Chat webhooks 可以参考<a href="https://ploi.io/documentation/notifications/how-do-i-create-a-google-chat-webhook" target="_blank" rel="noopener noreffer ">这里</a>; 如果不想看这个链接，可以往下，在实践部分会有操作。</p>
<h2 id="google-sheet-apps-script">Google Sheet Apps Script</h2>
<p>Google Sheet 之于 Google Suite,就像 Excel 之于 Miscrosoft Office。Google Sheet 最强大的地方在于他支持自定义脚本，虽然其名为<code>Apps Script</code>, 文件格式为<code>.gs</code>， 但是其就是一些简单的<code>JavaScript</code> API, 其请求也是同步的API, 而且没有跨域问题，这就让其作为一个机器人有了初步条件。</p>
<p>当然 Google Sheet Apps Script 最基本的对 Sheet 的读写删都是非常容易的，但在这里需要明白其 API 结构。</p>
<p></p>
<p>从上图中可以看到</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">序号</th>
          <th style="text-align: left">说明</th>
          <th style="text-align: left">Note</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">1</td>
          <td style="text-align: left">SpreadsheetApp</td>
          <td></td>
      </tr>
      <tr>
          <td style="text-align: left">2</td>
          <td style="text-align: left">ActiveSheet</td>
          <td></td>
      </tr>
      <tr>
          <td style="text-align: left">3</td>
          <td style="text-align: left">DataRange</td>
          <td></td>
      </tr>
      <tr>
          <td style="text-align: left">4</td>
          <td style="text-align: left">Value</td>
          <td></td>
      </tr>
  </tbody>
</table>
<h2 id="实践">实践</h2>
<p>如下，我们实现一个每周一提醒团队谁是本周的站会主持人的机器人。</p>
<h3 id="创建google-chat-webhooks">创建Google Chat Webhooks</h3>
<p></p>
<p>点击创建好的Webhooks, 拷贝URL即可。</p>
<h3 id="创建google-sheet-轮转数据">创建Google Sheet 轮转数据</h3>
<p>新建Google Sheet，直接写入如下数据</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">xiaoming1
</span></span><span class="line"><span class="cl">xiaoming2
</span></span><span class="line"><span class="cl">xiaoming3
</span></span><span class="line"><span class="cl">xiaoming4
</span></span><span class="line"><span class="cl">xiaoming5
</span></span><span class="line"><span class="cl">xiaoming6	current
</span></span><span class="line"><span class="cl">xiaoming7
</span></span><span class="line"><span class="cl">xiaoming8
</span></span><span class="line"><span class="cl">xiaoming9
</span></span><span class="line"><span class="cl">xiaoming10</span></span></code></pre></div></div>
<h3 id="创建google-sheet-处理脚本">创建Google Sheet 处理脚本</h3>
<p>接下来在Google Sheet 中创建Apps Script; 位置：Menu-&gt;Extention-&gt; Apps Script;</p>
<p>在编辑器里可以编写处理Google Sheet 的代码，比如有个sheet.gs 里面处理Sheet 相关的操作，如下</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">CURRENT</span> <span class="o">=</span> <span class="s1">&#39;current&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">getTheNextStandupPerson</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">activeSheet</span> <span class="o">=</span> <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getActiveSheet</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">dataRange</span> <span class="o">=</span> <span class="nx">activeSheet</span><span class="p">.</span><span class="nx">getDataRange</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">standupList</span> <span class="o">=</span> <span class="nx">dataRange</span><span class="p">.</span><span class="nx">getValues</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">currentStandupPersonIndex</span> <span class="o">=</span> <span class="nx">standupList</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="nx">person</span> <span class="p">=&gt;</span> <span class="nx">person</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">===</span> <span class="nx">CURRENT</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">tempStandupPersonIndex</span> <span class="o">=</span> <span class="nx">currentStandupPersonIndex</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">nextStandupPersonIndex</span> <span class="o">=</span>  <span class="nx">tempStandupPersonIndex</span> <span class="o">&gt;=</span> <span class="nx">standupList</span><span class="p">.</span><span class="nx">length</span> <span class="o">?</span> <span class="mi">0</span><span class="o">:</span> <span class="nx">tempStandupPersonIndex</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">nextStandupPerson</span> <span class="o">=</span> <span class="nx">standupList</span><span class="p">.</span><span class="nx">find</span><span class="p">((</span><span class="nx">_</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">index</span> <span class="o">===</span> <span class="nx">nextStandupPersonIndex</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">currentStandupPersonIndex</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nextStandupPersonIndex</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nextStandupPerson</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">updateRecord</span><span class="p">(</span><span class="nx">currentStandupPersonIndex</span><span class="p">,</span> <span class="nx">nextStandupPersonIndex</span><span class="p">,</span> <span class="nx">nextperson</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Logger</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Start to update the latest standup person to </span><span class="si">${</span><span class="nx">nextperson</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">currentRow</span> <span class="o">=</span> <span class="nx">currentStandupPersonIndex</span> <span class="o">+</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="kd">let</span> <span class="nx">nextRow</span> <span class="o">=</span> <span class="nx">nextStandupPersonIndex</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">activeSheet</span> <span class="o">=</span> <span class="nx">SpreadsheetApp</span><span class="p">.</span><span class="nx">getActiveSheet</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">activeSheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">currentRow</span><span class="p">,</span> <span class="mi">2</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">activeSheet</span><span class="p">.</span><span class="nx">getRange</span><span class="p">(</span><span class="nx">nextRow</span><span class="p">,</span> <span class="mi">2</span><span class="p">).</span><span class="nx">setValue</span><span class="p">(</span><span class="nx">CURRENT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">Logger</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Successfully update the latest standup person to </span><span class="si">${</span><span class="nx">nextperson</span><span class="si">}</span><span class="sb">`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p>main.gs 处理整个流程，并且在里面发送消息到刚才的Space中，</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">WEBHOOK_URL</span> <span class="o">=</span> <span class="s2">&#34;https://chat.googleapis.com/v1/spaces/AAAAPhOvPUg/messages?key=AIzaSxxxxxxxxxxxxxxxxxxxxxxxx&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// main function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">sendMessageToChat</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isMonday</span><span class="p">())</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span><span class="nx">currentStandupPersonIndex</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nextStandupPersonIndex</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nextStandupPerson</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">getTheNextStandupPerson</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">updateRecord</span><span class="p">(</span><span class="nx">currentStandupPersonIndex</span><span class="p">,</span> <span class="nx">nextStandupPersonIndex</span><span class="p">,</span> <span class="nx">nextStandupPerson</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;method&#34;</span><span class="o">:</span> <span class="s2">&#34;post&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;headers&#34;</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Content-Type&#34;</span><span class="o">:</span> <span class="s2">&#34;application/json; charset=UTF-8&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;payload&#34;</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;text&#34;</span><span class="o">:</span> <span class="sb">`Hey &lt;users/all&gt;,This week&#39;s standup host is </span><span class="si">${</span><span class="nx">nextStandupPerson</span><span class="si">}</span><span class="sb"> </span><span class="si">${</span><span class="s1">&#39;\n&#39;</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="si">}</span><span class="sb"> The sheet: https://docs.google.com/spreadsheets/d/123434234343/edit#gid=0`</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">UrlFetchApp</span><span class="p">.</span><span class="nx">fetch</span><span class="p">(</span><span class="nx">WEBHOOK_URL</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Logger</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">isMonday</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">day</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nx">getDay</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="o">!</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">].</span><span class="nx">includes</span><span class="p">(</span><span class="nx">day</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h3 id="定时执行脚本处理">定时执行脚本处理</h3>
<p>有多种执行方式；</p>
<ol>
<li>直接在代码编辑器顶部运行main.gs 里的sendMessageToChat 方法即可。</li>
<li>定时运行,如下图, 以此，我们可以在特定的实践让其自动执行，实现自动化。</li>
</ol>
<p></p>
<h3 id="效果">效果</h3>
<p>可以看到，之前的主持人是xiaoming6, 现在已经是xiaoming7了。
</p>
<h2 id="总结">总结</h2>
<p>Google Sheet 毕竟是Google 出品，不管是UI 还是API 都很简洁，更是和其自家产品集成的非常紧密；我们在这里实现了Google Sheet 调用Google Chat 来定时给Google Chat 发送消息的功能。当然Google Sheet 还有很多非常优秀的功能，期待你的挖掘。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
<li><a href="https://developers.google.com/chat/api/guides/message-formats/text" target="_blank" rel="noopener noreffer ">Google Chat Message Format: https://developers.google.com/chat/api/guides/message-formats/text</a></li>
<li><a href="https://developers.google.com/chat/how-tos/webhooks" target="_blank" rel="noopener noreffer ">Google Chat Webhooks: https://developers.google.com/chat/how-tos/webhooks</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>团队能力度量及追踪</title><link>https://guzhongren.github.io/2023/07/%E5%9B%A2%E9%98%9F%E8%83%BD%E5%8A%9B%E5%BA%A6%E9%87%8F%E5%8F%8A%E8%BF%BD%E8%B8%AA/</link><pubDate>Mon, 31 Jul 2023 22:12:36 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/07/%E5%9B%A2%E9%98%9F%E8%83%BD%E5%8A%9B%E5%BA%A6%E9%87%8F%E5%8F%8A%E8%BF%BD%E8%B8%AA/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item></channel></rss>