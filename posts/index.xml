<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 谷中仁的博客</title><link>https://guzhongren.github.io/posts/</link><description>所有文章 | 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>guzhongren@live.cn (谷中仁)</managingEditor><webMaster>guzhongren@live.cn (谷中仁)</webMaster><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 22 Aug 2025 08:07:48 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>“自己的事情自己做”</title><link>https://guzhongren.github.io/2025/08/%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%8B%E6%83%85%E8%87%AA%E5%B7%B1%E5%81%9A/</link><pubDate>Fri, 22 Aug 2025 08:07:48 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%8B%E6%83%85%E8%87%AA%E5%B7%B1%E5%81%9A/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>妈妈手里拿着刚吃完枣的零食袋。</p>
<p>女儿说：“自己的事情自己做。你去把垃圾扔进垃圾桶！”</p>
<p>妈妈&hellip;&hellip;</p>
]]></description></item><item><title>“我坐自行车一会儿就到了”</title><link>https://guzhongren.github.io/2025/08/%E6%88%91%E5%9D%90%E8%87%AA%E8%A1%8C%E8%BD%A6%E4%B8%80%E4%BC%9A%E5%84%BF%E5%B0%B1%E5%88%B0%E4%BA%86/</link><pubDate>Thu, 21 Aug 2025 08:11:23 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%88%91%E5%9D%90%E8%87%AA%E8%A1%8C%E8%BD%A6%E4%B8%80%E4%BC%9A%E5%84%BF%E5%B0%B1%E5%88%B0%E4%BA%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>妈妈说：“今天晚上出去吗？”</p>
<p>女儿说： “出去。”</p>
<p>妈妈说：“去哪呀?”</p>
<p>女儿说： “体育场”</p>
<p>妈妈说：“太远了，爸爸也没回来。”</p>
<p>女儿说： “不远，我坐自行车一会就到了。”</p>
]]></description></item><item><title>“我不会走”</title><link>https://guzhongren.github.io/2025/08/%E6%88%91%E4%B8%8D%E4%BC%9A%E8%B5%B0/</link><pubDate>Wed, 20 Aug 2025 07:48:58 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%88%91%E4%B8%8D%E4%BC%9A%E8%B5%B0/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>女儿想走的时候：</p>
<p>女儿说：“我会走，不要妈妈抱。”</p>
<p>女儿不想走的时候：</p>
<p>女儿说：“我不会走”</p>
]]></description></item><item><title>“真的么”</title><link>https://guzhongren.github.io/2025/08/%E7%9C%9F%E7%9A%84%E4%B9%88/</link><pubDate>Tue, 19 Aug 2025 07:56:19 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E7%9C%9F%E7%9A%84%E4%B9%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>妈妈说：“你真漂亮啊！”</p>
<p>女儿说： “真的吗？”</p>
<p>妈妈说：&ldquo;真的呀！&quot;；又说：“你去问爸爸呀。”</p>
<p>女儿手：“爸爸，我漂亮吗？”</p>
<p>我说：“真漂亮呀！”</p>
]]></description></item><item><title>“妈妈，我想你了”</title><link>https://guzhongren.github.io/2025/08/%E5%A6%88%E5%A6%88%E6%88%91%E6%83%B3%E4%BD%A0%E4%BA%86/</link><pubDate>Mon, 18 Aug 2025 08:01:17 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E5%A6%88%E5%A6%88%E6%88%91%E6%83%B3%E4%BD%A0%E4%BA%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>女儿说：“妈妈, 我想你了。”</p>
<p>妈妈说：“我也想你了。”</p>
]]></description></item><item><title>“爸爸真是个大坏蛋</title><link>https://guzhongren.github.io/2025/08/%E7%88%B8%E7%88%B8%E7%9C%9F%E6%98%AF%E4%B8%AA%E5%A4%A7%E5%9D%8F%E8%9B%8B/</link><pubDate>Mon, 18 Aug 2025 07:58:34 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E7%88%B8%E7%88%B8%E7%9C%9F%E6%98%AF%E4%B8%AA%E5%A4%A7%E5%9D%8F%E8%9B%8B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>女儿说：“爸爸又去买西瓜了。”</p>
<p>又说：“爸爸真是个大坏蛋。”</p>
]]></description></item><item><title>“我要快快长大”</title><link>https://guzhongren.github.io/2025/08/%E6%88%91%E8%A6%81%E5%BF%AB%E5%BF%AB%E9%95%BF%E5%A4%A7/</link><pubDate>Sat, 16 Aug 2025 06:15:19 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%88%91%E8%A6%81%E5%BF%AB%E5%BF%AB%E9%95%BF%E5%A4%A7/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>女儿说： “我要快快长大.”</p>
<p>我说：“你要慢慢长大.”</p>
<p>女儿说：“我要像奶奶一样.”</p>
<p>我说：“为什么？”</p>
<p>女儿说：“我要像妈妈一样。”</p>
]]></description></item><item><title>故乡是什么</title><link>https://guzhongren.github.io/2025/08/%E6%95%85%E4%B9%A1%E6%98%AF%E4%BB%80%E4%B9%88/</link><pubDate>Fri, 15 Aug 2025 07:07:08 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%95%85%E4%B9%A1%E6%98%AF%E4%BB%80%E4%B9%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>故乡，是你一个人的相思，是你一个人的热爱，是你一个人的回不去的远方&hellip;</p>
<p>也是别人眼里再陌生不过的话语，也是别人嘴里不会提起的字眼，更是别人心里永远不会有一席之地的地方&hellip;</p>
<p>&hellip;</p>
]]></description></item><item><title>Vibe Coding：提升 Code Review 体验的 VSCode 插件</title><link>https://guzhongren.github.io/2025/07/vibe-coding-%E4%B8%80%E4%B8%AA%E6%8F%90%E5%8D%87-code-review-comments-%E7%9A%84-vscode%E6%8F%92%E4%BB%B6/</link><pubDate>Sat, 26 Jul 2025 16:36:01 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/07/vibe-coding-%E4%B8%80%E4%B8%AA%E6%8F%90%E5%8D%87-code-review-comments-%E7%9A%84-vscode%E6%8F%92%E4%BB%B6/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="痛点">痛点</h2>
<p>在日常的 Code Review 过程中，我们经常需要记录审查过程中发现的问题和建议。目前常见的做法主要有两种：</p>
<ol>
<li>让他人代为记录，可能是通过 Todolist 或纸质形式的文字记录</li>
<li>自己手动记录，通常使用各种笔记工具，如 Raycast Note</li>
</ol>
<p>这两种方式都存在信息丢失的风险，可能由于时间推移或其他因素导致记录不完整或遗失。最理想的方式是建立一套自己的记录系统，使得回顾时能够一目了然地看到当时的审查意见。</p>
<h2 id="解决方案">解决方案</h2>
<p>针对这一需求，我开发了一个 VSCode 插件来专门记录 Code Review 过程中的反馈。这个项目使用了最近非常热门的 Vibe Coding 技术&hellip;</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/plugins/code-review-comments/code-review-comments.6bhdgqda0w.gif" alt="Code Review Comments" /></p>
<h2 id="实现细节">实现细节</h2>
<h3 id="系统提示词设计">系统提示词设计</h3>
<p>以上展示的功能就是通过 Vibe Coding 技术实现的。所有代码都是由 AI 自动生成，使用了 <a href="https://www.npmjs.com/package/@google/gemini-cli">Gemini CLI</a><sup>[1]</sup>
 工具。</p>
<p>在开始开发前，我创建了一个 gemini.md 文件，在其中详细描述了项目需求：</p>
<ul>
<li>系统角色定义：为 AI 设定一个专业的角色定位</li>
<li>系统目标：明确说明这个系统要解决的问题</li>
<li>技术栈选择：指定使用的开发技术</li>
<li>功能需求：详细列出系统需要实现的功能</li>
<li>系统特性：进一步细化系统的功能特性</li>
<li>开发要求：如每次完成功能后需要自行编译检查等</li>
<li>其他约束条件</li>
</ul>
<p>这样设置后，每次启动 gemini cli 时，工具会默认读取该文件，大大节省了重复输入提示词的时间。</p>
<p>示例提示词：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-md">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-md" data-lang="md"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">system</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">你是一个专业且资深的 VSCode 插件开发者；请对每次的更改都做编译检查。
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">system</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">user</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">这是一个用于记录 code review 过程中产生的 comment 的插件，这样可以很方便在 code review 后对提交的代码进行更改，功能类似 GitHub PR 的 comment。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">在修复 bug 或者开发新功能的时候，尽量不要让我给你提供除了提示词以外的其他内容。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">requirements：
</span></span><span class="line"><span class="cl"><span class="k">-</span> 使用 TypeScript 编写的 VSCode 插件
</span></span><span class="line"><span class="cl"><span class="k">-</span> 需要使用 VSCode 的 API 来实现功能
</span></span><span class="line"><span class="cl"><span class="k">-</span> 遵循 VS Code 插件开发的最佳实践
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">features:
</span></span><span class="line"><span class="cl"><span class="k">-</span> 只有在用户创建 comment 时才会记录到本地文件中
</span></span><span class="line"><span class="cl"><span class="k">-</span> 需要使用 VSCode 自己的 working tree diff，而不是执行 git diff 命令
</span></span><span class="line"><span class="cl"><span class="k">-</span> 记录的 comment 需要在 VSCode 的侧边栏中显示，可以对某个 comment 进行操作，如删除、标记为已完成、更改 comment 内容等
</span></span><span class="line"><span class="cl"><span class="k">-</span> 数据存储在本地文件中，格式为 YAML，文件名为 diff-comments.yaml
</span></span><span class="line"><span class="cl"><span class="k">-</span> 记录的 comment 需要包含文件名、行号、comment 内容、git hash、git parent hash、创建时间等；排序按照未完成、已完成且倒序排列
</span></span><span class="line"><span class="cl"><span class="k">-</span> 当用户在侧边栏中点击某个 comment 时，右侧应出现添加 comment 时的 diff view，且跳转到对应的文件和行号
</span></span><span class="line"><span class="cl"><span class="k">-</span> 当用户在 diff view 添加 comment 时，插件会自动记录当前的 git hash 和时间戳，且在 diff view 右侧文件的行号前面（可以添加 debug icon 的位置）显示一个小图标，表示有 comment 记录；鼠标移动到这个小图标上时，会显示 comment 的内容摘要
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">user</span><span class="p">&gt;</span></span></span></code></pre></div></div>
<h3 id="有效的-prompt-工程">有效的 Prompt 工程</h3>
<p>Vibe Coding 的核心在于与 AI 工具进行持续的对话，通过精心设计的提示词让 AI 实现我们的需求。在实现过程中会遇到各种问题，这时需要详细描述场景，并尽可能提供错误日志，让 AI 能够准确分析并提出解决方案。</p>
<p>在具体实现过程中，某些功能可能存在多种实现方案，AI 可能会选择不合适的方案导致需求无法实现。例如，在实现 diff view 时，如何获取当前文件的 git commit hash？Gemini 最初建议在程序运行时执行 <code>git log ...</code> 命令，但对于有合并 PR 的 Commit 来说，获取正确的 git commit hash 很复杂，因为 <code>git log</code> 命令会返回所有父 Commit 的 hash，而不是当前 Commit 的 hash。这样获取到的 commit hash 在做 diff view 显示时就会找不到对应的 commit。如果不深入了解 VSCode 的 git diff 实现机制，很容易陷入这个误区。</p>
<h2 id="总结">总结</h2>
<ul>
<li>强大的 Vibe Coding 和大模型技术主要用于提升效率，而非替代程序员。工具只是让产出更快，但准确性仍需人工关注。</li>
<li>再好的工具也需要开发者对相关技术有充分了解，需要给 AI 提供尽可能准确的实现方案，使其能更好地理解和生成代码。</li>
<li>使用 Vibe Coding，我们可以更快地获得产品原型，同时也能更快地学习我们不熟悉的知识和技能。</li>
<li>但所有生成的代码都需要良好且可维护的架构设计，而不是流水账式的代码堆砌。</li>
</ul>
<div class="references">
                <h2>参考</h2>
                <ol><li>Gemini CLI: <a href="https://www.npmjs.com/package/@google/gemini-cli" rel="noopener noreferrer">https://www.npmjs.com/package/@google/gemini-cli</a></li></ol>
            </div>]]></description></item><item><title>使用uv来更好的管理你的python依赖</title><link>https://guzhongren.github.io/2025/06/%E4%BD%BF%E7%94%A8uv%E6%9D%A5%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84python%E4%BE%9D%E8%B5%96/</link><pubDate>Mon, 30 Jun 2025 20:43:58 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/06/%E4%BD%BF%E7%94%A8uv%E6%9D%A5%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84python%E4%BE%9D%E8%B5%96/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="痛点">痛点</h2>
<p>在Python 项目开发过程中，我们肯定会用到<code>requirements.txt</code> 来管理项目中所用到的第三方库，这么多年都是这么过来的，那有什么痛点呢？</p>
<ul>
<li>你的<code>requirements.txt</code> 中是不是多了一些莫名其妙的依赖，你还不敢删除</li>
<li>你不知道其中的某个依赖是因为哪个依赖引入进来的，或者被哪个依赖所引用</li>
<li>每次运行命令生成这个文件，还得去瞅一下是不是正确，有时候，不同的人生成的顺序还不一样</li>
</ul>
<p>你是不是也是经常遇到？</p>
<h2 id="工具介绍">工具介绍</h2>
<h3 id="pyprojecttoml">pyproject.toml</h3>
<p><a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/">pyproject.toml</a><sup>[1]</sup>
 文件是定义项目配置的 Python 标准。</p>
<p>与 <code>NodeJS</code> 项目中的 <code>package.json</code> 一样，可以管理第三方依赖，可以存储可以运行的命令，所使用的 Runtime 的版本号限制和项目的基本信息等等的，功能强大可见一斑。</p>
<h3 id="uv">uv</h3>
<p><img src="https://github.com/astral-sh/uv/assets/1309177/03aa9163-1c79-4a87-a31d-7a9311ed9310#only-dark" alt="uv" /></p>
<blockquote>
<p>An extremely fast Python package and project manager, written in Rust.(一个极快的 Python 包和项目管理器，用 Rust 编写。) &ndash; <a href="https://docs.astral.sh/uv/">https://docs.astral.sh/uv/</a><sup>[2]</sup>
</p>
</blockquote>
<p>速度快是其特点，但是使用也是相当方便。而且文档相当详细。</p>
<h2 id="如何使用">如何使用</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">mkdir py-uv
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> py-uv/
</span></span><span class="line"><span class="cl">uv init
</span></span><span class="line"><span class="cl"><span class="c1"># Initialized project `py-uv`</span>
</span></span><span class="line"><span class="cl">uv venv
</span></span><span class="line"><span class="cl"><span class="c1"># Using CPython 3.13.2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Creating virtual environment at: .venv</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Activate with: source .venv/bin/activate</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/bin/activate
</span></span><span class="line"><span class="cl">gst
</span></span><span class="line"><span class="cl"><span class="c1"># On branch main</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># No commits yet</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Untracked files:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   (use &#34;git add &lt;file&gt;...&#34; to include in what will be committed)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	.gitignore</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	.python-version</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	README.md</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	hello.py</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	pyproject.toml</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#nothing added to commit but untracked files present (use &#34;git add&#34; to track)</span>
</span></span><span class="line"><span class="cl">uv run hello.py
</span></span><span class="line"><span class="cl"><span class="c1"># Using CPython 3.13.2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Creating virtual environment at: .venv</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Hello from py-uv!</span>
</span></span><span class="line"><span class="cl">uv add pyfiglet
</span></span><span class="line"><span class="cl"><span class="c1"># Resolved 2 packages in 515ms</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Prepared 1 package in 532ms</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Installed 1 package in 7ms</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  + pyfiglet==1.0.3</span></span></span></code></pre></div></div>
<p>这时，我们可以看看 <code>pyproject.toml</code> 中有哪些内容</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-toml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;py-uv&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">version</span> <span class="p">=</span> <span class="s2">&#34;0.1.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">description</span> <span class="p">=</span> <span class="s2">&#34;Add your description here&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">readme</span> <span class="p">=</span> <span class="s2">&#34;README.md&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">requires-python</span> <span class="p">=</span> <span class="s2">&#34;&gt;=3.13&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">dependencies</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pyfiglet&gt;=1.0.3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span></span></span></code></pre></div></div>
<p>可以看到 <code>pyfiglet</code> 被添加到了 <code>dependencies</code> 中；其他的内容字如其意，就不展开讲了。</p>
<p>在源文件中添加一点 python 代码</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-diff">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gh">diff --git a/hello.py b/hello.py
</span></span></span><span class="line"><span class="cl"><span class="gh">index b18db96..204b9e3 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/hello.py
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/hello.py
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -1,6 +1,12 @@
</span></span></span><span class="line"><span class="cl"><span class="gu"></span><span class="gi">+import pyfiglet
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> def main():
</span></span><span class="line"><span class="cl">     print(&#34;Hello from py-uv!&#34;)
</span></span><span class="line"><span class="cl"><span class="gi">+    ascii_art = pyfiglet.figlet_format(&#34;MyApp Started!&#34;)
</span></span></span><span class="line"><span class="cl"><span class="gi">+    print(ascii_art)
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> if __name__ == &#34;__main__&#34;:
</span></span><span class="line"><span class="cl">     main()
</span></span><span class="line"><span class="cl">~
</span></span></code></pre></div></div>
<p>再次运行</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">uv run hello.py
</span></span><span class="line"><span class="cl"><span class="c1"># Hello from py-uv!</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  __  __          _                  ____  _             _           _ _</span>
</span></span><span class="line"><span class="cl"><span class="c1"># |  \/  |_   _   / \   _ __  _ __   / ___|| |_ __ _ _ __| |_ ___  __| | |</span>
</span></span><span class="line"><span class="cl"><span class="c1"># | |\/| | | | | / _ \ | &#39;_ \| &#39;_ \  \___ \| __/ _` | &#39;__| __/ _ \/ _` | |</span>
</span></span><span class="line"><span class="cl"><span class="c1"># | |  | | |_| |/ ___ \| |_) | |_) |  ___) | || (_| | |  | ||  __/ (_| |_|</span>
</span></span><span class="line"><span class="cl"><span class="c1"># |_|  |_|\__, /_/   \_\ .__/| .__/  |____/ \__\__,_|_|   \__\___|\__,_(_)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         |___/        |_|   |_|</span></span></span></code></pre></div></div>
<p>至此，我们的项目已经使用 <code>uv</code> 运行起来了，但是在真正部署的时候我们需要生成 <code>requirement.txt</code> 然后启动程序。</p>
<h3 id="生成-requirementtxt">生成 <code>requirement.txt</code></h3>
<p>在正式的开发项目中，我们不可能每个人手动生成一次，然后再提交，这样很可能忘记这个操作，最好的就是将其放在在 git hooks 中，在每次 push 代码之前生成并检查其已经存在且是最新的，这样每个人都避免了手动生成和校验。如下是一段 shell 脚本来实现该功能</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># generate-requirements.sh</span>
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/basa</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -euo pipefail
</span></span><span class="line"><span class="cl">uv pip compile pyproject.toml --quiet --output-file requirements.txt
</span></span><span class="line"><span class="cl"><span class="c1"># Check for uncommitted changes</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> -n <span class="k">$(</span>git status --porcelain<span class="k">)</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;Error: There are uncommitted changes. Please commit or stash them before running this script.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre></div></div>
<p>然后将其集成到 <code>pre-commit</code> 中, 使其在 push 前执行这个操作</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">generate requirement.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Generate requirements.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">entry</span><span class="p">:</span><span class="w"> </span><span class="l">./scripts/git-hooks/generate-requirements.sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">language</span><span class="p">:</span><span class="w"> </span><span class="l">script</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">always_run</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">stages</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">pre-push]</span></span></span></code></pre></div></div>
<p>如此可以将该流程完全自动化。</p>
<p>运行 <code>git push</code> 或者 <code>./scripts/git-hooks/generate-requirements.sh</code>, 会自动生成 <code>requirement.txt</code> 文件, 内容如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl"># This file was autogenerated by uv via the following command:
</span></span><span class="line"><span class="cl">#    uv pip compile pyproject.toml --output-file requirements.txt
</span></span><span class="line"><span class="cl">pyfiglet==1.0.3
</span></span><span class="line"><span class="cl">    # via py-uv (pyproject.toml)</span></span></code></pre></div></div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Note<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">我从哪里来，我要去哪里</div>
        </div>
    </div>
<p>其中的最后一行表明，<code>pyfiglet</code> 是被 <code>py-uv</code> 这个项目依赖的，也就是我们刚创建的这个项目；而在多个依赖的项目中，生成的 <code>requirement.txt</code> 也可能出现，一个不知名的依赖被多个依赖再次依赖，这就是使用 <code>uv</code> 工具生成 <code>requirement.txt</code>的好处。</p>
<h2 id="总结">总结</h2>
<p>好的工具的选择可以为工程构建增速提效。
工具的组合更是可以产生解放生产力。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>pyproject.toml: <a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/" rel="noopener noreferrer">https://packaging.python.org/en/latest/guides/writing-pyproject-toml/</a></li><li>https://docs.astral.sh/uv/: <a href="https://docs.astral.sh/uv/" rel="noopener noreferrer">https://docs.astral.sh/uv/</a></li></ol>
            </div>]]></description></item></channel></rss>