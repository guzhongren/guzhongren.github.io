<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 谷中仁的博客</title><link>https://guzhongren.github.io/posts/</link><description>所有文章 | 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>guzhongren@live.cn (谷中仁)</managingEditor><webMaster>guzhongren@live.cn (谷中仁)</webMaster><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 18 Aug 2025 08:01:17 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>“妈妈，我想你了”</title><link>https://guzhongren.github.io/2025/08/%E5%A6%88%E5%A6%88%E6%88%91%E6%83%B3%E4%BD%A0%E4%BA%86/</link><pubDate>Mon, 18 Aug 2025 08:01:17 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E5%A6%88%E5%A6%88%E6%88%91%E6%83%B3%E4%BD%A0%E4%BA%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>“妈妈, 我想你了”</p>
]]></description></item><item><title>“爸爸真是个打坏大”</title><link>https://guzhongren.github.io/2025/08/%E7%88%B8%E7%88%B8%E7%9C%9F%E6%98%AF%E4%B8%AA%E6%89%93%E5%9D%8F%E5%A4%A7/</link><pubDate>Mon, 18 Aug 2025 07:58:34 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E7%88%B8%E7%88%B8%E7%9C%9F%E6%98%AF%E4%B8%AA%E6%89%93%E5%9D%8F%E5%A4%A7/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>女儿说：“爸爸又去买西瓜了。”
又说：“爸爸真是个大坏蛋。”</p>
]]></description></item><item><title>“我要快快长大”</title><link>https://guzhongren.github.io/2025/08/%E6%88%91%E8%A6%81%E5%BF%AB%E5%BF%AB%E9%95%BF%E5%A4%A7/</link><pubDate>Sat, 16 Aug 2025 06:15:19 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%88%91%E8%A6%81%E5%BF%AB%E5%BF%AB%E9%95%BF%E5%A4%A7/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>女儿说： “我要快快长大”，
我说：“你要慢慢长大”，
女儿说：“我要像奶奶一样”，
我说：“为什么？”，
女儿说：“我要像妈妈一样”。</p>
]]></description></item><item><title>故乡是什么</title><link>https://guzhongren.github.io/2025/08/%E6%95%85%E4%B9%A1%E6%98%AF%E4%BB%80%E4%B9%88/</link><pubDate>Fri, 15 Aug 2025 07:07:08 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/08/%E6%95%85%E4%B9%A1%E6%98%AF%E4%BB%80%E4%B9%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>故乡，是你一个人的相思，是你一个人的热爱，是你一个人的回不去的远方&hellip;</p>
<p>也是别人眼里再陌生不过的话语，也是别人嘴里不会提起的字眼，更是别人心里永远不会有一席之地的地方&hellip;</p>
<p>&hellip;</p>
]]></description></item><item><title>Vibe Coding：提升 Code Review 体验的 VSCode 插件</title><link>https://guzhongren.github.io/2025/07/vibe-coding-%E4%B8%80%E4%B8%AA%E6%8F%90%E5%8D%87-code-review-comments-%E7%9A%84-vscode%E6%8F%92%E4%BB%B6/</link><pubDate>Sat, 26 Jul 2025 16:36:01 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/07/vibe-coding-%E4%B8%80%E4%B8%AA%E6%8F%90%E5%8D%87-code-review-comments-%E7%9A%84-vscode%E6%8F%92%E4%BB%B6/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="痛点">痛点</h2>
<p>在日常的 Code Review 过程中，我们经常需要记录审查过程中发现的问题和建议。目前常见的做法主要有两种：</p>
<ol>
<li>让他人代为记录，可能是通过 Todolist 或纸质形式的文字记录</li>
<li>自己手动记录，通常使用各种笔记工具，如 Raycast Note</li>
</ol>
<p>这两种方式都存在信息丢失的风险，可能由于时间推移或其他因素导致记录不完整或遗失。最理想的方式是建立一套自己的记录系统，使得回顾时能够一目了然地看到当时的审查意见。</p>
<h2 id="解决方案">解决方案</h2>
<p>针对这一需求，我开发了一个 VSCode 插件来专门记录 Code Review 过程中的反馈。这个项目使用了最近非常热门的 Vibe Coding 技术&hellip;</p>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/plugins/code-review-comments/code-review-comments.6bhdgqda0w.gif" alt="Code Review Comments" /></p>
<h2 id="实现细节">实现细节</h2>
<h3 id="系统提示词设计">系统提示词设计</h3>
<p>以上展示的功能就是通过 Vibe Coding 技术实现的。所有代码都是由 AI 自动生成，使用了 <a href="https://www.npmjs.com/package/@google/gemini-cli">Gemini CLI</a><sup>[1]</sup>
 工具。</p>
<p>在开始开发前，我创建了一个 gemini.md 文件，在其中详细描述了项目需求：</p>
<ul>
<li>系统角色定义：为 AI 设定一个专业的角色定位</li>
<li>系统目标：明确说明这个系统要解决的问题</li>
<li>技术栈选择：指定使用的开发技术</li>
<li>功能需求：详细列出系统需要实现的功能</li>
<li>系统特性：进一步细化系统的功能特性</li>
<li>开发要求：如每次完成功能后需要自行编译检查等</li>
<li>其他约束条件</li>
</ul>
<p>这样设置后，每次启动 gemini cli 时，工具会默认读取该文件，大大节省了重复输入提示词的时间。</p>
<p>示例提示词：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-md">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-md" data-lang="md"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">system</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">你是一个专业且资深的 VSCode 插件开发者；请对每次的更改都做编译检查。
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">system</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">user</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">这是一个用于记录 code review 过程中产生的 comment 的插件，这样可以很方便在 code review 后对提交的代码进行更改，功能类似 GitHub PR 的 comment。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">在修复 bug 或者开发新功能的时候，尽量不要让我给你提供除了提示词以外的其他内容。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">requirements：
</span></span><span class="line"><span class="cl"><span class="k">-</span> 使用 TypeScript 编写的 VSCode 插件
</span></span><span class="line"><span class="cl"><span class="k">-</span> 需要使用 VSCode 的 API 来实现功能
</span></span><span class="line"><span class="cl"><span class="k">-</span> 遵循 VS Code 插件开发的最佳实践
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">features:
</span></span><span class="line"><span class="cl"><span class="k">-</span> 只有在用户创建 comment 时才会记录到本地文件中
</span></span><span class="line"><span class="cl"><span class="k">-</span> 需要使用 VSCode 自己的 working tree diff，而不是执行 git diff 命令
</span></span><span class="line"><span class="cl"><span class="k">-</span> 记录的 comment 需要在 VSCode 的侧边栏中显示，可以对某个 comment 进行操作，如删除、标记为已完成、更改 comment 内容等
</span></span><span class="line"><span class="cl"><span class="k">-</span> 数据存储在本地文件中，格式为 YAML，文件名为 diff-comments.yaml
</span></span><span class="line"><span class="cl"><span class="k">-</span> 记录的 comment 需要包含文件名、行号、comment 内容、git hash、git parent hash、创建时间等；排序按照未完成、已完成且倒序排列
</span></span><span class="line"><span class="cl"><span class="k">-</span> 当用户在侧边栏中点击某个 comment 时，右侧应出现添加 comment 时的 diff view，且跳转到对应的文件和行号
</span></span><span class="line"><span class="cl"><span class="k">-</span> 当用户在 diff view 添加 comment 时，插件会自动记录当前的 git hash 和时间戳，且在 diff view 右侧文件的行号前面（可以添加 debug icon 的位置）显示一个小图标，表示有 comment 记录；鼠标移动到这个小图标上时，会显示 comment 的内容摘要
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">user</span><span class="p">&gt;</span></span></span></code></pre></div></div>
<h3 id="有效的-prompt-工程">有效的 Prompt 工程</h3>
<p>Vibe Coding 的核心在于与 AI 工具进行持续的对话，通过精心设计的提示词让 AI 实现我们的需求。在实现过程中会遇到各种问题，这时需要详细描述场景，并尽可能提供错误日志，让 AI 能够准确分析并提出解决方案。</p>
<p>在具体实现过程中，某些功能可能存在多种实现方案，AI 可能会选择不合适的方案导致需求无法实现。例如，在实现 diff view 时，如何获取当前文件的 git commit hash？Gemini 最初建议在程序运行时执行 <code>git log ...</code> 命令，但对于有合并 PR 的 Commit 来说，获取正确的 git commit hash 很复杂，因为 <code>git log</code> 命令会返回所有父 Commit 的 hash，而不是当前 Commit 的 hash。这样获取到的 commit hash 在做 diff view 显示时就会找不到对应的 commit。如果不深入了解 VSCode 的 git diff 实现机制，很容易陷入这个误区。</p>
<h2 id="总结">总结</h2>
<ul>
<li>强大的 Vibe Coding 和大模型技术主要用于提升效率，而非替代程序员。工具只是让产出更快，但准确性仍需人工关注。</li>
<li>再好的工具也需要开发者对相关技术有充分了解，需要给 AI 提供尽可能准确的实现方案，使其能更好地理解和生成代码。</li>
<li>使用 Vibe Coding，我们可以更快地获得产品原型，同时也能更快地学习我们不熟悉的知识和技能。</li>
<li>但所有生成的代码都需要良好且可维护的架构设计，而不是流水账式的代码堆砌。</li>
</ul>
<div class="references">
                <h2>参考</h2>
                <ol><li>Gemini CLI: <a href="https://www.npmjs.com/package/@google/gemini-cli" rel="noopener noreferrer">https://www.npmjs.com/package/@google/gemini-cli</a></li></ol>
            </div>]]></description></item><item><title>使用uv来更好的管理你的python依赖</title><link>https://guzhongren.github.io/2025/06/%E4%BD%BF%E7%94%A8uv%E6%9D%A5%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84python%E4%BE%9D%E8%B5%96/</link><pubDate>Mon, 30 Jun 2025 20:43:58 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/06/%E4%BD%BF%E7%94%A8uv%E6%9D%A5%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84python%E4%BE%9D%E8%B5%96/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="痛点">痛点</h2>
<p>在Python 项目开发过程中，我们肯定会用到<code>requirements.txt</code> 来管理项目中所用到的第三方库，这么多年都是这么过来的，那有什么痛点呢？</p>
<ul>
<li>你的<code>requirements.txt</code> 中是不是多了一些莫名其妙的依赖，你还不敢删除</li>
<li>你不知道其中的某个依赖是因为哪个依赖引入进来的，或者被哪个依赖所引用</li>
<li>每次运行命令生成这个文件，还得去瞅一下是不是正确，有时候，不同的人生成的顺序还不一样</li>
</ul>
<p>你是不是也是经常遇到？</p>
<h2 id="工具介绍">工具介绍</h2>
<h3 id="pyprojecttoml">pyproject.toml</h3>
<p><a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/">pyproject.toml</a><sup>[1]</sup>
 文件是定义项目配置的 Python 标准。</p>
<p>与 <code>NodeJS</code> 项目中的 <code>package.json</code> 一样，可以管理第三方依赖，可以存储可以运行的命令，所使用的 Runtime 的版本号限制和项目的基本信息等等的，功能强大可见一斑。</p>
<h3 id="uv">uv</h3>
<p><img src="https://github.com/astral-sh/uv/assets/1309177/03aa9163-1c79-4a87-a31d-7a9311ed9310#only-dark" alt="uv" /></p>
<blockquote>
<p>An extremely fast Python package and project manager, written in Rust.(一个极快的 Python 包和项目管理器，用 Rust 编写。) &ndash; <a href="https://docs.astral.sh/uv/">https://docs.astral.sh/uv/</a><sup>[2]</sup>
</p>
</blockquote>
<p>速度快是其特点，但是使用也是相当方便。而且文档相当详细。</p>
<h2 id="如何使用">如何使用</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">mkdir py-uv
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> py-uv/
</span></span><span class="line"><span class="cl">uv init
</span></span><span class="line"><span class="cl"><span class="c1"># Initialized project `py-uv`</span>
</span></span><span class="line"><span class="cl">uv venv
</span></span><span class="line"><span class="cl"><span class="c1"># Using CPython 3.13.2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Creating virtual environment at: .venv</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Activate with: source .venv/bin/activate</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> .venv/bin/activate
</span></span><span class="line"><span class="cl">gst
</span></span><span class="line"><span class="cl"><span class="c1"># On branch main</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># No commits yet</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Untracked files:</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   (use &#34;git add &lt;file&gt;...&#34; to include in what will be committed)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	.gitignore</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	.python-version</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	README.md</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	hello.py</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 	pyproject.toml</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1">#nothing added to commit but untracked files present (use &#34;git add&#34; to track)</span>
</span></span><span class="line"><span class="cl">uv run hello.py
</span></span><span class="line"><span class="cl"><span class="c1"># Using CPython 3.13.2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Creating virtual environment at: .venv</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Hello from py-uv!</span>
</span></span><span class="line"><span class="cl">uv add pyfiglet
</span></span><span class="line"><span class="cl"><span class="c1"># Resolved 2 packages in 515ms</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Prepared 1 package in 532ms</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Installed 1 package in 7ms</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  + pyfiglet==1.0.3</span></span></span></code></pre></div></div>
<p>这时，我们可以看看 <code>pyproject.toml</code> 中有哪些内容</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-toml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">project</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">name</span> <span class="p">=</span> <span class="s2">&#34;py-uv&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">version</span> <span class="p">=</span> <span class="s2">&#34;0.1.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">description</span> <span class="p">=</span> <span class="s2">&#34;Add your description here&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">readme</span> <span class="p">=</span> <span class="s2">&#34;README.md&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">requires-python</span> <span class="p">=</span> <span class="s2">&#34;&gt;=3.13&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">dependencies</span> <span class="p">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;pyfiglet&gt;=1.0.3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span></span></span></code></pre></div></div>
<p>可以看到 <code>pyfiglet</code> 被添加到了 <code>dependencies</code> 中；其他的内容字如其意，就不展开讲了。</p>
<p>在源文件中添加一点 python 代码</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-diff">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="line"><span class="cl"><span class="gh">diff --git a/hello.py b/hello.py
</span></span></span><span class="line"><span class="cl"><span class="gh">index b18db96..204b9e3 100644
</span></span></span><span class="line"><span class="cl"><span class="gh"></span><span class="gd">--- a/hello.py
</span></span></span><span class="line"><span class="cl"><span class="gd"></span><span class="gi">+++ b/hello.py
</span></span></span><span class="line"><span class="cl"><span class="gi"></span><span class="gu">@@ -1,6 +1,12 @@
</span></span></span><span class="line"><span class="cl"><span class="gu"></span><span class="gi">+import pyfiglet
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> def main():
</span></span><span class="line"><span class="cl">     print(&#34;Hello from py-uv!&#34;)
</span></span><span class="line"><span class="cl"><span class="gi">+    ascii_art = pyfiglet.figlet_format(&#34;MyApp Started!&#34;)
</span></span></span><span class="line"><span class="cl"><span class="gi">+    print(ascii_art)
</span></span></span><span class="line"><span class="cl"><span class="gi">+
</span></span></span><span class="line"><span class="cl"><span class="gi"></span> if __name__ == &#34;__main__&#34;:
</span></span><span class="line"><span class="cl">     main()
</span></span><span class="line"><span class="cl">~
</span></span></code></pre></div></div>
<p>再次运行</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">uv run hello.py
</span></span><span class="line"><span class="cl"><span class="c1"># Hello from py-uv!</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  __  __          _                  ____  _             _           _ _</span>
</span></span><span class="line"><span class="cl"><span class="c1"># |  \/  |_   _   / \   _ __  _ __   / ___|| |_ __ _ _ __| |_ ___  __| | |</span>
</span></span><span class="line"><span class="cl"><span class="c1"># | |\/| | | | | / _ \ | &#39;_ \| &#39;_ \  \___ \| __/ _` | &#39;__| __/ _ \/ _` | |</span>
</span></span><span class="line"><span class="cl"><span class="c1"># | |  | | |_| |/ ___ \| |_) | |_) |  ___) | || (_| | |  | ||  __/ (_| |_|</span>
</span></span><span class="line"><span class="cl"><span class="c1"># |_|  |_|\__, /_/   \_\ .__/| .__/  |____/ \__\__,_|_|   \__\___|\__,_(_)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#         |___/        |_|   |_|</span></span></span></code></pre></div></div>
<p>至此，我们的项目已经使用 <code>uv</code> 运行起来了，但是在真正部署的时候我们需要生成 <code>requirement.txt</code> 然后启动程序。</p>
<h3 id="生成-requirementtxt">生成 <code>requirement.txt</code></h3>
<p>在正式的开发项目中，我们不可能每个人手动生成一次，然后再提交，这样很可能忘记这个操作，最好的就是将其放在在 git hooks 中，在每次 push 代码之前生成并检查其已经存在且是最新的，这样每个人都避免了手动生成和校验。如下是一段 shell 脚本来实现该功能</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># generate-requirements.sh</span>
</span></span><span class="line"><span class="cl"><span class="c1">#!/bin/basa</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -euo pipefail
</span></span><span class="line"><span class="cl">uv pip compile pyproject.toml --quiet --output-file requirements.txt
</span></span><span class="line"><span class="cl"><span class="c1"># Check for uncommitted changes</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> -n <span class="k">$(</span>git status --porcelain<span class="k">)</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;Error: There are uncommitted changes. Please commit or stash them before running this script.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre></div></div>
<p>然后将其集成到 <code>pre-commit</code> 中, 使其在 push 前执行这个操作</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">generate requirement.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Generate requirements.txt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">entry</span><span class="p">:</span><span class="w"> </span><span class="l">./scripts/git-hooks/generate-requirements.sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">language</span><span class="p">:</span><span class="w"> </span><span class="l">script</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">always_run</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">stages</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">pre-push]</span></span></span></code></pre></div></div>
<p>如此可以将该流程完全自动化。</p>
<p>运行 <code>git push</code> 或者 <code>./scripts/git-hooks/generate-requirements.sh</code>, 会自动生成 <code>requirement.txt</code> 文件, 内容如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-txt">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt"><span class="line"><span class="cl"># This file was autogenerated by uv via the following command:
</span></span><span class="line"><span class="cl">#    uv pip compile pyproject.toml --output-file requirements.txt
</span></span><span class="line"><span class="cl">pyfiglet==1.0.3
</span></span><span class="line"><span class="cl">    # via py-uv (pyproject.toml)</span></span></code></pre></div></div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Note<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">我从哪里来，我要去哪里</div>
        </div>
    </div>
<p>其中的最后一行表明，<code>pyfiglet</code> 是被 <code>py-uv</code> 这个项目依赖的，也就是我们刚创建的这个项目；而在多个依赖的项目中，生成的 <code>requirement.txt</code> 也可能出现，一个不知名的依赖被多个依赖再次依赖，这就是使用 <code>uv</code> 工具生成 <code>requirement.txt</code>的好处。</p>
<h2 id="总结">总结</h2>
<p>好的工具的选择可以为工程构建增速提效。
工具的组合更是可以产生解放生产力。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>pyproject.toml: <a href="https://packaging.python.org/en/latest/guides/writing-pyproject-toml/" rel="noopener noreferrer">https://packaging.python.org/en/latest/guides/writing-pyproject-toml/</a></li><li>https://docs.astral.sh/uv/: <a href="https://docs.astral.sh/uv/" rel="noopener noreferrer">https://docs.astral.sh/uv/</a></li></ol>
            </div>]]></description></item><item><title>基于Strapi开发Headless CMS的基建入门</title><link>https://guzhongren.github.io/2025/05/%E5%9F%BA%E4%BA%8Estrapi%E5%BC%80%E5%8F%91headless-cms%E7%9A%84%E5%9F%BA%E5%BB%BA%E5%85%A5%E9%97%A8/</link><pubDate>Fri, 16 May 2025 10:15:31 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/05/%E5%9F%BA%E4%BA%8Estrapi%E5%BC%80%E5%8F%91headless-cms%E7%9A%84%E5%9F%BA%E5%BB%BA%E5%85%A5%E9%97%A8/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="简介">简介</h2>
<p>在现代电商和企业网站中，内容需要频繁变更。理想的系统应支持后台灵活编辑内容，前端自动渲染，无需频繁重构和部署。以电商为例，产品信息、价格、描述等常常调整，页面布局也需随时优化。对于缺乏开发经验的运营人员，易用的 CMS 能极大提升效率和响应速度。</p>
<h2 id="strapi简介">Strapi简介</h2>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Tips<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><a href="https://strapi.io/">Strapi</a><sup>[3]</sup>
 是一个 API 级低代码内容管理系统（Headless CMS）。</div>
        </div>
    </div>
<p>Strapi 是开源、灵活的 Headless CMS，支持多数据库和多前端框架。它提供内容建模、权限管理、插件扩展等能力，适合各种规模项目。前后端分离架构让前端可用 React/Vue/Angular 等技术开发，后端通过 Strapi API 提供数据，提升开发效率、降低维护成本。</p>
<p>主要特性包括：</p>
<ul>
<li><strong>开源</strong>，可自由使用和定制</li>
<li><strong>灵活内容建模</strong>，支持多数据类型和关系</li>
<li><strong>自动生成 RESTful/GraphQL API</strong></li>
<li><strong>插件机制</strong>，可扩展功能和集成第三方服务</li>
<li><strong>多数据库支持</strong>（MongoDB、PostgreSQL、MySQL 等）</li>
<li><strong>权限管理</strong>，细粒度控制访问</li>
<li><strong>多语言内容管理</strong></li>
<li><strong>活跃社区与丰富文档</strong></li>
</ul>
<h2 id="主要流程">主要流程</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/How-to/Strapi/dev-with-strapi.2ks52vmd6j.webp" alt="dev-with-strapi" /></p>
<ol>
<li>设计内容模型（Content Types/Components）
<ul>
<li>使用内容类型构建器（Content-Type Builder）将页面的内容抽象出来，形成如 Design Token 级别的组件，和可复用的中度复杂的组件。</li>
</ul>
</li>
<li>创建网站结构及内容
<ul>
<li>构建网站结构，可通过组合之前创建的各种组件来形成结构。</li>
<li>创建网站的具体内容，如文章、产品、用户等，并使他们关联起来，比如博客需要有作者、分类、标签等。</li>
</ul>
</li>
<li>配置 API 权限与插件
<ul>
<li>配置 API 的权限，决定哪些用户可以访问、修改、删除内容，一般情况会将所有的内容以只读的方式暴露给前端。</li>
</ul>
</li>
<li>通过 API 管理和获取内容
<ul>
<li>前端通过 Strapi 提供的 RESTful， StrapiClient 或 GraphQL API 获取内容。</li>
</ul>
</li>
<li>前端动态渲染内容
<ul>
<li>前端根据内容类型和结构动态渲染页面。</li>
</ul>
</li>
</ol>
<h2 id="主要概念">主要概念</h2>
<h3 id="content-types-builder">Content Types Builder</h3>
<p>内容类型构建器是 Strapi 的核心，可视化创建和管理内容类型。支持灵活定义字段、数据类型、验证规则，便于内容建模和结构调整。</p>
<h3 id="components">Components</h3>
<p>组件实现内容结构复用。可将常用结构（如作者信息、SEO 配置等）封装为组件，在多个内容类型中引用，支持嵌套组合，提升建模灵活性。</p>
<h3 id="single-types">Single Types</h3>
<p>单一类型（Single Type）适合全站唯一内容，如“关于我们”、“站点设置”等。每种单一类型仅有一个条目，结构可自定义，便于集中管理全局内容。</p>
<h3 id="collections">Collections</h3>
<p>集合类型（Collection Type）用于管理多条同类内容，如文章、产品、用户等。每个集合类型可包含多个字段和组件，是内容批量管理和 API 构建的基础。</p>
<h3 id="dynamic-zones">Dynamic Zones</h3>
<p>动态区域（Dynamic Zone）允许在单字段中组合多种组件，实现内容结构高度自定义。适用于富文本、页面构建器等场景，支持多类型组件共存和嵌套。</p>
<h3 id="api">API</h3>
<p>Strapi 自动为每个内容类型生成 RESTful 或 GraphQL API，支持内容的增删改查，便于前后端分离和多端接入。</p>
<h3 id="plugins">Plugins</h3>
<p>插件用于扩展 Strapi 功能，如权限管理、内容版本控制、第三方集成等。官方和社区插件丰富，也支持自定义开发。</p>
<h2 id="进阶">进阶</h2>
<p>使用Strapi API 时有时需要对请求参数进行预处理，比如验证、转换等。可以通过中间件（Middleware）来实现。</p>
<h3 id="将请求参数置于-strapi-middlewarehttpsdocsstrapiiocmsbackend-customizationmiddlewares-中">将请求参数置于 <a href="https://docs.strapi.io/cms/backend-customization/middlewares">Strapi Middleware</a><sup>[1]</sup>
 中</h3>
<p>如果要获取一个 Global Page的内容，普通情况下，我们会把查询参数放在URL 的query中，比如：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>http://localhost:1337/api/global?populate[header][populate][0]=navItems&amp;populate[footer][populate][0]=socialLinks.Link</code></pre></div>
<p>通常情况呢，这个 url 的请求参数一般不会改变，每次都要返回Global Page 的所有内容，那么我们就可以把这个请求参数放在中间件中，避免每次都要在 URL 中传递。我们在请求时直接使用url <code>http://localhost:1337/api/global</code> 即可，而不用带query参数。
这样做的好处是：</p>
<ol>
<li>代码可读性更高</li>
<li>减少了 URL 的复杂度</li>
<li>方便后期维护和修改</li>
</ol>
<p>可通过中间件（Middleware）统一处理请求参数。基本步骤：</p>
<ol>
<li>可使用 <a href="https://docs.strapi.io/cms/cli#strapi-generate">strapi generate:middleware</a><sup>[2]</sup>
 命令生成中间件
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">pnpm run strapi generate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; my-strapi-project@0.1.0 strapi ~/01.Personal/tmp/my-strapi-project
</span></span><span class="line"><span class="cl">&gt; strapi <span class="s2">&#34;generate&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">? Strapi Generators middleware - Generate a middleware <span class="k">for</span> an API
</span></span><span class="line"><span class="cl">? Middleware name global-page-populate
</span></span><span class="line"><span class="cl">? Where <span class="k">do</span> you want to add this middleware? Add middleware to an existing API
</span></span><span class="line"><span class="cl">? Which API is this <span class="k">for</span>? global
</span></span><span class="line"><span class="cl">✔  ++ /api/global/middlewares/global-page-populate.ts</span></span></code></pre></div></div>
</li>
<li>定义中间件函数并处理 <code>ctx.query</code>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"> <span class="kr">import</span> <span class="kr">type</span> <span class="p">{</span> <span class="nx">Core</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;@strapi/strapi&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="kr">const</span> <span class="nx">populate</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nx">header</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">populate</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;navItems&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">   <span class="p">},</span>
</span></span><span class="line"><span class="cl">   <span class="nx">banner</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="nx">footer</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">populate</span><span class="o">:</span> <span class="p">[</span><span class="s2">&#34;logo&#34;</span><span class="p">,</span> <span class="s2">&#34;navItems&#34;</span><span class="p">,</span> <span class="s2">&#34;socialLinks&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span>
</span></span><span class="line"><span class="cl"> <span class="c1">// 获取 dynamic zone 的内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">// const populate = {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//   blocks: {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//     on: {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//       &#34;blocks.hero&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//         populate: {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//           links: true,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//           image: {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//             fields: [&#34;url&#34;, &#34;name&#34;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//           }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//         },
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//       },
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//       &#34;blocks.heading-section&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//         populate: &#39;*&#39;,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//       }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//     }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">//   }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"> <span class="kr">export</span> <span class="k">default</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="p">{</span> <span class="nx">strapi</span> <span class="p">}</span><span class="o">:</span> <span class="p">{</span> <span class="nx">strapi</span>: <span class="kt">Core.Strapi</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">ctx</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">populate</span> <span class="o">=</span> <span class="nx">populate</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="nx">strapi</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">&#39;In global-page-populate middleware.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">     <span class="k">await</span> <span class="nx">next</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">   <span class="p">};</span>
</span></span><span class="line"><span class="cl"> <span class="p">};</span></span></span></code></pre></div></div>
</li>
<li>在 <code>src/api/global/routes/global.ts</code> 注册中间件
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl">  <span class="kr">import</span> <span class="p">{</span> <span class="nx">factories</span> <span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;@strapi/strapi&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">export</span> <span class="k">default</span> <span class="nx">factories</span><span class="p">.</span><span class="nx">createCoreRouter</span><span class="p">(</span><span class="s1">&#39;api::global.global&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">config</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">find</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">middlewares</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;api::global.global-page-populate&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span></span></span></code></pre></div></div>
</li>
<li>使用API 请求测试等工具测试
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">curl <span class="s1">&#39;http://localhost:1337/api/global&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 应该返回Global Page 的所有内容</span></span></span></code></pre></div></div>
</li>
</ol>
<h3 id="前端动态渲染-dynamic-zone-组件">前端动态渲染 Dynamic Zone 组件</h3>
<p>前端可根据后端返回的 Dynamic Zone 数据动态渲染组件，为代码如下：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-tsx">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-tsx" data-lang="tsx"><span class="line"><span class="cl"><span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">componentMap</span>: <span class="kt">Record</span><span class="p">&lt;</span><span class="nt">ComponentType</span><span class="err">,</span> <span class="na">any</span><span class="p">&gt;</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.hero&#34;</span><span class="o">:</span> <span class="nx">Hero</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.heading-section&#34;</span><span class="o">:</span> <span class="nx">HeadingSection</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.card-grid&#34;</span><span class="o">:</span> <span class="nx">CardGrid</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.content-with-image&#34;</span><span class="o">:</span> <span class="nx">ContentWithImage</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.faqs&#34;</span><span class="o">:</span> <span class="nx">Faqs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.person-card&#34;</span><span class="o">:</span> <span class="nx">PersonCard</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.markdown&#34;</span><span class="o">:</span> <span class="nx">Markdown</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.featured-articles&#34;</span><span class="o">:</span> <span class="nx">FeaturedArticles</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;blocks.newsletter&#34;</span><span class="o">:</span> <span class="nx">Newsletter</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">...</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">blocksFromAPI</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">block</span>: <span class="kt">BlockData</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kr">const</span> <span class="nx">Component</span> <span class="o">=</span> <span class="nx">componentMap</span><span class="p">[</span><span class="nx">block</span><span class="p">.</span><span class="nx">__component</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">Component</span> <span class="o">?</span> <span class="p">&lt;</span><span class="nt">Component</span> <span class="na">data</span><span class="o">=</span><span class="p">{</span><span class="nx">block</span><span class="p">}</span> <span class="p">/&gt;</span> <span class="o">:</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span></span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<p>Strapi 是一个强大的 Headless CMS，适合快速构建和管理内容驱动的应用。通过灵活的内容建模、API 生成和插件扩展，Strapi 能满足各种项目需求。本文介绍了 Strapi 的基本概念、主要流程和进阶用法，希望能帮助你快速上手。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Strapi Middleware: <a href="https://docs.strapi.io/cms/backend-customization/middlewares" rel="noopener noreferrer">https://docs.strapi.io/cms/backend-customization/middlewares</a></li><li>strapi generate:middleware: <a href="https://docs.strapi.io/cms/cli#strapi-generate" rel="noopener noreferrer">https://docs.strapi.io/cms/cli#strapi-generate</a></li><li>Strapi: <a href="https://strapi.io/" rel="noopener noreferrer">https://strapi.io/</a></li></ol>
            </div>]]></description></item><item><title>软件开发中的跨功能性需求（RFC）</title><link>https://guzhongren.github.io/2025/04/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E8%B7%A8%E5%8A%9F%E8%83%BD%E6%80%A7%E9%9C%80%E6%B1%82rfc/</link><pubDate>Mon, 28 Apr 2025 08:40:12 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/04/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E8%B7%A8%E5%8A%9F%E8%83%BD%E6%80%A7%E9%9C%80%E6%B1%82rfc/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="引言">引言</h2>
<p>作为程序员的你，正在开发一款基于全球地图的某资源分布网站，你的产品会被各个国家的人使用，而每个国家都有不同的法律法规和文化习惯。你需要考虑到这些因素，以确保你的产品在全球范围内都能正常使用。比如有争议的边界不能让用户看到对自己国家不利的标记，那么你需要怎么做呢？这时候，你就需要考虑跨功能性需求了。</p>
<h3 id="什么是跨功能性需求">什么是跨功能性需求</h3>
<p>跨功能性需求（Cross-Functional Requirements, CFRs）是指那些不直接与特定功能相关，但对整个系统的质量、性能和用户体验有重要影响的需求。例如，性能、安全性和可扩展性等。这些需求通常被称为“非功能性需求”，但它们对系统的成功至关重要。</p>
<h3 id="其在软件开发中的重要性">其在软件开发中的重要性</h3>
<p>跨功能性需求贯穿于软件开发的各个阶段，直接影响系统的稳定性、用户满意度和长期维护成本。例如，在一个实时通信应用中，低延迟（性能需求）和数据加密（安全性需求）是用户体验的核心。如果忽视这些需求，可能导致系统在高负载或恶意攻击下崩溃，甚至无法满足用户的基本期望。</p>
<h2 id="跨功能性需求详细讨论">跨功能性需求详细讨论</h2>
<table>
  <thead>
      <tr>
          <th>需求类别</th>
          <th>具体问题</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>可扩展性（Extensibility）</strong></td>
          <td>是否需要组件化？是否需要提供一个插件功能，由谁来实施？</td>
      </tr>
      <tr>
          <td><strong>可移植性（Portability）</strong></td>
          <td>是否有迁移到另一个数据库产品或操作系统的必要性？</td>
      </tr>
      <tr>
          <td><strong>可安装性和可部署性（Installability &amp; Deployment）</strong></td>
          <td>需要提供什么样的基础设施？需要什么样的安装便利性？是否支持持续交付？如何回滚或升级版本？</td>
      </tr>
      <tr>
          <td><strong>兼容性（Compatibility）</strong></td>
          <td>需要与哪些其他系统集成？需要遵循哪些行业标准？是否需要考虑现有数据格式？</td>
      </tr>
      <tr>
          <td><strong>可集成性和互操作性（Integratability &amp; Interoperability）</strong></td>
          <td>是否需要提供 API 或库供其他系统使用？版本管理和升级策略是什么？</td>
      </tr>
      <tr>
          <td><strong>可复用性（Leveragability &amp; Reuse）</strong></td>
          <td>是否能够复用企业现有组件/库，或者当前组件/库是否将被重用？</td>
      </tr>
      <tr>
          <td><strong>可伸缩性（Scalability）</strong></td>
          <td>如何根据不断变化的用户量来提高吞吐量？如何对此进行测试？</td>
      </tr>
      <tr>
          <td><strong>版本化和升级策略（Versioning and upgrades）</strong></td>
          <td>版本化策略是什么？如何跟踪内部/外部的版本？有没有向后兼容的限制？</td>
      </tr>
      <tr>
          <td><strong>可访问性（Accessibility）</strong></td>
          <td>是否支持有特殊需要的用户（如读屏）？</td>
      </tr>
      <tr>
          <td><strong>本地化和国际化（Localisation &amp; Internationalisation）</strong></td>
          <td>是否支持多语言？日期/时间/货币的转换和翻译？</td>
      </tr>
      <tr>
          <td><strong>可用性和用户体验（Usability and user experience）</strong></td>
          <td>用户体验对系统有多重要？是否有公司用户体验准则？是否支持多设备？</td>
      </tr>
      <tr>
          <td><strong>分布性（Distributability）</strong></td>
          <td>系统是否能在特定区域使用？是否支持离线运行？如何同步信息？</td>
      </tr>
      <tr>
          <td><strong>帮助与支持（Help &amp; Support）</strong></td>
          <td>是否需要用户文档、教程或支持团队？是否需要计划培训？</td>
      </tr>
      <tr>
          <td><strong>可配置性（Configurability）</strong></td>
          <td>用户或管理员是否可以配置功能？如何进行配置管理？</td>
      </tr>
      <tr>
          <td><strong>支持性（Supportability）</strong></td>
          <td>用户/操作支持的级别是什么？如何提供支持？</td>
      </tr>
      <tr>
          <td><strong>归档（Archiving）</strong></td>
          <td>归档什么信息？何时归档？如何归档？谁可以访问归档信息？</td>
      </tr>
      <tr>
          <td><strong>可用性（Availability）</strong></td>
          <td>是否有可用性目标？需要什么架构来满足这些要求？是否有高峰负载需求？</td>
      </tr>
      <tr>
          <td><strong>容量（Capacity）</strong></td>
          <td>是否有存储要求？高峰负载如何处理？系统需要处理的数据量和用户数量？</td>
      </tr>
      <tr>
          <td><strong>连续性（Continuity）</strong></td>
          <td>是否有灾难恢复计划？</td>
      </tr>
      <tr>
          <td><strong>数据完整性和一致性（Data Integrity and Consistency）</strong></td>
          <td>是否需要数据校验、日志追踪或数据恢复机制？</td>
      </tr>
      <tr>
          <td><strong>可维护性（Maintainability）</strong></td>
          <td>最大可容忍停机时间是什么？是否有停机通知要求？错误页面如何处理？</td>
      </tr>
      <tr>
          <td><strong>监控（Monitoring）</strong></td>
          <td>应该衡量哪些业务/技术指标？如何监测？需要哪些警报？</td>
      </tr>
      <tr>
          <td><strong>多环境支持（Multiple Environment Support）</strong></td>
          <td>需要多少环境？如何配置和管理这些环境？</td>
      </tr>
      <tr>
          <td><strong>性能（Performance）</strong></td>
          <td>吞吐量/响应时间要求是什么？是否需要性能测试？是否需要考虑异步场景？</td>
      </tr>
      <tr>
          <td><strong>弹性和容错性（Resilience &amp; Fault Tolerance）</strong></td>
          <td>如果外部依赖失效，系统如何降级？</td>
      </tr>
      <tr>
          <td><strong>可靠性（Reliability）</strong></td>
          <td>不可靠的成本是什么？需要多少成本来保证可靠？</td>
      </tr>
      <tr>
          <td><strong>可审计性（Auditability）</strong></td>
          <td>哪些操作需要被跟踪？是否有法律或监管要求？</td>
      </tr>
      <tr>
          <td><strong>认证（Authentication）</strong></td>
          <td>如何鉴别用户身份？是否遵循标准或使用现有认证系统？</td>
      </tr>
      <tr>
          <td><strong>授权（Authorisation）</strong></td>
          <td>哪些角色和权限是必要的？如何维护和应用权限？</td>
      </tr>
      <tr>
          <td><strong>法律合规性（Legal Compliance）</strong></td>
          <td>是否有数据/系统或软件交付过程的法律限制？</td>
      </tr>
      <tr>
          <td><strong>数据隐私（Data Privacy）</strong></td>
          <td>哪些数据需要加密？哪些数据对用户和操作人员可见/隐藏？如何处理脱敏？</td>
      </tr>
      <tr>
          <td><strong>安全性（Security）</strong></td>
          <td>是否需要安全审计或渗透测试？企业的安全准则是什么？是否有 SSL 或 VPN 要求？</td>
      </tr>
  </tbody>
</table>
<h2 id="跨功能性需求的挑战">跨功能性需求的挑战</h2>
<h3 id="难以量化和验证">难以量化和验证</h3>
<p>跨功能性需求的定义通常较为模糊。例如：</p>
<ul>
<li>性能需求可能以“系统应快速响应”描述，但“快速”缺乏具体标准。</li>
<li>安全性需求可能以“系统应安全”描述，但安全的程度难以量化。</li>
</ul>
<h4 id="解决方法">解决方法</h4>
<ul>
<li>使用具体的指标定义需求，例如“响应时间小于 200 毫秒”。</li>
<li>借助工具（如 JMeter）进行性能测试，或使用安全扫描工具（如 OWASP ZAP）验证安全性。</li>
</ul>
<h3 id="与功能性需求的冲突">与功能性需求的冲突</h3>
<p>跨功能性需求可能与功能性需求发生冲突。例如：</p>
<ul>
<li>为了提高性能，可能需要简化某些功能。</li>
<li>为了增强安全性，可能会增加用户操作的复杂性。</li>
</ul>
<h4 id="实例权衡性能与安全性">实例：权衡性能与安全性</h4>
<p>某在线支付系统在设计时，为了提高性能，采用了分布式架构；但为了保证安全性，又引入了多层加密和双因子认证。</p>
<h2 id="如何发现跨功能性需求">如何发现跨功能性需求</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Software-Engineering/CFR/crf.1e8tg7u4l3.webp" alt="CFR" /></p>
<p>跨功能需求影响着软件的整个生命周期，在项目交付过程中，可以根据软件产品的目标和特点，从以下几个视角来收集和确定跨功能需求：</p>
<ul>
<li><strong>研发团队视角</strong>，关注软件研发过程中的跨功能特性，包括软件架构设计相关的一些特性，如可扩展性、可移植性、可伸缩性、兼容性等。</li>
<li><strong>用户视角</strong>，关注软件使用过程中的跨功能特性，关注用户体验，如设备兼容性、可访问性、可配置性等。</li>
<li><strong>运维团队视角</strong>，关注软件维护过程中的跨功能特性，包括基础设施运营维护、数据维护、故障恢复相关的一些特性，如性能、可用性、容量、监控、熔断降级策略等。</li>
<li><strong>安全审计团队视角</strong>，关注软件全生命周期的安全相关的跨功能特性，大部分企业有专门的安全审计部门，会对软件产品的安全提出很多需求，如可审计性，法律合规性，数据隐私性。</li>
</ul>
<h2 id="解决方案与实践">解决方案与实践</h2>
<h3 id="需求优先级的设定">需求优先级的设定</h3>
<p>通过与利益相关者协商，明确跨功能性需求的优先级。例如：</p>
<ul>
<li>使用 MoSCoW 方法（Must, Should, Could, Won&rsquo;t）分类需求。</li>
<li>在项目初期定义关键性能指标（KPIs）和安全目标。</li>
</ul>
<h4 id="实例敏捷开发中的需求优先级">实例：敏捷开发中的需求优先级</h4>
<p>某团队在敏捷开发中，每个迭代周期都会评估跨功能性需求的优先级，并在冲刺计划中分配资源。</p>
<h3 id="跨团队协作的重要性">跨团队协作的重要性</h3>
<p>跨功能性需求通常涉及多个团队的协作。例如：</p>
<ul>
<li>开发团队需要与运维团队合作，确保系统的可扩展性。</li>
<li>安全团队需要与开发团队合作，进行代码审查和漏洞修复。</li>
</ul>
<h4 id="实例devsecops-实践">实例：DevSecOps 实践</h4>
<p>某企业通过 DevSecOps 实践，将安全性集成到开发和运维流程中，确保跨功能性需求在整个生命周期内得到满足。</p>
<h2 id="案例分析">案例分析</h2>
<h3 id="实际项目中的跨功能性需求处理">实际项目中的跨功能性需求处理</h3>
<p>在某大型电商平台的开发中，性能和安全性是两个关键的跨功能性需求。通过以下措施，成功满足了这些需求：</p>
<ol>
<li>
<p><strong>性能优化</strong>：</p>
<ul>
<li>使用 Redis 缓存机制减少数据库查询。</li>
<li>部署 Nginx 负载均衡器分发流量。</li>
</ul>
</li>
<li>
<p><strong>安全性增强</strong>：</p>
<ul>
<li>引入 Web 应用防火墙（WAF）防止常见攻击（如 SQL 注入）。</li>
<li>定期进行渗透测试，发现并修复漏洞。</li>
</ul>
</li>
</ol>
<blockquote>
<p>来源：<a href="https://redis.io/documentation">Redis 官方文档</a><sup>[1]</sup>

来源：<a href="https://nginx.org/en/docs/">Nginx 官方文档</a><sup>[2]</sup>
</p>
</blockquote>
<h3 id="性能">性能</h3>
<p>性能需求通常包括以下几个方面：</p>
<ol>
<li><strong>响应时间</strong>：用户操作后系统的响应速度。例如，搜索引擎的响应时间通常需要在几百毫秒内完成。</li>
<li><strong>吞吐量</strong>：系统在单位时间内能够处理的请求数量。例如，支付网关需要支持每秒数千笔交易。</li>
<li><strong>资源利用率</strong>：系统在运行时对 CPU、内存和网络等资源的使用效率。</li>
</ol>
<h4 id="实例高性能电商平台">实例：高性能电商平台</h4>
<p>某电商平台在促销活动期间，通过以下措施优化性能：</p>
<ul>
<li>使用 Redis 缓存热门商品数据，减少数据库查询压力。</li>
<li>部署 CDN（内容分发网络）加速静态资源加载。</li>
</ul>
<blockquote>
<p>来源：<a href="https://redis.io/documentation">Redis 官方文档</a><sup>[1]</sup>
</p>
</blockquote>
<h3 id="可扩展性">可扩展性</h3>
<p>可扩展性需求确保系统能够随着用户数量或数据量的增长而扩展。主要包括：</p>
<ol>
<li><strong>水平扩展</strong>：通过增加更多服务器来提升系统能力。</li>
<li><strong>垂直扩展</strong>：通过升级硬件资源（如 CPU 和内存）来提升性能。</li>
</ol>
<h4 id="实例分布式数据库">实例：分布式数据库</h4>
<p>某社交媒体平台采用分布式数据库（如 MongoDB）来存储用户数据，支持动态扩展以应对用户增长。</p>
<blockquote>
<p>来源：<a href="https://www.mongodb.com/docs/">MongoDB 官方文档</a><sup>[3]</sup>
</p>
</blockquote>
<h3 id="安全性">安全性</h3>
<p>安全性需求包括以下几个方面：</p>
<ol>
<li><strong>数据加密</strong>：保护敏感数据在传输和存储中的安全性。</li>
<li><strong>身份验证</strong>：确保只有授权用户能够访问系统。</li>
<li><strong>权限管理</strong>：限制用户对系统资源的访问范围。</li>
</ol>
<h4 id="实例oauth-20">实例：OAuth 2.0</h4>
<p>某金融应用通过 OAuth 2.0 实现第三方登录，同时保护用户的敏感信息。</p>
<blockquote>
<p>来源：<a href="https://oauth.net/2/">OAuth 2.0 规范</a><sup>[4]</sup>
</p>
</blockquote>
<h2 id="总结">总结</h2>
<p>回到开头的问题，如何处理全球地图资源分布网站的跨功能性需求？可以通过以下步骤：</p>
<ol>
<li><strong>需求收集</strong>：与各国法律法规专家沟通，了解不同国家的要求，比如使用不同国家官方支持的地图地址。</li>
<li><strong>需求优先级</strong>：使用 MoSCoW 方法确定哪些需求是必须的，哪些是可选的， 这里就是国界。</li>
<li><strong>跨团队协作</strong>：与开发、运维和安全团队密切合作，确保需求在设计和实现中得到满足, 最好实现配置即代码。</li>
<li><strong>测试与验证</strong>：在不同国家的环境中进行测试，确保系统符合各国的法律法规。</li>
</ol>
<p>当然还有一种最简单的方法，只提供卫星影像地图，不提供边界图层。</p>
<h3 id="关键点回顾与未来展望">关键点回顾与未来展望</h3>
<p>跨功能性需求是软件开发中不可忽视的一部分。通过合理的需求优先级设定和跨团队协作，可以有效应对这些挑战。未来，随着技术的进步，跨功能性需求的管理将更加智能化和自动化。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Redis 官方文档: <a href="https://redis.io/documentation" rel="noopener noreferrer">https://redis.io/documentation</a></li><li>Nginx 官方文档: <a href="https://nginx.org/en/docs/" rel="noopener noreferrer">https://nginx.org/en/docs/</a></li><li>MongoDB 官方文档: <a href="https://www.mongodb.com/docs/" rel="noopener noreferrer">https://www.mongodb.com/docs/</a></li><li>OAuth 2.0 规范: <a href="https://oauth.net/2/" rel="noopener noreferrer">https://oauth.net/2/</a></li></ol>
            </div>]]></description></item><item><title>基于AI大模型开发一个Slack Bot的总结</title><link>https://guzhongren.github.io/2025/03/%E5%9F%BA%E4%BA%8Eai%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAslack-bot%E7%9A%84%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 28 Mar 2025 22:32:34 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/03/%E5%9F%BA%E4%BA%8Eai%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAslack-bot%E7%9A%84%E6%80%BB%E7%BB%93/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="起因">起因</h2>
<p>最近一个半月都在Beach，虽然离开了项目，但每天的生活比项目期间还要忙碌，同时也学到了很多新知识。</p>
<hr>
<p>在Beach期间，我参与了两个与AI相关的项目。虽然AI功能的开发占比不大，但通过代码学习了AI开发的相关模式，例如Google Cloud Platform、Terraform、Vertex AI、CrewAI以及Agent的编排。Agent编排在正式项目中尤为重要，因为AI无法一次性理解并完成复杂任务，需要将任务（Work）拆分为多个子任务（Task），通过编排的Agent组合完成。这种编排的控制逻辑和编码逻辑基本一致，主要包括顺序、循环和组合等基本形式。</p>
<hr>
<p>第一个项目是关于遗留系统维护质量评估的，涉及了许多新技术，例如 CrewAI、Vertex AI、Streamlit、Hugging Face 和 Agent 编排。在这个项目中，我首次使用 Python Flask 独立构建了一个后端服务，并结合 Streamlit 开发了服务端渲染的前端，为用户提供了优秀的交互体验。简单来说，这个功能类似于一个聊天记录的展示。</p>
<hr>
<p>第二个项目与SRE相关，目标是将可观测链路上的 Alert 转换为 Incident，并通过<code>ChatOps</code>形式处理这些 Incident。为此，我们需要一个集成AI功能的 Bot 来提升 Incident 处理效率。例如，当一个 Manager 加入 Incident Channel 时，需要一个简要的总结（当前 Incident 的情况总结）。这也是本文的来源。</p>
<h2 id="需求">需求</h2>
<p>在<code>ChatOps</code>中，当 Manager 加入 Incident 处理的聊天组时，需要及时获取当前 Incident 的处理情况，包括实时状态、关键行为以及可能的建议。</p>
<h2 id="基本流程">基本流程</h2>
<p>基于上述需求，我们需要为 Chat 设计一个 Bot。这个 Bot 在接收到简单指令后，可以生成当前 Incident 的关键数据报告，类似于 PIR（Post-Incident Report），但不需要那么详细。</p>
<div class="mermaid" id="id-1"></div><h2 id="开发流程">开发流程</h2>
<p>在开发过程中，我们需要完成以下任务：</p>
<ol>
<li>在 Slack 上创建一个 Bot，作为用户与 Slack 之间的沟通桥梁。</li>
<li>使用无服务器函数处理 Bot 发送的请求，获取 AI 所需数据，并将其传递给 AI 模型，最终将AI返回的内容发送回 Slack。</li>
</ol>
<h3 id="创建slack-bot">创建Slack Bot</h3>
<p>在<a href="https://api.slack.com/apps">Slack官网</a><sup>[1]</sup>
上创建 Bot 有两种方式： 1, Manifest， 2，Scratch 方式</p>
<div class="mermaid" id="id-2"></div><div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw" aria-hidden="true"></i>提示<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">创建Slack Bot需要Slack Workspace的管理员权限。</div>
        </div>
    </div>
<h4 id="manifest方式">Manifest方式</h4>
<p>这种方式相对简单，支持 JSON 和 YAML 格式，所有配置都集中在 Manifest文件中。以下是一个 YAML 格式的示例：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">display_information</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">XBot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">bot_user</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">display_name</span><span class="p">:</span><span class="w"> </span><span class="l">XBot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">always_online</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">slash_commands</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">/summary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;ServerLess HTTPS URL&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="l">summary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">usage_hint</span><span class="p">:</span><span class="w"> </span><span class="l">it</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">should_escape</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">oauth_config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scopes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">bot</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">app_mentions:read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">channels:history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">channels:join</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">channels:read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">chat:write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">chat:write.public</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">commands</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">incoming-webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">groups:history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">im:history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">mpim:history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">users:read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">settings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">event_subscriptions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">request_url</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;ServerLess HTTPS URL&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">bot_events</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">app_mention</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">interactivity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">is_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">request_url</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;ServerLess HTTPS URL&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">org_deploy_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">socket_mode_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">token_rotation_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span></span></span></code></pre></div></div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>示例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">ServerLess HTTPS URL: <a href="https://serverless.functions.url/x-bot">https://serverless.functions.url/x-bot</a><sup>[2]</sup></div>
        </div>
    </div>
<p>这种方式适合已经创建过一个 Bot，需要重新创建的情况，例如测试完成后需要创建正式的 Bot。</p>
<h4 id="scratch方式">Scratch方式</h4>
<p>按照提示逐步完成配置，涉及多个模块，例如<code>Basic Information</code>、<code>Socket Mode</code>、<code>Incoming Webhooks</code>、<code>Slash Command</code>、<code>OAuth &amp; Permissions</code>和<code>Event Subscriptions</code>等。具体权限可参考 Manifest 的 YAML 配置。</p>
<p>通过上述两种方式之一创建Bot后，需要获取以下Token，这些Token将在无服务器函数中使用：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">项目</th>
          <th style="text-align: left">位置</th>
          <th style="text-align: left">操作</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">SIGNING_SECRET</td>
          <td style="text-align: left"><code>Basic Information</code> -&gt; <code>Signing Secret</code></td>
          <td style="text-align: left">复制</td>
      </tr>
      <tr>
          <td style="text-align: left">SLACK_APP_TOKEN</td>
          <td style="text-align: left"><code>Basic Information</code> -&gt; <code>App-Level Tokens</code></td>
          <td style="text-align: left">点击<code>Generate Token and Scope</code>，命名并赋予<code>connections:write</code>权限</td>
      </tr>
      <tr>
          <td style="text-align: left">SLACK_BOT_TOKEN</td>
          <td style="text-align: left"><code>OAuth &amp; Permissions</code> -&gt; <code>OAuth Tokens</code></td>
          <td style="text-align: left">复制</td>
      </tr>
  </tbody>
</table>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>重要提示<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>在本地开发代码并与Slack测试时，启用<code>Socket Mode</code>可以避免每次都部署代码，从而节省时间和资源</li>
<li>启用<code>Socket Mode</code>时，如果多人开发同一个Bot，可能会收到彼此的请求返回结果。建议每人创建一个独立的Workspace以避免冲突</li>
<li>更改完配置之后，需要将 App 安装到你的 Workspace 中</li>
</ul>
</div>
        </div>
    </div>
<h3 id="创建无服务器函数处理用户请求">创建无服务器函数处理用户请求</h3>
<p>这里选择使用 Python 来作为 Serferless 处理工具，并将其部署在云服务器上，比如 AWS Lambda, Azure Function， 或者 Google Cloud Platform 的 Cloud Run Functions中，这里不讲工程构建之类的，直接给出部分参考代码。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">slack_bolt</span> <span class="kn">import</span> <span class="n">App</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">slack_bolt.adapter.flask</span> <span class="n">imp</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">vertexai</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">vertexai.preview.generative_models</span> <span class="kn">import</span> <span class="n">GenerativeModel</span><span class="p">,</span> <span class="n">GenerationConfig</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">token</span><span class="o">=</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;SLACK_BOT_TOKEN&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">signing_secret</span><span class="o">=</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;SIGNING_SECRET&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">raise_error_for_unhandled_request</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="nd">@app.command</span><span class="p">(</span><span class="s2">&#34;/summary&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">handle_summary_command</span><span class="p">(</span><span class="n">ack</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">say</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">ack</span><span class="p">(</span><span class="s2">&#34;Thinking...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">channel_id</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s2">&#34;channel_id&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">check_channel_membership</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">channel_id</span><span class="p">,</span> <span class="n">say</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">slack_channel_histories</span> <span class="o">=</span> <span class="n">get_chat_history</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">channel_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">input</span> <span class="o">=</span> <span class="n">format_events</span><span class="p">(</span><span class="n">incident_id</span><span class="p">,</span> <span class="n">slack_channel_histories</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Use AI to summarize</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">system_prompt</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;</span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="s1">    You are an operations analysis expert. You .....
</span></span></span><span class="line"><span class="cl"><span class="s1">    ......
</span></span></span><span class="line"><span class="cl"><span class="s1">    Output format:
</span></span></span><span class="line"><span class="cl"><span class="s1">    ......
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">vertexai</span><span class="o">.</span><span class="n">init</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">project</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;GCP_PROJECT&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">location</span><span class="o">=</span><span class="s2">&#34;us-central1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span> <span class="o">=</span> <span class="n">GenerativeModel</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">model_name</span><span class="o">=</span><span class="s2">&#34;gemini-2.0-flash&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">system_instruction</span><span class="o">=</span><span class="p">[</span><span class="n">system_prompt</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">gen_config</span> <span class="o">=</span> <span class="n">GenerationConfig</span><span class="p">(</span><span class="n">temperature</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">generate_content</span><span class="p">([</span><span class="n">prompt</span><span class="p">],</span> <span class="n">generation_config</span><span class="o">=</span><span class="n">gen_config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span>
</span></span><span class="line"><span class="cl">    <span class="n">say</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">blocks</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;header&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;plain_text&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;Here is the summary of the incident:&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;section&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;mrkdwn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="n">summary</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">handler</span> <span class="o">=</span> <span class="n">SlackRequestHandler</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Main</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">slack_bot</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="n">handle</span><span class="p">(</span><span class="n">request</span><span class="p">)</span></span></span></code></pre></div></div>
<p>比如使用如下命令将这个程序部署在 GCP 中：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gcloud functions deploy x-bot <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --runtime python310 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --trigger-http <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --allow-unauthenticated <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --entry-point slack_bot <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --timeout<span class="o">=</span>120s <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --set-env-vars <span class="nv">GCP_PROJECT</span><span class="o">=</span><span class="s1">&#39;&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --set-env-vars <span class="nv">SLACK_BOT_TOKEN</span><span class="o">=</span><span class="s1">&#39;&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --set-env-vars <span class="nv">SIGNING_SECRET</span><span class="o">=</span><span class="s1">&#39;&#39;</span></span></span></code></pre></div></div>
<h2 id="注意事项">注意事项</h2>
<p>部署好 Serverless Function 之后，需要将Serverless Function 的访问的 URL 添加到 Slack App 的配置中；</p>
<ul>
<li>将 <code>Socket Mode</code> 关闭</li>
<li>将 URL 填到 <code>Event Subscriptions</code>, 需要通过其校验</li>
<li>将 URL 填到 <code>Slash Commands</code> 添加的那个Command（<code>/summary</code>） 中</li>
</ul>
<h2 id="总结">总结</h2>
<p>Slack bot 的开发相对简单，大部分内容是简单的配置；重要的是将获取到的数据以某种特定的 Prompt ，并将其传递给 AI model 获取到准确的结果。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Slack官网: <a href="https://api.slack.com/apps" rel="noopener noreferrer">https://api.slack.com/apps</a></li><li>https://serverless.functions.url/x-bot: <a href="https://serverless.functions.url/x-bot" rel="noopener noreferrer">https://serverless.functions.url/x-bot</a></li></ol>
            </div>]]></description></item><item><title>本地跑deepseek 7b模型</title><link>https://guzhongren.github.io/2025/02/%E6%9C%AC%E5%9C%B0%E8%B7%91deepseek-7b%E6%A8%A1%E5%9E%8B/</link><pubDate>Tue, 11 Feb 2025 22:31:58 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/02/%E6%9C%AC%E5%9C%B0%E8%B7%91deepseek-7b%E6%A8%A1%E5%9E%8B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="背景">背景</h2>
<p>最近，Deepseek 因其卓越的性能和高效的推理速度在技术圈内引起了广泛关注。</p>
<p>Deepseek 采用了先进的算法(使用汇编和 CUDA 混编的方式调用 GPU)和训练方法(蒸馏)，不仅显著提升了推理速度，还降低了对硬件配置的要求，使其能够在更多设备上运行。</p>
<p>然而，使用在线 Deepseek 服务时，用户可能会遇到“服务器繁忙，请稍后再试”的问题。</p>
<p>作为程序员，我们自然不能忍受这种情况，因此本文将指导你如何在本地搭建 Deepseek 模型。</p>
<h2 id="搭建步骤">搭建步骤</h2>
<h3 id="所需软件及环境">所需软件及环境</h3>
<h4 id="环境">环境</h4>
<ul>
<li><strong>操作系统</strong>: MacOS M1 (Sequoia [Version 15.3])</li>
</ul>
<h4 id="软件">软件</h4>
<ul>
<li><strong><a href="https://ollama.com/">Ollama</a><sup>[1]</sup>
</strong>: 用于管理和运行大模型。</li>
<li><strong><a href="https://chatboxai.app/">Chatbox AI</a><sup>[2]</sup>
</strong>: 提供与大模型交互的界面。</li>
</ul>
<h3 id="安装步骤">安装步骤</h3>
<h4 id="安装-ollama">安装 Ollama</h4>
<p>Ollama 可以通过命令行或手动下载安装包进行安装。手动安装后，系统会自动启动 Ollama 服务；而通过命令行安装后，则需要手动启动服务。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">brew install ollama
</span></span><span class="line"><span class="cl"><span class="c1"># 安装完成后，启动 Ollama 服务</span>
</span></span><span class="line"><span class="cl">ollama serve</span></span></code></pre></div></div>
<h4 id="运行-deepseek模型">运行 deepseek模型</h4>
<ol>
<li>访问 Ollama 模型库，搜索 deepseek。</li>
<li>选择 deepseek-r1 模型，并选择 7b 版本。</li>
<li>点击复制按钮，将命令行粘贴到终端中运行。Ollama 将自动拉取并启动该模型。</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ollama run deepseek-r1:7b</span></span></code></pre></div></div>
<h4 id="安装-chatbox">安装 Chatbox</h4>
<p>Chatbox 是与大模型进行交互的界面。你可以选择直接安装软件或通过 Docker 运行。推荐使用软件安装，以便快速启动和操作。</p>
<p>可安装软件或者通过docker 运行，推荐软件安装，可以快速启动软件来提速。</p>
<h4 id="配置">配置</h4>
<p>Chatbox 安装完成并且 deepseek 大模型运行起来后，在 Chatbox -&gt; Settings 中选择本地启动的模型即可。</p>
<h2 id="总结">总结</h2>
<p>随着人工智能技术的快速发展，社会分工可能会发生显著变化, 最明显的是人工智能会淘汰掉社会分工的中间层。</p>
<p>未来的趋势可能是：要么成为顶层的规则设计者，要么成为底层的实践者。通过本地搭建和运行 Deepseek 模型，我们不仅能够避免在线服务的限制，还能更深入地理解和掌握这一前沿技术。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Ollama: <a href="https://ollama.com/" rel="noopener noreferrer">https://ollama.com/</a></li><li>Chatbox AI: <a href="https://chatboxai.app/" rel="noopener noreferrer">https://chatboxai.app/</a></li></ol>
            </div>]]></description></item></channel></rss>