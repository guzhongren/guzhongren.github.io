<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Action - 标签 - 谷中仁的博客</title><link>https://guzhongren.github.io/tags/action/</link><description>Action - 标签 - 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>guzhongren@live.cn (谷中仁)</managingEditor><webMaster>guzhongren@live.cn (谷中仁)</webMaster><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 20 Jan 2022 23:02:34 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/tags/action/" rel="self" type="application/rss+xml"/><item><title>构建更优的 GitHub Action 完成 Algolia 数据上传</title><link>https://guzhongren.github.io/2022/01/%E6%9E%84%E5%BB%BA%E6%9B%B4%E4%BC%98%E7%9A%84github-action%E5%AE%8C%E6%88%90algolia%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%BC%A0/</link><pubDate>Thu, 20 Jan 2022 23:02:34 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/01/%E6%9E%84%E5%BB%BA%E6%9B%B4%E4%BC%98%E7%9A%84github-action%E5%AE%8C%E6%88%90algolia%E6%95%B0%E6%8D%AE%E4%B8%8A%E4%BC%A0/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/DevOps/Github-Action.6lpf9wwtga80.webp" referrerpolicy="no-referrer">
            </div><h2 id="场景">场景</h2>
<p>程序员喜欢写博客，大都喜欢自己 Host 一个自己的 Blog, 通常 Blog 会有一个全局的搜索功能，开源博客一般都会选择 <a href="https://lunrjs.com/" target="_blank" rel="noopener noreffer ">lunrjs</a> 或者 <a href="https://www.algolia.com/" target="_blank" rel="noopener noreffer ">algolia</a> 等。我的 Blog 是基于 <a href="https://gohugo.io/" target="_blank" rel="noopener noreffer ">Hugo</a> 构建的，使用的主题是 <a href="https://hugoloveit.com/" target="_blank" rel="noopener noreffer ">LoveIt</a>, 集成的是 algolia 的搜索方式。</p>
<p>对于存储在 algolia 上的数据，我是通过 GitHub Action：<a href="https://github.com/marketplace/actions/algolia-docsearch-indexer" target="_blank" rel="noopener noreffer ">Algolia Docsearch Indexer</a> 来上传的，之前使用是没有问题的。</p>
<h2 id="问题">问题</h2>
<p>突然有一天我要使用搜索功能，但是怎么也搜索不到我想搜索的内容，看了 GitHub 项目的构建状态，一切正常，然后登陆到 algolia 后台一看， 最后一次的数据更新是在 21 年 8 月； 然后打开最近的博客构建记录，看了执行如下 GitHub workflow 的 yaml 日志，大吃一惊：程序执行错误，但还是在最后给我们送了一个🚀，同样是写代码，你能忍？</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">darrenjennings/algolia-docsearch-action@master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">algolia_application_id</span><span class="p">:</span><span class="w"> </span><span class="l">${{secrets.ALGOLIA_APPLICATION_ID}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">algolia_api_key</span><span class="p">:</span><span class="w"> </span><span class="l">${{secrets.ALGOLIA_API_KEY}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">file</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;./public/index.json&#39;</span></span></span></code></pre></div></div>
<p>运行日志</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-log">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-log" data-lang="log">Run darrenjennings/algolia-docsearch-action@master
/usr/bin/docker run --name a682564a13d76444749d3b720346ba2365371_9474ad --label 6a6825 --workdir /github/workspace --rm -e INPUT_ALGOLIA_APPLICATION_ID -e INPUT_ALGOLIA_API_KEY -e INPUT_FILE -e HOME -e GITHUB_JOB -e GITHUB_REF -e GITHUB_SHA -e GITHUB_REPOSITORY -e GITHUB_REPOSITORY_OWNER -e GITHUB_RUN_ID -e GITHUB_RUN_NUMBER -e GITHUB_RETENTION_DAYS -e GITHUB_RUN_ATTEMPT -e GITHUB_ACTOR -e GITHUB_WORKFLOW -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e GITHUB_EVENT_NAME -e GITHUB_SERVER_URL -e GITHUB_API_URL -e GITHUB_GRAPHQL_URL -e GITHUB_REF_NAME -e GITHUB_REF_PROTECTED -e GITHUB_REF_TYPE -e GITHUB_WORKSPACE -e GITHUB_ACTION -e GITHUB_EVENT_PATH -e GITHUB_ACTION_REPOSITORY -e GITHUB_ACTION_REF -e GITHUB_PATH -e GITHUB_ENV -e RUNNER_OS -e RUNNER_ARCH -e RUNNER_NAME -e RUNNER_TOOL_CACHE -e RUNNER_TEMP -e RUNNER_WORKSPACE -e ACTIONS_RUNTIME_URL -e ACTIONS_RUNTIME_TOKEN -e ACTIONS_CACHE_URL -e GITHUB_ACTIONS=true -e CI=true -v &#34;/var/run/docker.sock&#34;:&#34;/var/run/docker.sock&#34; -v &#34;/home/runner/work/_temp/_github_home&#34;:&#34;/github/home&#34; -v &#34;/home/runner/work/_temp/_github_workflow&#34;:&#34;/github/workflow&#34; -v &#34;/home/runner/work/_temp/_runner_file_commands&#34;:&#34;/github/file_commands&#34; -v &#34;/home/runner/work/blog/blog&#34;:&#34;/github/workspace&#34; 6a6825:64a13d76444749d3b720346ba2365371  &#34;***&#34; &#34;***&#34; &#34;./public/index.json&#34;
Cloning into &#39;docsearch-scraper&#39;...
Collecting pipenv
  Downloading pipenv-2021.11.23-py2.py3-none-any.whl (3.6 MB)
Collecting virtualenv
  Downloading virtualenv-20.10.0-py2.py3-none-any.whl (5.6 MB)
Requirement already satisfied: pip&gt;=18.0 in /usr/local/lib/python3.6/site-packages (from pipenv) (21.2.4)
Requirement already satisfied: setuptools&gt;=36.2.1 in /usr/local/lib/python3.6/site-packages (from pipenv) (57.5.0)
Collecting virtualenv-clone&gt;=0.2.5
  Downloading virtualenv_clone-0.5.7-py3-none-any.whl (6.6 kB)
Collecting certifi
  Downloading certifi-2021.10.8-py2.py3-none-any.whl (149 kB)
Collecting importlib-resources&gt;=1.0
  Downloading importlib_resources-5.4.0-py3-none-any.whl (28 kB)
Collecting backports.entry-points-selectable&gt;=1.0.4
  Downloading backports.entry_points_selectable-1.1.1-py2.py3-none-any.whl (6.2 kB)
Collecting six&lt;2,&gt;=1.9.0
  Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)
Collecting importlib-metadata&gt;=0.12
  Downloading importlib_metadata-4.8.3-py3-none-any.whl (17 kB)
Collecting filelock&lt;4,&gt;=3.2
  Downloading filelock-3.4.1-py3-none-any.whl (9.9 kB)
Collecting distlib&lt;1,&gt;=0.3.1
  Downloading distlib-0.3.4-py2.py3-none-any.whl (461 kB)
Collecting platformdirs&lt;3,&gt;=2
  Downloading platformdirs-2.4.0-py3-none-any.whl (14 kB)
Collecting zipp&gt;=0.5
  Downloading zipp-3.6.0-py3-none-any.whl (5.3 kB)
Collecting typing-extensions&gt;=3.6.4
  Downloading typing_extensions-4.0.1-py3-none-any.whl (22 kB)
Installing collected packages: zipp, typing-extensions, importlib-metadata, six, platformdirs, importlib-resources, filelock, distlib, backports.entry-points-selectable, virtualenv-clone, virtualenv, certifi, pipenv
WARNING: Running pip as the &#39;root&#39; user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed backports.entry-points-selectable-1.1.1 certifi-2021.10.8 distlib-0.3.4 filelock-3.4.1 importlib-metadata-4.8.3 importlib-resources-5.4.0 pipenv-2021.11.23 platformdirs-2.4.0 six-1.16.0 typing-extensions-4.0.1 virtualenv-20.10.0 virtualenv-clone-0.5.7 zipp-3.6.0
WARNING: You are using pip version 21.2.4; however, version 21.3.1 is available.
You should consider upgrading via the &#39;/usr/local/bin/python -m pip install --upgrade pip&#39; command.
Installing dependencies from Pipfile.lock (aabb41)...
Traceback (most recent call last):
  File &#34;docsearch&#34;, line 5, in &lt;module&gt;
    run()
  File &#34;/github/workspace/docsearch-scraper/cli/src/index.py&#34;, line 161, in run
    exit(command.run(sys.argv[2:]))
  File &#34;/github/workspace/docsearch-scraper/cli/src/commands/run_config.py&#34;, line 21, in run
    return run_config(args[0])
  File &#34;/github/workspace/docsearch-scraper/cli/../scraper/src/index.py&#34;, line 33, in run_config
    config = ConfigLoader(config)
  File &#34;/github/workspace/docsearch-scraper/cli/../scraper/src/config/config_loader.py&#34;, line 72, in __init__
    for key, value in list(data.items()):
AttributeError: &#39;list&#39; object has no attribute &#39;items&#39;
🚀 Successfully indexed and uploaded the results to Algolia</code></pre></div>
<p>面对一个磨洋工的工具，作为程序员的我们肯定不能忍。
打开 GitHub 上这个 Action 的 <a href="https://github.com/darrenjennings/algolia-docsearch-action" target="_blank" rel="noopener noreffer ">源码</a>, 根据对 Action 构建的了解和现有代码，作者使用的是 Python 和 algolia 自己在 GitHub 上开源的 <a href="https://github.com/algolia/docsearch-scraper.git" target="_blank" rel="noopener noreffer ">工具</a>, 然后执行一个  Python 脚本上传文件到 algolia 的；根据以往经验，由 Python 构建的项目镜像一般都比较大，在本地测试了一下，果不其然的大。</p>
<h3 id="面临的问题">面临的问题</h3>
<ul>
<li>工具损坏</li>
<li>镜像体积大</li>
</ul>
<h2 id="方案-spike">方案 Spike</h2>
<table>
  <thead>
      <tr>
          <th>Item</th>
          <th>Option1 使用 algolia 自己的 Restful 接口</th>
          <th>Option 2 algolia SDK</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>描述</td>
          <td>使用 algolia 自己的 Restful 接口实现上传</td>
          <td>使用其官方提供的 SDK 编写代码来集成</td>
      </tr>
      <tr>
          <td>是否推荐</td>
          <td>No</td>
          <td>Yes</td>
      </tr>
      <tr>
          <td>实现难度</td>
          <td>Middle</td>
          <td>Low</td>
      </tr>
      <tr>
          <td>优点</td>
          <td>流程可控</td>
          <td>简单直接，无需担心错误情况的处理</td>
      </tr>
      <tr>
          <td>缺点</td>
          <td>需要写更多的代码来控制整个流程</td>
          <td>整个上传过程不可控</td>
      </tr>
      <tr>
          <td>安全问题</td>
          <td>No</td>
          <td>No</td>
      </tr>
      <tr>
          <td>相对难度</td>
          <td>Middle</td>
          <td>Low</td>
      </tr>
      <tr>
          <td>相对成本</td>
          <td>Middle</td>
          <td>Low</td>
      </tr>
  </tbody>
</table>
<p>综上分析，使用 Option2 SDK 的方案更佳。</p>
<h2 id="执行方案">执行方案</h2>
<p>新建 GitHub Action 项目，我们使用 Dockerfile 的方式构建上传索引的方案；</p>
<ul>
<li>新建 entrypoint.sh 并写入如下代码，脚本执行需要传入如下几个变量：</li>
</ul>
<table>
  <thead>
      <tr>
          <th>Name</th>
          <th>Description</th>
          <th>Required</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>FILE_PATH</td>
          <td>要上传的文件路径</td>
          <td>Yes</td>
      </tr>
      <tr>
          <td>ALGOLIA_APPLICATION_ID</td>
          <td>Algolia 平台的应用 Id</td>
          <td>Yes</td>
      </tr>
      <tr>
          <td>ADMIN_API_KEY</td>
          <td>Algolia 上传所用的 API Key</td>
          <td>Yes</td>
      </tr>
      <tr>
          <td>INDEX_NAME</td>
          <td>在 Algolia 上你所创建的索引名</td>
          <td>Yes</td>
      </tr>
  </tbody>
</table>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nb">set</span> -eu
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">npm install -g @algolia/cli
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">algolia import -s <span class="nv">$FILE_PATH</span> -a <span class="nv">$APPLICATION_ID</span> -k <span class="nv">$ADMIN_API_KEY</span> -n <span class="nv">$INDEX_NAME</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$?</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;0&#34;</span> <span class="o">]</span> <span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;😢 Failed to upload your data to Algolia, PLZ report an issue, thx!&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;🚀 Successfully uploaded!&#34;</span></span></span></code></pre></div></div>
<ul>
<li>新建 Dockerfile 并写入如下代码，在此我们使用最小化的 Node 镜像 <code>node:lts-alpine</code></li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-dcokerfile">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-dcokerfile" data-lang="dcokerfile">FROM node:lts-alpine
COPY entrypoint.sh /entrypoint.sh
ENTRYPOINT [&#34;/entrypoint.sh&#34;]</code></pre></div>
<ul>
<li>更新 README, 完善使用文档。</li>
</ul>
<p>详细代码请参考 <a href="https://github.com/guzhongren/algolia-docsearch-upload-action/blob/main/Dockerfile" target="_blank" rel="noopener noreffer ">algolia-docsearch-upload-action</a>。</p>
<h2 id="验证结果">验证结果</h2>
<p>在完成 Action 并将其集成到 Pipeline 上之后，成功运行，数据可成功上传到 Algolia 平台上，并且博客的右上角的搜索功能可以成功搜索到最新的文章，说明我们的 Action 是可以完成我们的需求的。</p>
<h3 id="运行效率比较">运行效率比较</h3>
<p>没有对比就没有伤害。下面对我自己写的 Action 和之前集成过的 Action 在<code>镜像大小</code>和<code>执行效率</code>方面进行对比。</p>
<div class="echarts" id="id-1" style="width: 100%; height: 30rem;"></div>
<h3 id="镜像大小比较">镜像大小比较</h3>
<div class="echarts" id="id-2" style="width: 100%; height: 30rem;"></div>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客：https://guzhongren.github.io/</a></li>
<li><a href="https://github.com/marketplace/actions/algolia-docsearch-indexer" target="_blank" rel="noopener noreffer ">Algolia Docsearch Indexer: https://github.com/marketplace/actions/algolia-docsearch-indexer</a></li>
<li><a href="https://docs.github.com/en/actions" target="_blank" rel="noopener noreffer ">GitHub Action: https://docs.github.com/en/actions</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
]]></description></item></channel></rss>