<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Shell - 标签 - 谷中仁的博客</title><link>https://guzhongren.github.io/tags/shell/</link><description>Shell - 标签 - 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 22 Sep 2020 19:46:57 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/tags/shell/" rel="self" type="application/rss+xml"/><item><title>最近我是 DevOps</title><link>https://guzhongren.github.io/2020/09/%E6%9C%80%E8%BF%91%E6%88%91%E6%98%AFdevops/</link><pubDate>Tue, 22 Sep 2020 19:46:57 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/09/%E6%9C%80%E8%BF%91%E6%88%91%E6%98%AFdevops/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>最近，在做项目中的 DevOps，主要工作是备份，恢复并且更新 <code>Parameter Store</code>， 即<code>Config as Code</code>; 由于使用<code>AWS 的服务</code>，可靠性还是由很多个 9 来保证的，但是在后期就会由很多问题；</p>
<ul>
<li>Team 创建了多少资源</li>
<li>都有哪些资源</li>
<li>怎么确定某一资源是 Team 项目中要用的</li>
<li>如果 AWS 服务不稳定直接挂了，或者创建的资源被 team 成员不小心删除了，怎么办</li>
<li>如果要更新，我不想登录 AWS Console 或者使用 CLI 来一个个的更新，那怎么办</li>
<li>&hellip;&hellip;</li>
</ul>
<p>对于以上问题，除了<code>as code</code> 还有什么好的方法么？如果有请告诉我。</p>
<p>接下来，我来简单说说我们项目的实践。在这个过程中遇到各种坑，但还是很有收获的。</p>
<p>在这先列个目录，主要罗列涉及到的服务，语言或者功能</p>
<ul>
<li><code>AWS Parameter Store</code>, <code>KMS</code>, <code>cfn(Cloudformation)</code></li>
<li><code>Shell</code></li>
<li><code>Python</code></li>
<li>加解密</li>
<li>MD5</li>
</ul>
<p>由于项目敏感性，在这就简单说说功能；项目中使用到 <code>AWS Parameter Store</code> 作为存储敏感数据的服务，而且所有的数据都是<code>SecurityString</code>（这种类型很重要，后面有坑），在每次项目部署或某些功能运行的时候需要使用其中的值，由于是经过 <code>KMS</code>加密的，要做备份和更新那么就需要调用<code>AWS</code>的服务或者<code>CLI</code>。</p>
<h2 id="第一步-备份">第一步 备份</h2>
<p>第一步，在恢复数据之前，先要获取原有的数据，并将其存储为原始数据。 获取数据倒是不难，写个 shell 直接调用 <code>AWS CLI</code>，将获取到的数据存在文本文件里即可。可以参考官网 <a href="" rel="">AWS CLI Get-Parameter by Path</a></p>
<h2 id="第二步-恢复">第二步 恢复</h2>
<p>恢复，简单想一下就是将备份的数据执行命令，一条一条的插入就可以，然而，你这么想你就是小孩子了。原因自己体会。在这说说我做的过程。</p>
<p>首先将所有的数据分类，分为<code>敏感数据</code>和<code>非敏感数据</code>，对于非敏感的数据我们直接将其存储为明文，对于非敏感的数据，我们需要在本地就行加密为密文，保存起来。然后通过读取敏感数据和非敏感数据，将其恢复即可。</p>
<p>在这就遇到了第一个坑。</p>
<p>如果使用 <code>cfn</code>, 创建两个 <code>cfn</code>, 一个用来存储敏感数据，一个用来存储非敏感数据，然后通过 <code>cfn</code> 来对所有的数据进行统一管控。想象是美好的。当我将所有的数据都分好类，建好 cfn 模版，将一个一个的数据填上去，准备修改数据类型为 <code>SecurityString</code>的时候发现，文档上大大的写着，<code>SecurityString</code> 不支持 cfn ！<code>SecurityString</code> 不支持 cfn ！<code>SecurityString</code> 不支持 cfn ！</p>
<p>想象是美好的，现实是骨感的。</p>
<p>既然不支持 cfn，那么只能想其他办法了；要么用支持的语言包，要么用 CLI, 貌似已经没有其他办法 as code 了。</p>
<h3 id="语言包">语言包</h3>
<p>因为做数据备份的项目是一个 DevOps 项目，所有的基础设施都是在这个项目中声明的，所以要使用 AWS 的 Java, Python 扩展包有点重，不合适。那么就剩下 CLI 这条路了。</p>
<h3 id="cli">CLI</h3>
<p>在写代码之前，我先将数据重新整理成了 <code>yaml</code> 格式，毕竟比 <code>JSON</code> 好用（可以写注释）。格式大致如下</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">parameter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">appName</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">customKey</span><span class="p">:</span><span class="w"> </span><span class="l">customKey</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">value</span></span></span></code></pre></div></div>
<p>作为恢复更新脚本，肯定是在 pipeline 运行的时候执行的，所以第一想法就是使用 <code>shell</code>; 想到就直撸起袖子直接干呗。写啊写，虽然网上也有写好的 <code>shell</code> 来处理 <code>yaml</code>, 将读取结果 <code>export</code> 到环境变量中，比如 <code>parameter_appName__customKey</code>，但是问题是，那么多 <code>parameter store</code>, 我怎么一个一个的找到对应的数据的键和值呢？</p>
<p>此路不通，那么立马换方案，使用 <code>grep</code>, <code>awk</code>,<code>Regex</code>进行匹配转换，终于所有的数据 (key， value) 对应上了，大致数据结构如下 <code>parameter_appName__customKey=123</code>; 然后就是对数据（key, value）进行循环处理了呗。</p>
<p>请注意，处理后的数据里有这么一种数据结构： <code>parameter_app__key=test 1231</code>; 当循环 value 到 <code>test 1231</code> 的时候，<code>shell</code> <code>list</code> 是以空格为分隔符的； 那么，就会造成 key 和 value 的长度不一致的问题，那么你的数据最终也会是错的。这个问题基本无解。所以此路又不通了。</p>
<p>考虑再三， <code>Python</code> 解析 <code>YAML</code> 需要安装第三方库，很不方便，但解析 <code>JSON</code> 很方便。在同事的帮助下，测试了 <code>pipeline</code> 是支持 <code>python</code> 的，又因为如果使用 <code>AWS</code> 的 Python 扩展包，需要额外安装依赖，所以直接考虑 <code>Python</code> 调用 <code>Shell</code>;</p>
<h4 id="py-玩-shell">Py 玩 Shell</h4>
<p>综合以上因素，将 <code>YAML</code>格式的数据转换为 <code>JSON</code>, 由 <code>Python</code> 解析 <code>JSON</code>, 然后循环数据，循环过程中使用 <code>subprocess</code> 调用 <code>shell</code>, 在 <code>shell</code>中调用 AWS CLI 命令即可将数据更新上去或者执行解密操作等。 调用示例代码如下；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">subprocess</span><span class="o">.</span></span></span></code></pre></div></div>
<p>在这需要重点说明一下的是，如果 <code>subprocess</code>调用的 <code>shell</code>是执行 <code>docker</code>命令，那么一定要在你要执行 <code>subprocess.run(['docker-compose', 'run', '-T', '-rm', 'shush', value])</code>这类命令前确保你已经拉取了 <code>shush</code> 涉及的镜像， 否则你第一次运行的输出结果里会有拉取镜像的日志。解决办法是在脚本真正运行之前获取镜像，可以使用如下密令</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-Shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell"><span class="line"><span class="cl">docker-compose pull shush</span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<ul>
<li>对于外部调用的 <code>Shell</code> 一定要写 <code>Usage</code>，也就是用户调用你的脚本的时候，如果出错，因该显示 <code>help</code> 信息</li>
<li>不要给可执行的脚本加 <code>.sh</code> ，<code>.py </code> 等后缀，只需要给其可执行权限即可</li>
<li><code>cfn</code> 不支持 <code>SecurityString</code></li>
<li><code>shush</code> 是个好工具，有 <code>Docker</code> 镜像，只要你的机器上有 <code>Docker</code>, 你就可以不用通过命令行安装它， 执行 <code>docker</code> 命令即可拿到结果；但需要注意的是：执行某个命令之前，需要先将镜像拉下来，不然第一次计算的结果中会有拉取镜像的日志。</li>
</ul>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客：https://guzhongren.github.io/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
]]></description></item><item><title>调试 bash</title><link>https://guzhongren.github.io/2020/04/%E8%B0%83%E8%AF%95bash.zh/</link><pubDate>Mon, 06 Apr 2020 23:09:54 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/04/%E8%B0%83%E8%AF%95bash.zh/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>最近在做 DevOps 的工作，主要是做一个蓝绿部署的方案，在这部分中涉及到了写 shell， Shell 作为一种程序语言，那么对于开发人员肯定是要在部署到正式或者生产环境前进行调试的，在 coding 过程中，发现 shell 的调试其实和平时写的 JS, Java, Rust 等的调试不同，Shell 只能看你每一步执行的语句，至于具体执行是否正确，得由 coding 的人来写正确；好吧，有点难理解，那么我来举个🌰；</p>
<h2 id="举例">举例</h2>
<p>有如下代码</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -eu
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">readonly</span> <span class="nv">FIRST_VALUE</span><span class="o">=</span><span class="s2">&#34;first value&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;你会得到替换后的值：</span><span class="si">${</span><span class="nv">FIRST_VALUE</span><span class="si">}</span></span></span></code></pre></div></div>
<p>脚本很简单，简单一句话，定义了一个变量<code>FIRST_VALUE</code>， 然后用<code>echo</code>输出，在输出的时候应用了刚才定义的变量<code>FIRST_VALUE</code>，赋予执行权限后，如果执行<code>./run.sh</code>之后，只会在终端输出</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">你会得到替换后的值：first value</span></span></code></pre></div></div>
<p>但是在简单的脚本中还可以直接运行，如果运行一个复杂的脚本，那么出问题了的几率击溃比较高了，那么调试脚本积极非常重要了。</p>
<h2 id="debug">debug</h2>
<p>shell 的调试说来也非常简单，直接运行<code>sh -x ...</code>就可以了，对于本脚本我们执行如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sh -x run.sh</span></span></code></pre></div></div>
<p>会得到输出，如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">+ <span class="nb">set</span> -eu
</span></span><span class="line"><span class="cl">+ <span class="nb">readonly</span> <span class="s1">&#39;FIRST_VALUE=first value&#39;</span>
</span></span><span class="line"><span class="cl">+ <span class="nv">FIRST_VALUE</span><span class="o">=</span><span class="s1">&#39;first value&#39;</span>
</span></span><span class="line"><span class="cl">+ <span class="nb">echo</span> <span class="s1">&#39;你会得到替换后的值：first value&#39;</span>
</span></span><span class="line"><span class="cl">你会得到替换后的值：first value</span></span></code></pre></div></div>
<p>在这里面，你会看到每条 shell 脚本运行的具体命令，以及参数等内容，这条命令也是一种执行，会对命令涉及的内容产生实际效果，不要以为知识<code>dry run</code>。</p>
<h2 id="总结">总结</h2>
<blockquote>
<p>好习惯都是踩坑踩出来的</p>
</blockquote>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">1. 博客：https://guzhongren.github.io/</a></li>
<li><a href="https://sm.ms/" target="_blank" rel="noopener noreffer ">2. 图床：https://sm.ms/</a></li>
<li><a href="https://mp.weixin.qq.com/s/VmM_U4RefRBHwIw8NegC8Q" target="_blank" rel="noopener noreffer ">3. 编写可靠 bash 脚本的一些技巧：https://mp.weixin.qq.com/s/VmM_U4RefRBHwIw8NegC8Q</a></li>
<li></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
]]></description></item><item><title>Go Module 安装不了 golang.org 时的处理方式记录</title><link>https://guzhongren.github.io/2018/11/go-module-%E5%AE%89%E8%A3%85%E4%B8%8D%E4%BA%86golang.org%E6%97%B6%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95.zh/</link><pubDate>Thu, 01 Nov 2018 21:46:40 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2018/11/go-module-%E5%AE%89%E8%A3%85%E4%B8%8D%E4%BA%86golang.org%E6%97%B6%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95.zh/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.pexels.com/photos/3467149/pexels-photo-3467149.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=3&amp;h=750&amp;w=1260" referrerpolicy="no-referrer">
            </div><div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">go: golang.org/x/sys@v0.0.0-20180905080454-ebe1bf3edb33: unrecognized import path <span class="s2">&#34;golang.orgnrecognized import path &#34;</span>golang.org/x/sys<span class="s2">&#34; (https fetch: G1: dial tcp 216.239.37.1:443: conneet https://golang.org/x/sys?go-get=1: dial tcp 216.239.37.rty did not properly respond after1:443: connectex: A connection attempt failed because the  connected host has failed to respoconnected party did not properly respond after a period of time, or established connection failed because connected : unrecognized import path &#34;</span>golang.host has failed to respond.<span class="o">)</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">go: golang.org/x/crypto@v0.0.0-20180904163835-0709b304e793nected party did not properly respo: unrecognized import path <span class="s2">&#34;golang.org/x/crypto&#34;</span> <span class="o">(</span>https fed because connected host has failedtch: Get https://golang.org/x/crypto?go-get<span class="o">=</span>1: dial tcp 216.239.37.1:443: connectex: A connection attempt failed because the connected party did not properly respond after a
</span></span><span class="line"><span class="cl">period of time, or established connection failed because connected host has failed to respond.<span class="o">)</span>
</span></span><span class="line"><span class="cl">go: error loading module requirements</span></span></code></pre></div></div>
<h2 id="如上不能安装-sys-和-crypto-这两个库用如下方式即可">如上，不能安装 sys 和 crypto 这两个库，用如下方式即可</h2>
<p>1 手动加入被墙的包（原始包），一定要记住版本号，实在不知道的话，就试试 v0.0.0；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go mod edit -require<span class="o">=</span>golang.org/x/net@v0.0.0</span></span></code></pre></div></div>
<p>2 用 github 上的镜像地址替换</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go mod edit -replace<span class="o">=</span>golang.org/x/crypto@v0.0.0<span class="o">=</span>github.com/golang/crypto@latest
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ go mod edit -replace<span class="o">=</span>golang.org/x/sys@v0.0.0<span class="o">=</span>github.com/golang/sys@latest</span></span></code></pre></div></div>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">1. 博客：https://guzhongren.github.io/</a></li>
<li><a href="https://sm.ms/" target="_blank" rel="noopener noreffer ">2. 图床：https://sm.ms/</a></li>
<li><a href="https://yq.aliyun.com/articles/663151?spm=a2c4e.11155435.0.0.3c783312bi9tbU" target="_blank" rel="noopener noreffer ">3. 原文：https://yq.aliyun.com/articles/663151?spm=a2c4e.11155435.0.0.3c783312bi9tbU</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
]]></description></item><item><title>Go Module 安装不了 golang.org 时的处理方式记录</title><link>https://guzhongren.github.io/2018/11/go-module-%E5%AE%89%E8%A3%85%E4%B8%8D%E4%BA%86golang.org%E6%97%B6%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95.zh/</link><pubDate>Thu, 01 Nov 2018 21:46:40 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2018/11/go-module-%E5%AE%89%E8%A3%85%E4%B8%8D%E4%BA%86golang.org%E6%97%B6%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95.zh/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.pexels.com/photos/3467149/pexels-photo-3467149.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=3&amp;h=750&amp;w=1260" referrerpolicy="no-referrer">
            </div><div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">go: golang.org/x/sys@v0.0.0-20180905080454-ebe1bf3edb33: unrecognized import path <span class="s2">&#34;golang.orgnrecognized import path &#34;</span>golang.org/x/sys<span class="s2">&#34; (https fetch: G1: dial tcp 216.239.37.1:443: conneet https://golang.org/x/sys?go-get=1: dial tcp 216.239.37.rty did not properly respond after1:443: connectex: A connection attempt failed because the  connected host has failed to respoconnected party did not properly respond after a period of time, or established connection failed because connected : unrecognized import path &#34;</span>golang.host has failed to respond.<span class="o">)</span>
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">go: golang.org/x/crypto@v0.0.0-20180904163835-0709b304e793nected party did not properly respo: unrecognized import path <span class="s2">&#34;golang.org/x/crypto&#34;</span> <span class="o">(</span>https fed because connected host has failedtch: Get https://golang.org/x/crypto?go-get<span class="o">=</span>1: dial tcp 216.239.37.1:443: connectex: A connection attempt failed because the connected party did not properly respond after a
</span></span><span class="line"><span class="cl">period of time, or established connection failed because connected host has failed to respond.<span class="o">)</span>
</span></span><span class="line"><span class="cl">go: error loading module requirements</span></span></code></pre></div></div>
<h2 id="如上不能安装-sys-和-crypto-这两个库用如下方式即可">如上，不能安装 sys 和 crypto 这两个库，用如下方式即可</h2>
<p>1 手动加入被墙的包（原始包），一定要记住版本号，实在不知道的话，就试试 v0.0.0；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go mod edit -require<span class="o">=</span>golang.org/x/net@v0.0.0</span></span></code></pre></div></div>
<p>2 用 github 上的镜像地址替换</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go mod edit -replace<span class="o">=</span>golang.org/x/crypto@v0.0.0<span class="o">=</span>github.com/golang/crypto@latest
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ go mod edit -replace<span class="o">=</span>golang.org/x/sys@v0.0.0<span class="o">=</span>github.com/golang/sys@latest</span></span></code></pre></div></div>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">1. 博客：https://guzhongren.github.io/</a></li>
<li><a href="https://sm.ms/" target="_blank" rel="noopener noreffer ">2. 图床：https://sm.ms/</a></li>
<li><a href="https://yq.aliyun.com/articles/663151?spm=a2c4e.11155435.0.0.3c783312bi9tbU" target="_blank" rel="noopener noreffer ">3. 原文：https://yq.aliyun.com/articles/663151?spm=a2c4e.11155435.0.0.3c783312bi9tbU</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
]]></description></item></channel></rss>