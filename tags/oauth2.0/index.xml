<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>OAuth2.0 - 标签 - 谷中仁的博客</title><link>https://guzhongren.github.io/tags/oauth2.0/</link><description>OAuth2.0 - 标签 - 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>guzhongren@live.cn (谷中仁)</managingEditor><webMaster>guzhongren@live.cn (谷中仁)</webMaster><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 03 Jun 2023 10:31:28 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/tags/oauth2.0/" rel="self" type="application/rss+xml"/><item><title>OAuth2.0和OIDC流程梳理</title><link>https://guzhongren.github.io/2023/06/oauth2.0%E5%92%8Coidc%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86/</link><pubDate>Sat, 03 Jun 2023 10:31:28 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/06/oauth2.0%E5%92%8Coidc%E6%B5%81%E7%A8%8B%E6%A2%B3%E7%90%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="场景">场景</h2>
<p>在日常生活中，有许多使用OAuth 2.0或OIDC的案例。例如，小明使用团建费用在京东商城购买了许多零食，他希望使用第三方软件开发票来报销这部分费用。以下是小明、小票软件和京东商家开放平台之间的对话流程：</p>
<p>小明：“你好，小票软件。我在Google浏览器上需要访问你来处理我在京东商城店铺的订单信息，以生成发票。”</p>
<p>小票软件：“好的，小明，我需要你授权。现在我将引导你前往京东商家开放平台，在那里你可以给我授权。”</p>
<p>京东商家开放平台：“你好，小明。我收到了小票软件的跳转请求，已准备好一个授权页面。请登录并确认后，点击授权按钮即可。”</p>
<p>小明：“好的，京东商家开放平台。我已看到授权页面，并点击了授权按钮。”</p>
<p>京东商家开放平台：“你好，小票软件。我已收到小明的授权请求，现在将为你生成授权码（code）。我会通过浏览器重定向到你的回调URL地址。”</p>
<p>小票软件：“好的，京东商家开放平台。我已从浏览器中获取到授权码，现在将使用该授权码向你请求访问令牌（access_token）。请提供访问令牌给我。”</p>
<p>京东商家开放平台：“好的，小票软件，访问令牌已发送给你。”</p>
<p>小票软件：“太好了，现在我可以使用访问令牌来获取小明店铺的订单信息，并生成发票。”</p>
<p>小明：“我已能够看到我的订单，现在可以开始打印发票了。</p>
<p>在以下的流程中，大家可以使用如<strong>极客时间</strong>使用<strong>微信</strong>登录的流程，或者某业务系统使用<strong>Keycloak</strong>登录的方式来理解整个技术流转过程。</p>
<h2 id="oauth20">OAuth2.0</h2>
<h3 id="4-种授权许可类型">4 种授权许可类型</h3>
<p>OAuth2.0 有4种授权许可类型，分别是<strong>授权码许可(Authorization Code)</strong>， <strong>资源拥有者凭据许可(Resource Owner Password Credential)</strong>, <strong>客户端凭据许可(Client Credential)<strong>和</strong>隐式许可（Implicit）</strong>。</p>
<p>以下是一些进行对应类型的发送请求的伪代码</p>
<h4 id="授权码许可authorization-code">授权码许可(Authorization Code)</h4>
<p>授权码许可是OAuth 2.0中最常用的许可类型。它的流程如下：</p>
<p>小票软件将用户重定向到京东商家开放平台的授权页面。
用户在授权页面登录并点击授权按钮。
京东商家开放平台生成一个授权码，并通过重定向将用户带回小票软件指定的回调URL。
小票软件从回调URL中获取授权码。
小票软件使用授权码向京东商家开放平台请求访问令牌。
京东商家开放平台验证授权码并颁发访问令牌给小票软件。
小票软件使用访问令牌来获取小明店铺的订单信息，并生成发票。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">String</span><span class="w"> </span><span class="n">grantType</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">request</span><span class="p">.</span><span class="na">getParameter</span><span class="p">(</span><span class="s">&#34;grant_type&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">if</span><span class="p">(</span><span class="s">&#34;authorization_code&#34;</span><span class="p">.</span><span class="na">equals</span><span class="p">(</span><span class="n">grantType</span><span class="p">)){</span><span class="w">  </span><span class="p">}</span></span></span></code></pre></div></div>
<h4 id="资源拥有者凭据许可resource-owner-password-credential">资源拥有者凭据许可(Resource Owner Password Credential)</h4>
<p>资源拥有者凭据许可是一种直接使用用户名和密码进行认证的许可类型。该许可类型要求客户端直接获取用户的凭据，并使用这些凭据向授权服务器进行身份验证。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">params</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="s">&#34;grant_type&#34;</span><span class="p">,</span><span class="s">&#34;password&#34;</span><span class="p">);</span></span></span></code></pre></div></div>
<h4 id="客户端凭据许可client-credential">客户端凭据许可(Client Credential)</h4>
<p>客户端凭据许可适用于没有资源拥有者参与的情况下，客户端直接与授权服务器进行身份验证并获取访问令牌。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">params</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="s">&#34;grant_type&#34;</span><span class="p">,</span><span class="s">&#34;client_credentials&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">params</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="s">&#34;app_id&#34;</span><span class="p">,</span><span class="s">&#34;APPIDTEST&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">params</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="s">&#34;app_secret&#34;</span><span class="p">,</span><span class="s">&#34;APPSECRETTEST&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">String</span><span class="w"> </span><span class="n">accessToken</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HttpURLClient</span><span class="p">.</span><span class="na">doPost</span><span class="p">(</span><span class="n">oauthURl</span><span class="p">,</span><span class="n">HttpURLClient</span><span class="p">.</span><span class="na">mapToStr</span><span class="p">(</span><span class="n">params</span><span class="p">));</span><span class="err">”</span></span></span></code></pre></div></div>
<h4 id="隐式许可implicit">隐式许可（Implicit)</h4>
<p>隐式许可是一种在浏览器中直接向授权服务器请求访问令牌的许可类型。这种许可类型通常用于单页应用程序或移动应用程序，因为它们无法安全地保持客户端凭据。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="o">&gt;</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span><span class="w"> </span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">params</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="s">&#34;response_type&#34;</span><span class="p">,</span><span class="s">&#34;token&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">params</span><span class="p">.</span><span class="na">put</span><span class="p">(</span><span class="s">&#34;app_id&#34;</span><span class="p">,</span><span class="s">&#34;APPIDTEST&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">String</span><span class="w"> </span><span class="n">toOauthUrl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">URLParamsUtil</span><span class="p">.</span><span class="na">appendParams</span><span class="p">(</span><span class="n">oauthUrl</span><span class="p">,</span><span class="n">params</span><span class="p">);</span></span></span></code></pre></div></div>
<h3 id="authorization-code-的实现分类">Authorization Code 的实现分类</h3>
<p>Authorization Code的实现主要分为两类：无服务器实现（使用PKCE）和有服务器实现。</p>
<p>无服务器实现使用PKCE（Proof Key for Code Exchange by OAuth Public Clients）来增加安全性，但应用较少。</p>
<p>有服务器实现广泛使用且更安全。</p>
<h3 id="authorization-code-实现的流程图">Authorization Code 实现的流程图</h3>
<p></p>
<h2 id="oidc">OIDC</h2>
<p>OAuth2.0 是一种授权协议，而不是身份认证协议。OIDC 才是身份认证协议，而且是基于 OAuth 2.0 来执行用户身份认证的互通协议。更概括地说，OIDC 就是直接基于 OAuth 2.0 构建的身份认证框架协议。</p>
<h3 id="其3个角色与oauth20的4个角色的对应关系">其3个角色与OAuth2.0的4个角色的对应关系</h3>
<p>以下是OIDC 种的三个角色：</p>
<ul>
<li>EU（End User），代表最终用户</li>
<li>RP（Relying Party），代表认证服务的依赖方，就是上面我提到的第三方软件</li>
<li>OP（OpenID Provider），代表提供身份认证服务方</li>
</ul>
<p>OAuth 2.0 的 4 个角色和 OIDC 的 3 个角色之间的对应关系</p>
<ul>
<li>资源拥有者 -&gt; EU</li>
<li>第三方软件-&gt; RP</li>
<li>授权服务 + 受保护资源-&gt; OP</li>
</ul>
<h3 id="oidc-种的id_token">OIDC 种的ID_TOKEN</h3>
<p>OIDC 种有一个非常重要，从认证服务器下发的一个字段，就是OIDC, 其存储了一些非常有用的信息</p>
<ul>
<li>iss，令牌的颁发者，其值就是身份认证服务（OP）的 URL</li>
<li>sub，令牌的主题，其值是一个能够代表最终用户（EU）的全局唯一标识符</li>
<li>aud，令牌的目标受众，其值是三方软件（RP）的 app_id</li>
<li>exp，令牌的到期时间戳，所有的 ID 令牌都会有一个过期时间</li>
<li>iat，颁发令牌的时间戳</li>
</ul>
<h3 id="oidc-的流程图">OIDC 的流程图</h3>
<p></p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow" target="_blank" rel="noopener noreffer ">Authorization Code Flow - Auth0: https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow</a></li>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
<li><a href="https://mp.weixin.qq.com/s/4A6_n-5n10Vax67EbBMSCA" target="_blank" rel="noopener noreffer ">SSO 单点登录和 OAuth2.0 的区别和理解:https://mp.weixin.qq.com/s/4A6_n-5n10Vax67EbBMSCA</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item></channel></rss>