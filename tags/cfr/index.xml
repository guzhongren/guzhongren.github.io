<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>CFR - 标签 - 谷中仁的博客</title><link>https://guzhongren.github.io/tags/cfr/</link><description>CFR - 标签 - 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>guzhongren@live.cn (谷中仁)</managingEditor><webMaster>guzhongren@live.cn (谷中仁)</webMaster><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 28 Apr 2025 08:40:12 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/tags/cfr/" rel="self" type="application/rss+xml"/><item><title>软件开发中的跨功能性需求（RFC）</title><link>https://guzhongren.github.io/2025/04/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E8%B7%A8%E5%8A%9F%E8%83%BD%E6%80%A7%E9%9C%80%E6%B1%82rfc/</link><pubDate>Mon, 28 Apr 2025 08:40:12 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/04/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E8%B7%A8%E5%8A%9F%E8%83%BD%E6%80%A7%E9%9C%80%E6%B1%82rfc/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="引言">引言</h2>
<p>作为程序员的你，正在开发一款基于全球地图的某资源分布网站，你的产品会被各个国家的人使用，而每个国家都有不同的法律法规和文化习惯。你需要考虑到这些因素，以确保你的产品在全球范围内都能正常使用。比如有争议的边界不能让用户看到对自己国家不利的标记，那么你需要怎么做呢？这时候，你就需要考虑跨功能性需求了。</p>
<h3 id="什么是跨功能性需求">什么是跨功能性需求</h3>
<p>跨功能性需求（Cross-Functional Requirements, CFRs）是指那些不直接与特定功能相关，但对整个系统的质量、性能和用户体验有重要影响的需求。例如，性能、安全性和可扩展性等。这些需求通常被称为“非功能性需求”，但它们对系统的成功至关重要。</p>
<h3 id="其在软件开发中的重要性">其在软件开发中的重要性</h3>
<p>跨功能性需求贯穿于软件开发的各个阶段，直接影响系统的稳定性、用户满意度和长期维护成本。例如，在一个实时通信应用中，低延迟（性能需求）和数据加密（安全性需求）是用户体验的核心。如果忽视这些需求，可能导致系统在高负载或恶意攻击下崩溃，甚至无法满足用户的基本期望。</p>
<h2 id="跨功能性需求详细讨论">跨功能性需求详细讨论</h2>
<table>
  <thead>
      <tr>
          <th>需求类别</th>
          <th>具体问题</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>可扩展性（Extensibility）</strong></td>
          <td>是否需要组件化？是否需要提供一个插件功能，由谁来实施？</td>
      </tr>
      <tr>
          <td><strong>可移植性（Portability）</strong></td>
          <td>是否有迁移到另一个数据库产品或操作系统的必要性？</td>
      </tr>
      <tr>
          <td><strong>可安装性和可部署性（Installability &amp; Deployment）</strong></td>
          <td>需要提供什么样的基础设施？需要什么样的安装便利性？是否支持持续交付？如何回滚或升级版本？</td>
      </tr>
      <tr>
          <td><strong>兼容性（Compatibility）</strong></td>
          <td>需要与哪些其他系统集成？需要遵循哪些行业标准？是否需要考虑现有数据格式？</td>
      </tr>
      <tr>
          <td><strong>可集成性和互操作性（Integratability &amp; Interoperability）</strong></td>
          <td>是否需要提供 API 或库供其他系统使用？版本管理和升级策略是什么？</td>
      </tr>
      <tr>
          <td><strong>可复用性（Leveragability &amp; Reuse）</strong></td>
          <td>是否能够复用企业现有组件/库，或者当前组件/库是否将被重用？</td>
      </tr>
      <tr>
          <td><strong>可伸缩性（Scalability）</strong></td>
          <td>如何根据不断变化的用户量来提高吞吐量？如何对此进行测试？</td>
      </tr>
      <tr>
          <td><strong>版本化和升级策略（Versioning and upgrades）</strong></td>
          <td>版本化策略是什么？如何跟踪内部/外部的版本？有没有向后兼容的限制？</td>
      </tr>
      <tr>
          <td><strong>可访问性（Accessibility）</strong></td>
          <td>是否支持有特殊需要的用户（如读屏）？</td>
      </tr>
      <tr>
          <td><strong>本地化和国际化（Localisation &amp; Internationalisation）</strong></td>
          <td>是否支持多语言？日期/时间/货币的转换和翻译？</td>
      </tr>
      <tr>
          <td><strong>可用性和用户体验（Usability and user experience）</strong></td>
          <td>用户体验对系统有多重要？是否有公司用户体验准则？是否支持多设备？</td>
      </tr>
      <tr>
          <td><strong>分布性（Distributability）</strong></td>
          <td>系统是否能在特定区域使用？是否支持离线运行？如何同步信息？</td>
      </tr>
      <tr>
          <td><strong>帮助与支持（Help &amp; Support）</strong></td>
          <td>是否需要用户文档、教程或支持团队？是否需要计划培训？</td>
      </tr>
      <tr>
          <td><strong>可配置性（Configurability）</strong></td>
          <td>用户或管理员是否可以配置功能？如何进行配置管理？</td>
      </tr>
      <tr>
          <td><strong>支持性（Supportability）</strong></td>
          <td>用户/操作支持的级别是什么？如何提供支持？</td>
      </tr>
      <tr>
          <td><strong>归档（Archiving）</strong></td>
          <td>归档什么信息？何时归档？如何归档？谁可以访问归档信息？</td>
      </tr>
      <tr>
          <td><strong>可用性（Availability）</strong></td>
          <td>是否有可用性目标？需要什么架构来满足这些要求？是否有高峰负载需求？</td>
      </tr>
      <tr>
          <td><strong>容量（Capacity）</strong></td>
          <td>是否有存储要求？高峰负载如何处理？系统需要处理的数据量和用户数量？</td>
      </tr>
      <tr>
          <td><strong>连续性（Continuity）</strong></td>
          <td>是否有灾难恢复计划？</td>
      </tr>
      <tr>
          <td><strong>数据完整性和一致性（Data Integrity and Consistency）</strong></td>
          <td>是否需要数据校验、日志追踪或数据恢复机制？</td>
      </tr>
      <tr>
          <td><strong>可维护性（Maintainability）</strong></td>
          <td>最大可容忍停机时间是什么？是否有停机通知要求？错误页面如何处理？</td>
      </tr>
      <tr>
          <td><strong>监控（Monitoring）</strong></td>
          <td>应该衡量哪些业务/技术指标？如何监测？需要哪些警报？</td>
      </tr>
      <tr>
          <td><strong>多环境支持（Multiple Environment Support）</strong></td>
          <td>需要多少环境？如何配置和管理这些环境？</td>
      </tr>
      <tr>
          <td><strong>性能（Performance）</strong></td>
          <td>吞吐量/响应时间要求是什么？是否需要性能测试？是否需要考虑异步场景？</td>
      </tr>
      <tr>
          <td><strong>弹性和容错性（Resilience &amp; Fault Tolerance）</strong></td>
          <td>如果外部依赖失效，系统如何降级？</td>
      </tr>
      <tr>
          <td><strong>可靠性（Reliability）</strong></td>
          <td>不可靠的成本是什么？需要多少成本来保证可靠？</td>
      </tr>
      <tr>
          <td><strong>可审计性（Auditability）</strong></td>
          <td>哪些操作需要被跟踪？是否有法律或监管要求？</td>
      </tr>
      <tr>
          <td><strong>认证（Authentication）</strong></td>
          <td>如何鉴别用户身份？是否遵循标准或使用现有认证系统？</td>
      </tr>
      <tr>
          <td><strong>授权（Authorisation）</strong></td>
          <td>哪些角色和权限是必要的？如何维护和应用权限？</td>
      </tr>
      <tr>
          <td><strong>法律合规性（Legal Compliance）</strong></td>
          <td>是否有数据/系统或软件交付过程的法律限制？</td>
      </tr>
      <tr>
          <td><strong>数据隐私（Data Privacy）</strong></td>
          <td>哪些数据需要加密？哪些数据对用户和操作人员可见/隐藏？如何处理脱敏？</td>
      </tr>
      <tr>
          <td><strong>安全性（Security）</strong></td>
          <td>是否需要安全审计或渗透测试？企业的安全准则是什么？是否有 SSL 或 VPN 要求？</td>
      </tr>
  </tbody>
</table>
<h2 id="跨功能性需求的挑战">跨功能性需求的挑战</h2>
<h3 id="难以量化和验证">难以量化和验证</h3>
<p>跨功能性需求的定义通常较为模糊。例如：</p>
<ul>
<li>性能需求可能以“系统应快速响应”描述，但“快速”缺乏具体标准。</li>
<li>安全性需求可能以“系统应安全”描述，但安全的程度难以量化。</li>
</ul>
<h4 id="解决方法">解决方法</h4>
<ul>
<li>使用具体的指标定义需求，例如“响应时间小于 200 毫秒”。</li>
<li>借助工具（如 JMeter）进行性能测试，或使用安全扫描工具（如 OWASP ZAP）验证安全性。</li>
</ul>
<h3 id="与功能性需求的冲突">与功能性需求的冲突</h3>
<p>跨功能性需求可能与功能性需求发生冲突。例如：</p>
<ul>
<li>为了提高性能，可能需要简化某些功能。</li>
<li>为了增强安全性，可能会增加用户操作的复杂性。</li>
</ul>
<h4 id="实例权衡性能与安全性">实例：权衡性能与安全性</h4>
<p>某在线支付系统在设计时，为了提高性能，采用了分布式架构；但为了保证安全性，又引入了多层加密和双因子认证。</p>
<h2 id="如何发现跨功能性需求">如何发现跨功能性需求</h2>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Software-Engineering/CFR/crf.1e8tg7u4l3.webp" alt="CFR" /></p>
<p>跨功能需求影响着软件的整个生命周期，在项目交付过程中，可以根据软件产品的目标和特点，从以下几个视角来收集和确定跨功能需求：</p>
<ul>
<li><strong>研发团队视角</strong>，关注软件研发过程中的跨功能特性，包括软件架构设计相关的一些特性，如可扩展性、可移植性、可伸缩性、兼容性等。</li>
<li><strong>用户视角</strong>，关注软件使用过程中的跨功能特性，关注用户体验，如设备兼容性、可访问性、可配置性等。</li>
<li><strong>运维团队视角</strong>，关注软件维护过程中的跨功能特性，包括基础设施运营维护、数据维护、故障恢复相关的一些特性，如性能、可用性、容量、监控、熔断降级策略等。</li>
<li><strong>安全审计团队视角</strong>，关注软件全生命周期的安全相关的跨功能特性，大部分企业有专门的安全审计部门，会对软件产品的安全提出很多需求，如可审计性，法律合规性，数据隐私性。</li>
</ul>
<h2 id="解决方案与实践">解决方案与实践</h2>
<h3 id="需求优先级的设定">需求优先级的设定</h3>
<p>通过与利益相关者协商，明确跨功能性需求的优先级。例如：</p>
<ul>
<li>使用 MoSCoW 方法（Must, Should, Could, Won&rsquo;t）分类需求。</li>
<li>在项目初期定义关键性能指标（KPIs）和安全目标。</li>
</ul>
<h4 id="实例敏捷开发中的需求优先级">实例：敏捷开发中的需求优先级</h4>
<p>某团队在敏捷开发中，每个迭代周期都会评估跨功能性需求的优先级，并在冲刺计划中分配资源。</p>
<h3 id="跨团队协作的重要性">跨团队协作的重要性</h3>
<p>跨功能性需求通常涉及多个团队的协作。例如：</p>
<ul>
<li>开发团队需要与运维团队合作，确保系统的可扩展性。</li>
<li>安全团队需要与开发团队合作，进行代码审查和漏洞修复。</li>
</ul>
<h4 id="实例devsecops-实践">实例：DevSecOps 实践</h4>
<p>某企业通过 DevSecOps 实践，将安全性集成到开发和运维流程中，确保跨功能性需求在整个生命周期内得到满足。</p>
<h2 id="案例分析">案例分析</h2>
<h3 id="实际项目中的跨功能性需求处理">实际项目中的跨功能性需求处理</h3>
<p>在某大型电商平台的开发中，性能和安全性是两个关键的跨功能性需求。通过以下措施，成功满足了这些需求：</p>
<ol>
<li>
<p><strong>性能优化</strong>：</p>
<ul>
<li>使用 Redis 缓存机制减少数据库查询。</li>
<li>部署 Nginx 负载均衡器分发流量。</li>
</ul>
</li>
<li>
<p><strong>安全性增强</strong>：</p>
<ul>
<li>引入 Web 应用防火墙（WAF）防止常见攻击（如 SQL 注入）。</li>
<li>定期进行渗透测试，发现并修复漏洞。</li>
</ul>
</li>
</ol>
<blockquote>
<p>来源：<a href="https://redis.io/documentation">Redis 官方文档</a><sup>[1]</sup>

来源：<a href="https://nginx.org/en/docs/">Nginx 官方文档</a><sup>[2]</sup>
</p>
</blockquote>
<h3 id="性能">性能</h3>
<p>性能需求通常包括以下几个方面：</p>
<ol>
<li><strong>响应时间</strong>：用户操作后系统的响应速度。例如，搜索引擎的响应时间通常需要在几百毫秒内完成。</li>
<li><strong>吞吐量</strong>：系统在单位时间内能够处理的请求数量。例如，支付网关需要支持每秒数千笔交易。</li>
<li><strong>资源利用率</strong>：系统在运行时对 CPU、内存和网络等资源的使用效率。</li>
</ol>
<h4 id="实例高性能电商平台">实例：高性能电商平台</h4>
<p>某电商平台在促销活动期间，通过以下措施优化性能：</p>
<ul>
<li>使用 Redis 缓存热门商品数据，减少数据库查询压力。</li>
<li>部署 CDN（内容分发网络）加速静态资源加载。</li>
</ul>
<blockquote>
<p>来源：<a href="https://redis.io/documentation">Redis 官方文档</a><sup>[1]</sup>
</p>
</blockquote>
<h3 id="可扩展性">可扩展性</h3>
<p>可扩展性需求确保系统能够随着用户数量或数据量的增长而扩展。主要包括：</p>
<ol>
<li><strong>水平扩展</strong>：通过增加更多服务器来提升系统能力。</li>
<li><strong>垂直扩展</strong>：通过升级硬件资源（如 CPU 和内存）来提升性能。</li>
</ol>
<h4 id="实例分布式数据库">实例：分布式数据库</h4>
<p>某社交媒体平台采用分布式数据库（如 MongoDB）来存储用户数据，支持动态扩展以应对用户增长。</p>
<blockquote>
<p>来源：<a href="https://www.mongodb.com/docs/">MongoDB 官方文档</a><sup>[3]</sup>
</p>
</blockquote>
<h3 id="安全性">安全性</h3>
<p>安全性需求包括以下几个方面：</p>
<ol>
<li><strong>数据加密</strong>：保护敏感数据在传输和存储中的安全性。</li>
<li><strong>身份验证</strong>：确保只有授权用户能够访问系统。</li>
<li><strong>权限管理</strong>：限制用户对系统资源的访问范围。</li>
</ol>
<h4 id="实例oauth-20">实例：OAuth 2.0</h4>
<p>某金融应用通过 OAuth 2.0 实现第三方登录，同时保护用户的敏感信息。</p>
<blockquote>
<p>来源：<a href="https://oauth.net/2/">OAuth 2.0 规范</a><sup>[4]</sup>
</p>
</blockquote>
<h2 id="总结">总结</h2>
<p>回到开头的问题，如何处理全球地图资源分布网站的跨功能性需求？可以通过以下步骤：</p>
<ol>
<li><strong>需求收集</strong>：与各国法律法规专家沟通，了解不同国家的要求，比如使用不同国家官方支持的地图地址。</li>
<li><strong>需求优先级</strong>：使用 MoSCoW 方法确定哪些需求是必须的，哪些是可选的， 这里就是国界。</li>
<li><strong>跨团队协作</strong>：与开发、运维和安全团队密切合作，确保需求在设计和实现中得到满足, 最好实现配置即代码。</li>
<li><strong>测试与验证</strong>：在不同国家的环境中进行测试，确保系统符合各国的法律法规。</li>
</ol>
<p>当然还有一种最简单的方法，只提供卫星影像地图，不提供边界图层。</p>
<h3 id="关键点回顾与未来展望">关键点回顾与未来展望</h3>
<p>跨功能性需求是软件开发中不可忽视的一部分。通过合理的需求优先级设定和跨团队协作，可以有效应对这些挑战。未来，随着技术的进步，跨功能性需求的管理将更加智能化和自动化。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Redis 官方文档: <a href="https://redis.io/documentation" rel="noopener noreferrer">https://redis.io/documentation</a></li><li>Nginx 官方文档: <a href="https://nginx.org/en/docs/" rel="noopener noreferrer">https://nginx.org/en/docs/</a></li><li>MongoDB 官方文档: <a href="https://www.mongodb.com/docs/" rel="noopener noreferrer">https://www.mongodb.com/docs/</a></li><li>OAuth 2.0 规范: <a href="https://oauth.net/2/" rel="noopener noreferrer">https://oauth.net/2/</a></li></ol>
            </div>]]></description></item></channel></rss>