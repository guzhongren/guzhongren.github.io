<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Git - 标签 - 谷中仁的博客</title><link>https://guzhongren.github.io/tags/git/</link><description>Git - 标签 - 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>guzhongren@live.cn (谷中仁)</managingEditor><webMaster>guzhongren@live.cn (谷中仁)</webMaster><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 17 Aug 2024 07:53:16 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/tags/git/" rel="self" type="application/rss+xml"/><item><title>Git多 user 管理</title><link>https://guzhongren.github.io/2024/08/git%E5%A4%9Auser%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 17 Aug 2024 07:53:16 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2024/08/git%E5%A4%9Auser%E7%AE%A1%E7%90%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="痛点">痛点</h2>
<p>平时在一个电脑上会有不同的项目开发，尤其是个人项目和公司项目；</p>
<ul>
<li>通常，我们不希望工作在公司项目上的时候用自己个人的git 信息提交commit, 相反也是一样</li>
<li>在不同目录下，在命令行中切换git config 也是个重复劳动的工作，比较费精力</li>
</ul>
<h2 id="方案">方案</h2>
<h3 id="方案1不同的gitconfig配置">方案1：不同的gitconfig配置</h3>
<p>此方案的实现思路是，git 检测当前目录是否是已经配置的目录，如果是配置的目录，那么就加载对应的gitconfig</p>
<h4 id="步骤">步骤</h4>
<ul>
<li>更新<code>~/.gitconfig</code>, 按需追加并修复如下内容</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-git">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-git" data-lang="git">[includeIf &#34;gitdir:~/01.Project/&#34;]
  path = ~/.gitconfigs/.gitconfig-personal

[includeIf &#34;gitdir:~/04.company/&#34;]
  path = ~/.gitconfigs/.gitconfig-company</code></pre></div>
<ul>
<li>建立相应的目录和文件，如~/.gitconfigs/.gitconfig-personal</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">mkdir -p ~/.gitconfigs1 <span class="o">&amp;&amp;</span> touch ~/.gitconfigs1/.gitconfig-personal</span></span></code></pre></div></div>
<ul>
<li>配置个人信息</li>
</ul>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-git">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-git" data-lang="git">[user]
	email = personal@email.com
	name = personalName
	signingkey = signingkey
[commit]
	gpgsign = true
[init]
	defaultBranch = main
[tag]
	forceSignAnnotated = true
[pull]
	rebase = true
[gpg]
	program = gpg
[core]
	sshCommand = ssh -i ~/.ssh/id_github
	ignorecase = false</code></pre></div>
<p>如上内容根据自己的需求更改即可。</p>
<h3 id="方案2简化git-config-命令">方案2：简化git config 命令</h3>
<h4 id="思路">思路</h4>
<p>使用git alias 执行命令加载不同的配置</p>
<h4 id="步骤-1">步骤</h4>
<ul>
<li>在~/.gitconfig中追加如下配置，并按需更改即可</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-git">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-git" data-lang="git">
[alias]
  personal = &#34;!f() { git config user.name &#39;personalUserName&#39; &amp;&amp; git config user.email &#39;personal@email.com&#39; &amp;&amp; git config --global user.signingkey KEY; }; f&#34;
  company = &#34;!f() { git config user.name &#39;company&#39; &amp;&amp; git config user.email &#39;company@email.com&#39; &amp;&amp; git config --global user.signingkey KEY; }; f&#34;</code></pre></div>
<ul>
<li>使用时只需要执行一个git alias命令，如下</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git company</span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<p>99%的事物皆可自动化！</p>
<p>第一种方案自动化程度更高，更可取。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/wechat.ae9zxgscqcg.png" alt="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/20210819/wechat.ae9zxgscqcg.png" title="谷哥说-微信公众号" style="max-width: 100%; height: auto;"></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p><img
            class="lazyload"
            src="/svg/loading.min.svg"
            data-src="/images/pay/PayForGuzhongren.svg"
            data-srcset="/images/pay/PayForGuzhongren.svg, /images/pay/PayForGuzhongren.svg 1.5x, /images/pay/PayForGuzhongren.svg 2x"
            data-sizes="auto"
            alt="/images/pay/PayForGuzhongren.svg"
            title="PayForGuzhongren" /></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>基于 oak 的一次 TDD 实践</title><link>https://guzhongren.github.io/2020/07/%E5%9F%BA%E4%BA%8Eoak%E7%9A%84%E4%B8%80%E6%AC%A1tdd%E5%AE%9E%E8%B7%B5/</link><pubDate>Fri, 24 Jul 2020 22:21:11 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/07/%E5%9F%BA%E4%BA%8Eoak%E7%9A%84%E4%B8%80%E6%AC%A1tdd%E5%AE%9E%E8%B7%B5/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://wx2.sbimg.cn/2020/07/28/PpGwl.jpg" referrerpolicy="no-referrer">
            </div><h2 id="talking-is-cheap-show-me-code"><code>Talking is cheap! Show me code!</code></h2>
<blockquote>
<p><a href="https://github.com/guzhongren/deno-restful-api-with-postgresql-tdd" target="_blank" rel="noopener noreffer ">源码地址：<code>Deno Restful API With PostgreSql &amp; TDD</code></a></p>
</blockquote>
<h2 id="简介">简介</h2>
<p><code>Deno</code> 是<code>ry(Ryan Dahl)</code>的新项目，近期发布了其 <code>1.0.0</code> 版，在开发圈子里掀起了不小的风浪，与之创建的 Node 运行时有异曲同工之妙，<code>真香定律</code>又一次出现了。</p>
<p>在软件开发中，为了开发出可维护，高质量的程序，使用<code>TDD</code>开发可以有效提升项目质量和开发效率。</p>
<p>在这篇博客中，我将使用<code>Deno</code>, <code>Typescript</code>, <code>PostgreSql</code>来开发一个用户管理的 <code>API</code> 接口。</p>
<h2 id="deno--oak">Deno &amp; oak</h2>
<p>下面都是来自官网的介绍，写的很通俗易懂，就不用我来解读了。</p>
<h3 id="deno">Deno</h3>
<blockquote>
<p>Deno 是一个简单、现代且安全的 JavaScript 和 TypeScript 运行时环境，其基于 V8 引擎并采用 Rust 编程语言构建。</p>
<ul>
<li>默认安全设置。除非 显式开启，否则没有文件、网络，也不能访问运行环境。</li>
<li>天生支持 TypeScript。</li>
<li>只有一个单一的可执行文件。</li>
<li>自带实用工具，例如依赖检查器（deno info）和 代码格式化工具（deno fmt）。</li>
<li>有一套经过审核（审计）的标准模块， 确保与 Deno 兼容： deno.land/std。</li>
</ul>
</blockquote>
<h3 id="oakhttpsgithubcomoakserveroak"><a href="https://github.com/oakserver/oak" target="_blank" rel="noopener noreffer ">oak</a></h3>
<blockquote>
<p>A middleware framework for Deno&rsquo;s net server 🦕</p>
</blockquote>
<p><code>oak</code> 是借鉴 <code>Node</code> 框架<code>Koa</code>的设计思路开发的一个高性能的框架，其<code>洋葱模型</code>式的中间件等思路在开发中使用起来也是非常方便。</p>
<h2 id="目标">目标</h2>
<p>基于对以上的基础知识的认识，我们计划开发一个用户管理的<code>API</code>平台；对于后端简单来说，就是提供关于用户的增删改查（<code>CURD</code>）操作。所以我们的主要目标就是提供 4 个对用户<code>CURD</code>的接口。</p>
<h2 id="工具">工具</h2>
<blockquote>
<p>工欲善其事，必先利其器。</p>
</blockquote>
<h3 id="开发工具">开发工具</h3>
<p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreffer "><code>VS Code</code></a>, <a href="https://www.docker.com/" target="_blank" rel="noopener noreffer "><code>Docker</code></a></p>
<h3 id="环境工具">环境工具</h3>
<p><a href="https://deno.land/" target="_blank" rel="noopener noreffer "><code>Deno</code></a>, <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreffer "><code>Typescript</code></a>, <a href="https://nodejs.org/" target="_blank" rel="noopener noreffer "><code>Node</code></a></p>
<blockquote>
<p>注： Node 是用来调试 Deno 的</p>
</blockquote>
<h2 id="基础环境信息">基础环境信息</h2>
<p>我的环境信息如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ node -v
</span></span><span class="line"><span class="cl">v12.13.0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ deno --version
</span></span><span class="line"><span class="cl">deno 1.2.0
</span></span><span class="line"><span class="cl">v8 8.5.216
</span></span><span class="line"><span class="cl">typescript 3.9.2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ docker --version
</span></span><span class="line"><span class="cl">Docker version 19.03.8, build afacb8b</span></span></code></pre></div></div>
<p>其他信息</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">类型</th>
          <th style="text-align: center">版本</th>
          <th style="text-align: center">备注</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left"><a href="https://hub.docker.com/_/postgres" target="_blank" rel="noopener noreffer ">PostgreSql</a></td>
          <td style="text-align: center">12</td>
          <td></td>
      </tr>
      <tr>
          <td style="text-align: left"><a href="https://hub.docker.com/r/dpage/pgadmin4" target="_blank" rel="noopener noreffer ">PGAdmin</a></td>
          <td style="text-align: center">latest</td>
          <td></td>
      </tr>
  </tbody>
</table>
<h3 id="项目结构">项目结构</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ tree -L <span class="m">1</span> deno-restful-api-with-postgresql-tdd
</span></span><span class="line"><span class="cl">deno-restful-api-with-postgresql-tdd
</span></span><span class="line"><span class="cl">├── .github         // github action
</span></span><span class="line"><span class="cl">├── .vscode         // debug 及 vscode 配置文件
</span></span><span class="line"><span class="cl">├── LICENSE         // 仓库许可
</span></span><span class="line"><span class="cl">├── README.md       // 项目说明，包括数据库连接，简化后的运行命令等
</span></span><span class="line"><span class="cl">├── _resources      // 基础资源
</span></span><span class="line"><span class="cl">│   ├── IaaS        // 基础设施，docker-compose 启动 postgresql
</span></span><span class="line"><span class="cl">│   ├── httpClient  // http 请求测试
</span></span><span class="line"><span class="cl">│   └── migration   // 负责生成数据库表
</span></span><span class="line"><span class="cl">├── deps.ts         // 项目依赖的库及项目中要用到的资源（import）
</span></span><span class="line"><span class="cl">├── lock.json       // 完整性检查与锁定文件，参考：https://nugine.github.io/deno-manual-cn/linking_to_external_code/integrity_checking.html
</span></span><span class="line"><span class="cl">├── makefile        // 将开发需要的命令行简化后目录
</span></span><span class="line"><span class="cl">├── src             // 源代码目录
</span></span><span class="line"><span class="cl">└── tests           // 测试目录
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">5</span> directories, <span class="m">5</span> files</span></span></code></pre></div></div>
<h2 id="实现过程">实现过程</h2>
<blockquote>
<p>先说明一下，如果要用文字写完整个开发过程个人认为是没有必要的，所以就以最开始的<code>health</code>和<code>addUser</code>(<code>post</code>接口）为例， 其他接口请参考 <a href="https://github.com/guzhongren/deno-restful-api-with-postgresql-tdd" target="_blank" rel="noopener noreffer ">代码实现</a>。</p>
</blockquote>
<h3 id="启动基础设施数据库并初始化数据表">启动基础设施（数据库）并初始化数据表</h3>
<h4 id="启动数据库">启动数据库</h4>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make db
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ./_resources/Iaas <span class="o">&amp;&amp;</span> docker-compose up -d
</span></span><span class="line"><span class="cl">Starting iaas_db_1 ... <span class="k">done</span>
</span></span><span class="line"><span class="cl">Starting iaas_pgadmin_1 ... <span class="k">done</span></span></span></code></pre></div></div>
<h4 id="登录pgadmin-在默认的数据库postgres中新建query并执行如下操作完成初始化数据库">登录<code>pgadmin</code>, 在默认的数据库<code>postgres</code>中新建<code>Query</code>并执行如下操作，完成初始化数据库</h4>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sql">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="k">public</span><span class="p">.</span><span class="s2">&#34;user&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">id</span><span class="w"> </span><span class="n">uuid</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">username</span><span class="w"> </span><span class="nb">character</span><span class="w"> </span><span class="nb">varying</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span><span class="w">  </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">registration_date</span><span class="w"> </span><span class="k">timestamp</span><span class="w"> </span><span class="k">without</span><span class="w"> </span><span class="n">time</span><span class="w"> </span><span class="k">zone</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">password</span><span class="w"> </span><span class="nb">character</span><span class="w"> </span><span class="nb">varying</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span><span class="w">  </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">deleted</span><span class="w"> </span><span class="nb">boolean</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span></span></span></code></pre></div></div>
<h3 id="src-最终目录">src 最终目录</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ tree -a -L <span class="m">4</span> src
</span></span><span class="line"><span class="cl">src
</span></span><span class="line"><span class="cl">├── Utils
</span></span><span class="line"><span class="cl">│   └── client.ts
</span></span><span class="line"><span class="cl">├── config.ts
</span></span><span class="line"><span class="cl">├── controllers
</span></span><span class="line"><span class="cl">│   ├── UserController.ts
</span></span><span class="line"><span class="cl">│   ├── health.ts
</span></span><span class="line"><span class="cl">│   └── model
</span></span><span class="line"><span class="cl">│       └── IResponse.ts
</span></span><span class="line"><span class="cl">├── entity
</span></span><span class="line"><span class="cl">│   └── User.ts
</span></span><span class="line"><span class="cl">├── exception
</span></span><span class="line"><span class="cl">│   ├── InvalidedParamsException.ts
</span></span><span class="line"><span class="cl">│   └── NotFoundException.ts
</span></span><span class="line"><span class="cl">├── index.ts
</span></span><span class="line"><span class="cl">├── middlewares
</span></span><span class="line"><span class="cl">│   ├── error.ts
</span></span><span class="line"><span class="cl">│   ├── logger.ts
</span></span><span class="line"><span class="cl">│   └── time.ts
</span></span><span class="line"><span class="cl">├── repositories
</span></span><span class="line"><span class="cl">│   └── userRepo.ts
</span></span><span class="line"><span class="cl">├── router.ts
</span></span><span class="line"><span class="cl">└── services
</span></span><span class="line"><span class="cl">    ├── UserService.ts
</span></span><span class="line"><span class="cl">    └── fetchResource.ts
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">8</span> directories, <span class="m">16</span> files</span></span></code></pre></div></div>
<p>在开始之前，我们先定义一些常用的结构体和对象，如：response，exception 等</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/controllers/model/IResponse.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="kr">interface</span> <span class="nx">IResponse</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">success</span>: <span class="kt">boolean</span><span class="p">;</span> <span class="c1">// 表示此次请求是否成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">msg?</span>: <span class="kt">String</span><span class="p">;</span>     <span class="c1">// 发生错误时的一些日志信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">data?</span>: <span class="kt">any</span><span class="p">;</span>       <span class="c1">// 请求成功时返回给前端的数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/entity/User.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="kr">interface</span> <span class="nx">IUser</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">id?</span>: <span class="kt">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">username?</span>: <span class="kt">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">password?</span>: <span class="kt">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">registrationDate?</span>: <span class="kt">string</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">deleted?</span>: <span class="kt">boolean</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">class</span> <span class="nx">User</span> <span class="kr">implements</span> <span class="nx">IUser</span> <span class="p">{}</span></span></span></code></pre></div></div>
<p>异常用来处理错误情况，在最终返回给用户结果的时候，我们不能将异常返回给用户，而是以一种更友好的方式返回，具体流程可以参考<code>src/middlewares/error.ts</code>这个中间件的处理方式。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/exception/InvalidedParamsException.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">InvalidedParamsException</span> <span class="kr">extends</span> <span class="nb">Error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">constructor</span><span class="p">(</span><span class="nx">message</span>: <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">super</span><span class="p">(</span><span class="sb">`Invalided parameters, please check, </span><span class="si">${</span><span class="nx">message</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/exception/NotFoundException.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">NotFoundException</span> <span class="kr">extends</span> <span class="nb">Error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">constructor</span><span class="p">(</span><span class="nx">message</span>: <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">super</span><span class="p">(</span><span class="sb">`Not found resource, </span><span class="si">${</span><span class="nx">message</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h3 id="依赖管理">依赖管理</h3>
<p>Deno 没有像 Node 一样的诸如<code>package.json</code>来管理依赖，因为<code>Deno</code>的依赖是去中心化的，也就是以远程文件作为库，这一点和<code>Golang</code>很像。</p>
<p>我将系统中用到的依赖存放在根目录的<code>deps.ts</code>中，在最终提交的时候做一次 <a href="https://nugine.github.io/deno-manual-cn/linking_to_external_code/integrity_checking.html" target="_blank" rel="noopener noreffer "><code>完整性检查与锁定文件</code></a>, 来保证我所有的依赖在与其他协作者之间是相同的。</p>
<p>首先导入用到的测试相关的依赖。<strong>在后面开发中用到的相关依赖请自行添加到本文件中。</strong> 比较重要的我会列出来。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">export</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assert</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">equal</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;https://deno.land/std/testing/asserts.ts&#34;</span><span class="p">;</span></span></span></code></pre></div></div>
<h3 id="测试先行">测试先行</h3>
<p>现在<code>tests</code>目录下新建一个测试命名为<code>index.test.ts</code>, 写基本测试，证明测试和程序是可以<code>work</code>的。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">assert</span><span class="p">,</span> <span class="nx">equal</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">test</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Deno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;should work&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">universal</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">equal</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="nx">universal</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assert</span><span class="p">(</span><span class="mi">42</span> <span class="o">===</span> <span class="nx">universal</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span></span></span></code></pre></div></div>
<h3 id="第一次运行测试">第一次运行测试</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make <span class="nb">test</span>
</span></span><span class="line"><span class="cl">deno <span class="nb">test</span> --allow-env --allow-net -L info
</span></span><span class="line"><span class="cl">Check file:///xxxx/deno-restful-api-with-postgresql-tdd/.deno.test.ts
</span></span><span class="line"><span class="cl">running <span class="m">1</span> tests
</span></span><span class="line"><span class="cl"><span class="nb">test</span> should work ... ok <span class="o">(</span>6ms<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">test</span> result: ok. <span class="m">1</span> passed<span class="p">;</span> <span class="m">0</span> failed<span class="p">;</span> <span class="m">0</span> ignored<span class="p">;</span> <span class="m">0</span> measured<span class="p">;</span> <span class="m">0</span> filtered out <span class="o">(</span>6ms<span class="o">)</span></span></span></code></pre></div></div>
<h3 id="建立测试固件">建立测试固件</h3>
<p>将测试中用到的通用的测试信息存放在测试固件（<code>testFixtures</code>）中，可以在测试中复用，且可以简化代码。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// tests/testFixtures.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="kr">const</span> <span class="nx">TEST_PORT</span> <span class="o">=</span> <span class="mi">9000</span></span></span></code></pre></div></div>
<h3 id="health-接口">health 接口</h3>
<p><code>health</code> 接口可以作为系统的健康检查的一个出口，在运维平台中非常实用。对于此接口，我们只需要返回一个状态<code>OK</code>即可。其他情况可忽略。那么对应的<code>Todo</code>应该如下：</p>
<blockquote>
<p>当访问到系统的时候，应该返回系统的状态，且为 OK。</p>
</blockquote>
<p>所以，测试代码如下：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Application</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Router</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">getHealthInfo</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../src/controllers/health.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span><span class="nx">TEST_PORT</span><span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;../testFixtures.ts&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">test</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Deno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;health check&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">expectResponse</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">success</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="s2">&#34;Ok&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">abortController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AbortController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span> <span class="nx">signal</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">abortController</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">router</span><span class="p">.</span><span class="kr">get</span><span class="p">(</span><span class="s2">&#34;/health&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">({</span> <span class="nx">response</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">getHealthInfo</span><span class="p">({</span> <span class="nx">response</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">({</span> <span class="nx">port</span>: <span class="kt">TEST_PORT</span><span class="p">,</span> <span class="nx">signal</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="sb">`http://127.0.0.1:</span><span class="si">${</span><span class="nx">TEST_PORT</span><span class="si">}</span><span class="sb">/health`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">responseJSON</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="nx">responseJSON</span><span class="p">,</span> <span class="nx">expectResponse</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">abortController</span><span class="p">.</span><span class="nx">abort</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span></span></span></code></pre></div></div>
<h4 id="given">given</h4>
<blockquote>
<ul>
<li>上面的代码中，首先声明了我们期望的数据结构，即<code>expectResponse</code>；</li>
<li>然后创建一个应用程序和一个路由，</li>
<li>再创建一个终止应用的控制器，且从中取到信号标识，</li>
<li>接着， 向路由中添加一个<code>health</code>路由及其 handler；</li>
<li>然后将路由挂在到应用程序上；</li>
<li>监听应用程序端口，且传入应用程序信号。</li>
</ul>
</blockquote>
<h4 id="when">when</h4>
<blockquote>
<ul>
<li>给启动的应用发一个 get 请求，请求路径为<code>/health</code>;</li>
</ul>
</blockquote>
<h4 id="then">then</h4>
<blockquote>
<ul>
<li>根据 fetch 到的结果进行判定，看收到的<code>response</code>是不是和期望的一致， 且在最后终止上面的应用程序。</li>
<li>到此，如果运行测试肯定会发生错误，解决问题的也很简单，就是去实现<code>getHealthInfo</code> handler。</li>
</ul>
</blockquote>
<h4 id="实现-gethealthinfo-handler">实现 <code>getHealthInfo</code> handler</h4>
<p>在 src/controller 下新建<code>health.ts</code>，并以最简单的方案实现上面期望的结果，如下：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/controllers/health.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span> <span class="nx">Response</span><span class="p">,</span> <span class="nx">Status</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">IResponse</span> <span class="kr">from</span> <span class="s2">&#34;./model/IResponse.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">getHealthInfo</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">response</span> <span class="p">}</span><span class="o">:</span> <span class="p">{</span> <span class="nx">response</span>: <span class="kt">Response</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="nx">Status</span><span class="p">.</span><span class="nx">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">res</span>: <span class="kt">IResponse</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">success</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span><span class="o">:</span> <span class="s2">&#34;Ok&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">response</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">res</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>
<h4 id="运行测试">运行测试</h4>
<p>运行测试命令，测试通过；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make <span class="nb">test</span>
</span></span><span class="line"><span class="cl">deno <span class="nb">test</span> --allow-env --allow-net -L info
</span></span><span class="line"><span class="cl">Check file://xxx/deno-restful-api-with-postgresql-tdd/.deno.test.ts
</span></span><span class="line"><span class="cl">running <span class="m">2</span> tests
</span></span><span class="line"><span class="cl"><span class="nb">test</span> should work ... ok <span class="o">(</span>6ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> health check ... ok <span class="o">(</span>3ms<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">test</span> result: ok. <span class="m">2</span> passed<span class="p">;</span> <span class="m">0</span> failed<span class="p">;</span> <span class="m">0</span> ignored<span class="p">;</span> <span class="m">0</span> measured<span class="p">;</span> <span class="m">0</span> filtered out <span class="o">(</span>9ms<span class="o">)</span></span></span></code></pre></div></div>
<p>至此，使用<code>TDD</code>完成第一个简单的<code>health</code>接口；但对外没有暴露接口，所以需要在<code>src</code>目录中实现一个对外暴露该接口的应用。</p>
<h5 id="新建configts-做应用程序的配置管理文件">新建<code>config.ts</code>， 做应用程序的配置管理文件</h5>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/config.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">env</span> <span class="o">=</span> <span class="nx">Deno</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">toObject</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">APP_HOST</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">APP_HOST</span> <span class="o">||</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">APP_PORT</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">APP_PORT</span><span class="p">)</span> <span class="o">||</span> <span class="mi">8000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">API_VERSION</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">API_VERSION</span> <span class="o">||</span> <span class="s2">&#34;/api/v1&#34;</span><span class="p">;</span></span></span></code></pre></div></div>
<p>配置文件中，记录了应用程序启动的默认 host, 端口，及数据库相关的信息，最后记录了应用程序 api 的前缀。</p>
<p>在开始之前，需要在<code>deps.ts</code>中引入所需要的库；</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">export</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Application</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Router</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Response</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Status</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Request</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">RouteParams</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">RouterContext</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">helpers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">send</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;https://deno.land/x/oak/mod.ts&#34;</span><span class="p">;</span></span></span></code></pre></div></div>
<h5 id="新建路由-routerts-引入heathts并绑定路由">新建路由 <code>router.ts</code>, 引入<code>Heath.ts</code>并绑定路由</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/router.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span> <span class="nx">Router</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">API_VERSION</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;./config.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">getHealthInfo</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;./controllers/health.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">router</span><span class="p">.</span><span class="nx">prefix</span><span class="p">(</span><span class="nx">API_VERSION</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">router</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="kr">get</span><span class="p">(</span><span class="s2">&#34;/health&#34;</span><span class="p">,</span> <span class="nx">getHealthInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">router</span><span class="p">;</span></span></span></code></pre></div></div>
<h5 id="新建indexts-建立应用程序">新建<code>index.ts</code>, 建立应用程序</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/index.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span> <span class="nx">Application</span><span class="p">,</span> <span class="nx">send</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">APP_HOST</span><span class="p">,</span> <span class="nx">APP_PORT</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;./config.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">router</span> <span class="kr">from</span> <span class="s2">&#34;./router.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">listenToServer</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">app</span>: <span class="kt">Application</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="sb">`Application started, and listen to </span><span class="si">${</span><span class="nx">APP_HOST</span><span class="si">}</span><span class="sb">:</span><span class="si">${</span><span class="nx">APP_PORT</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">await</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="nx">hostname</span>: <span class="kt">APP_HOST</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">port</span>: <span class="kt">APP_PORT</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">secure</span>: <span class="kt">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">function</span> <span class="nx">createApplication</span><span class="p">()</span><span class="o">:</span> <span class="nx">Promise</span><span class="p">&lt;</span><span class="nt">Application</span><span class="p">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">main</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createApplication</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">await</span> <span class="nx">listenToServer</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h5 id="启动应用">启动应用</h5>
<p>如果是<code>VSCode</code>， 可以使用<code>F5</code>功能键，快速启动应用，在低版本的 <code>VS Code(1.47.2 以下）</code> 中可以启动调试。也可以以下命令启动；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make dev
</span></span><span class="line"><span class="cl">deno run --allow-net --allow-env ./src/index.ts
</span></span><span class="line"><span class="cl">数据库链接成功！
</span></span><span class="line"><span class="cl">Application started, and listen to 127.0.0.1:8000</span></span></code></pre></div></div>
<h5 id="调用接口测试结果">调用接口测试结果</h5>
<p>这里使用<code>VS Code</code> 的 <a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client" target="_blank" rel="noopener noreffer "><code>Rest Client</code></a> 插件进行辅助测试。</p>
<h6 id="请求体">请求体</h6>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>// _resources/httpClient/healthCheck.http
GET http://localhost:8000/api/v1/health HTTP/1.1</code></pre></div>
<h6 id="请求结果">请求结果</h6>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>HTTP/1.1 200 OK
content-length: 28
x-response-time: 0ms
content-type: application/json; charset=utf-8

{
  &#34;success&#34;: true,
  &#34;data&#34;: &#34;Ok&#34;
}</code></pre></div>
<p>至此，完成第一个接口，有 <code>Oak</code> 提供应用服务，经过了<code>Unit test</code>和 <code>RestClient</code>的测试。完成了开始的<code>Todo</code>。</p>
<h3 id="添加用户接口-adduser">添加用户接口 (<code>addUser</code>)</h3>
<p>添加用户涉及到<code>Controller</code>, <code>Service</code> 和 <code>Repository</code>, 所以我们分三步来实现该接口。</p>
<h4 id="controller">Controller</h4>
<p><code>Controller</code> 是控制层，对外提供服务；添加用户接口可以为系统添加用户，那么对应的<code>Todo</code>如下：</p>
<blockquote>
<ul>
<li>输入用户名和密码，返回特定数据结构的用户信息</li>
<li>参数必须输入，否则抛异常</li>
<li>如果输入错误参数，则抛异常</li>
</ul>
</blockquote>
<p>在此过程中，我们需要用到 <a href="https://github.com/udibo/mock" target="_blank" rel="noopener noreffer "><code>mock</code></a> 来 <code>mock</code> 第三方依赖。</p>
<p>导入所需依赖，并新建<code>UserController.test.ts</code>，在<code>Coding</code> 过程中需要实现<code>UserService</code>, 但不需要实现<code>addUser</code>方法； 测试如下：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// tests/controllers/UserController.test.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">stub</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Stub</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">v4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrowsAsync</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Application</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Router</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">UserController</span> <span class="kr">from</span> <span class="s2">&#34;../../src/controllers/UserController.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">IResponse</span> <span class="kr">from</span> <span class="s2">&#34;../../src/controllers/model/IResponse.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">UserService</span> <span class="kr">from</span> <span class="s2">&#34;../../src/services/UserService.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">IUser</span><span class="p">,</span> <span class="p">{</span> <span class="nx">User</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../src/entity/User.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">InvalidedParamsException</span> <span class="kr">from</span> <span class="s2">&#34;../../src/exception/InvalidedParamsException.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span><span class="nx">TEST_PORT</span><span class="p">}</span> <span class="kr">from</span> <span class="s1">&#39;../testFixtures.ts&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">test</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Deno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">userId</span> <span class="o">=</span> <span class="nx">v4</span><span class="p">.</span><span class="nx">generate</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">registrationDate</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">toISOString</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">mockedUser</span>: <span class="kt">User</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">id</span>: <span class="kt">userId</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">username</span><span class="o">:</span> <span class="s2">&#34;username&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">registrationDate</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">deleted</span>: <span class="kt">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;#addUser should return added user when add user&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserService</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">queryAllStub</span>: <span class="kt">Stub</span><span class="p">&lt;</span><span class="nt">UserService</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">stub</span><span class="p">(</span><span class="nx">userService</span><span class="p">,</span> <span class="s2">&#34;addUser&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">expectResponse</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">success</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span>: <span class="kt">mockedUser</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">returns</span> <span class="o">=</span> <span class="p">[</span><span class="nx">mockedUser</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userController</span><span class="p">.</span><span class="nx">userService</span> <span class="o">=</span> <span class="nx">userService</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">abortController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AbortController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span> <span class="nx">signal</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">abortController</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&#34;/users&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">await</span> <span class="nx">userController</span><span class="p">.</span><span class="nx">addUser</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">({</span> <span class="nx">port</span>: <span class="kt">TEST_PORT</span><span class="p">,</span> <span class="nx">signal</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="sb">`http://127.0.0.1:</span><span class="si">${</span><span class="nx">TEST_PORT</span><span class="si">}</span><span class="sb">/users`</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;POST&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">body</span><span class="o">:</span> <span class="s2">&#34;name=name&amp;password=123&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Content-Type&#34;</span><span class="o">:</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">responseJSON</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="nx">responseJSON</span><span class="p">,</span> <span class="nx">expectResponse</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">abortController</span><span class="p">.</span><span class="nx">abort</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;#addUser should throw exception about no params given no params when add user&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserService</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">queryAllStub</span>: <span class="kt">Stub</span><span class="p">&lt;</span><span class="nt">UserService</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">stub</span><span class="p">(</span><span class="nx">userService</span><span class="p">,</span> <span class="s2">&#34;addUser&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">returns</span> <span class="o">=</span> <span class="p">[</span><span class="nx">mockedUser</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userController</span><span class="p">.</span><span class="nx">userService</span> <span class="o">=</span> <span class="nx">userService</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">abortController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AbortController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span> <span class="nx">signal</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">abortController</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&#34;/users&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">await</span> <span class="nx">assertThrowsAsync</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">await</span> <span class="nx">userController</span><span class="p">.</span><span class="nx">addUser</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">InvalidedParamsException</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;should given params: name ...&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">abortController</span><span class="p">.</span><span class="nx">abort</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">({</span> <span class="nx">port</span>: <span class="kt">TEST_PORT</span><span class="p">,</span> <span class="nx">signal</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="sb">`http://127.0.0.1:</span><span class="si">${</span><span class="nx">TEST_PORT</span><span class="si">}</span><span class="sb">/users`</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;POST&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">body</span><span class="o">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Content-Type&#34;</span><span class="o">:</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="o">!</span><span class="p">.</span><span class="nx">cancel</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;#addUser should throw exception about no correct params given wrong params when add user&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserService</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">queryAllStub</span>: <span class="kt">Stub</span><span class="p">&lt;</span><span class="nt">UserService</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">stub</span><span class="p">(</span><span class="nx">userService</span><span class="p">,</span> <span class="s2">&#34;addUser&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">returns</span> <span class="o">=</span> <span class="p">[</span><span class="nx">mockedUser</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userController</span><span class="p">.</span><span class="nx">userService</span> <span class="o">=</span> <span class="nx">userService</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">abortController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AbortController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="p">{</span> <span class="nx">signal</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">abortController</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s2">&#34;/users&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">await</span> <span class="nx">assertThrowsAsync</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">await</span> <span class="nx">userController</span><span class="p">.</span><span class="nx">addUser</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">InvalidedParamsException</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;should given param name and password&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nx">abortController</span><span class="p">.</span><span class="nx">abort</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">({</span> <span class="nx">port</span>: <span class="kt">TEST_PORT</span><span class="p">,</span> <span class="nx">signal</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="sb">`http://127.0.0.1:</span><span class="si">${</span><span class="nx">TEST_PORT</span><span class="si">}</span><span class="sb">/users`</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">method</span><span class="o">:</span> <span class="s2">&#34;POST&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">body</span><span class="o">:</span> <span class="s2">&#34;wrong=params&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;Content-Type&#34;</span><span class="o">:</span> <span class="s2">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="o">!</span><span class="p">.</span><span class="nx">cancel</span><span class="p">();</span></span></span></code></pre></div></div>
<p><code>controller</code> 这一层需要调用<code>service</code>的服；作为<code>service</code>，对于<code>controller</code>是一个第三方服务，因此需要将<code>service</code>的方法<code>mock</code>，并以参数的形式传入<code>Controller</code>; 下面这段代码就是<code>mock</code>的应用；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserService</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">queryAllStub</span>: <span class="kt">Stub</span><span class="p">&lt;</span><span class="nt">UserService</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">stub</span><span class="p">(</span><span class="nx">userService</span><span class="p">,</span> <span class="s2">&#34;addUser&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">expectResponse</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">success</span>: <span class="kt">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">data</span>: <span class="kt">mockedUser</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">queryAllStub</span><span class="p">.</span><span class="nx">returns</span> <span class="o">=</span> <span class="p">[</span><span class="nx">mockedUser</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userController</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserController</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userController</span><span class="p">.</span><span class="nx">userService</span> <span class="o">=</span> <span class="nx">userService</span><span class="p">;</span></span></span></code></pre></div></div>
<p>在此解释两个测试，第一个测试即<code>#addUser should return added user when add user</code>;</p>
<h5 id="given-1">given</h5>
<blockquote>
<ul>
<li>mock <code>UserService</code>, 给 UserService 的 <code>addUser</code>方法打桩，并返回特定的用户结构；</li>
<li>新建测试服务，并将 <code>UserController</code>注册给 post 接口 <code>/users</code>;</li>
</ul>
</blockquote>
<h5 id="when-1">when</h5>
<blockquote>
<ul>
<li>传入正确的 form 类型的参数，用<code>fetch</code>请求<code>http://127.0.0.1:9000/users</code>;</li>
</ul>
</blockquote>
<h5 id="then-1">then</h5>
<blockquote>
<ul>
<li>对获取到的结果进行判定，并中断测试应用，将打桩的方法恢复。</li>
</ul>
</blockquote>
<p>在此解释两个测试，第二个测试即<code>#addUser should throw exception about no params given no params when add user</code>; <code>given</code>和<code>when</code>与第一个测试的<code>given</code>和<code>when</code>查不多，只是<code>body</code>参数为空；最重要的不同点是这次的<code>then</code>是在<code>when</code>里面，因为抛异常会在<code>handler</code>上抛，所以，需要将<code>then</code>的判定放在<code>handler</code> 上。这里用到了<code>Deno</code>的<code>assertThrowsAsync</code>来捕获异常并判定异常。</p>
<h5 id="given-2">given</h5>
<blockquote>
<ul>
<li><code>mock</code> <code>UserService</code>, 给 UserService 的 <code>addUser</code>方法打桩，并返回特定的用户结构；</li>
<li>新建测试服务，并将 <code>UserController</code>注册给 post 接口 <code>/users</code>;</li>
</ul>
</blockquote>
<h5 id="when-2">when</h5>
<blockquote>
<ul>
<li>给<code>body</code>传入空参数，用<code>fetch</code>请求<code>http://127.0.0.1:9000/users</code>;</li>
</ul>
</blockquote>
<h5 id="then-2">then</h5>
<blockquote>
<ul>
<li><code>then</code>部分处于<code>given</code>的路由处理<code>handler</code>中，对异常进行捕获并判定，接着中断测试应用，将打桩的方法恢复。</li>
</ul>
</blockquote>
<h5 id="运行测试-1">运行测试</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make <span class="nb">test</span>
</span></span><span class="line"><span class="cl">deno <span class="nb">test</span> --allow-env --allow-net -L info
</span></span><span class="line"><span class="cl">Check file:///xxx/deno-restful-api-with-postgresql-tdd/.deno.test.ts
</span></span><span class="line"><span class="cl">running <span class="m">5</span> tests
</span></span><span class="line"><span class="cl"><span class="nb">test</span> should work ... ok <span class="o">(</span>5ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should return added user when add user ... ok (21ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should throw exception about no params given no params when add user ... ok (4ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should throw exception about no correct params given wrong params when add user ... ok (3ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> health check ... ok <span class="o">(</span>4ms<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">test</span> result: ok. <span class="m">5</span> passed<span class="p">;</span> <span class="m">0</span> failed<span class="p">;</span> <span class="m">0</span> ignored<span class="p">;</span> <span class="m">0</span> measured<span class="p">;</span> <span class="m">0</span> filtered out <span class="o">(</span>37ms<span class="o">)</span></span></span></code></pre></div></div>
<h4 id="service">Service</h4>
<p><code>Service</code>是服务层，通过组合其他服务和调用底层数据接口层提供服务；对于用户添加，对于添加用户的<code>Service</code>, 我们只需要将用户对象传递过来，然后由<code>Repository</code>来处理；所以，我们的<code>Todo</code>对应如下：</p>
<blockquote>
<p>当传入期望的用户信息，可返回特定数据结构的用户信息</p>
</blockquote>
<p>新建<code>UserService.test.ts</code>， 并导入相关依赖；</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// tests/services/UserService.test.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">stub</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Stub</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">v4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">UserRepo</span> <span class="kr">from</span> <span class="s2">&#34;../../src/repositories/userRepo.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">UserService</span> <span class="kr">from</span> <span class="s2">&#34;../../src/services/UserService.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">IUser</span> <span class="kr">from</span> <span class="s2">&#34;../../src/entity/User.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">test</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Deno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;UserService #addUser should return added user&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">parameter</span>: <span class="kt">IUser</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">username</span><span class="o">:</span> <span class="s2">&#34;username&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">password</span><span class="o">:</span> <span class="s2">&#34;password&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">registrationDate</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">toISOString</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">v4</span><span class="p">.</span><span class="nx">generate</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mockedUser</span>: <span class="kt">IUser</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span><span class="nx">parameter</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">registrationDate</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">deleted</span>: <span class="kt">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userRepo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserRepo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">createUserStub</span>: <span class="kt">Stub</span><span class="p">&lt;</span><span class="nt">UserRepo</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">stub</span><span class="p">(</span><span class="nx">userRepo</span><span class="p">,</span> <span class="s2">&#34;create&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">createUserStub</span><span class="p">.</span><span class="nx">returns</span> <span class="o">=</span> <span class="p">[</span><span class="nx">mockedUser</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserService</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userService</span><span class="p">.</span><span class="nx">userRepo</span> <span class="o">=</span> <span class="nx">userRepo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="k">await</span> <span class="nx">userService</span><span class="p">.</span><span class="nx">addUser</span><span class="p">(</span><span class="nx">parameter</span><span class="p">),</span> <span class="nx">mockedUser</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">createUserStub</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span></span></span></code></pre></div></div>
<p>代码逻辑很简单，基本不需要解释。运行测试肯定会失败，为了让代码通过测试，编写<code>UserService.ts</code>, 在<code>UserService.ts</code>中调用<code>Repository</code>的<code>create</code>方法。所以，也需要简单实现<code>UserRepo</code>，只需要添加<code>create</code>方法即可。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/services/UserService.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="nx">UserRepo</span> <span class="kr">from</span> <span class="s2">&#34;../repositories/userRepo.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">IUser</span> <span class="kr">from</span> <span class="s2">&#34;../entity/User.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">UserService</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">userRepo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserRepo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userRepo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserRepo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kr">async</span> <span class="nx">addUser</span><span class="p">(</span><span class="nx">user</span>: <span class="kt">IUser</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">userRepo</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span></span></span></code></pre></div></div>
<h5 id="运行测试-2">运行测试</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make <span class="nb">test</span>
</span></span><span class="line"><span class="cl">deno <span class="nb">test</span> --allow-env --allow-net -L info
</span></span><span class="line"><span class="cl">Check file:///xxx/deno-restful-api-with-postgresql-tdd/.deno.test.ts
</span></span><span class="line"><span class="cl">running <span class="m">6</span> tests
</span></span><span class="line"><span class="cl"><span class="nb">test</span> should work ... ok <span class="o">(</span>5ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should return added user when add user ... ok (21ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should throw exception about no params given no params when add user ... ok (4ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should throw exception about no correct params given wrong params when add user ... ok (3ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> health check ... ok <span class="o">(</span>4ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserService <span class="c1">#addUser should return added user ... ok (1ms)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">test</span> result: ok. <span class="m">6</span> passed<span class="p">;</span> <span class="m">0</span> failed<span class="p">;</span> <span class="m">0</span> ignored<span class="p">;</span> <span class="m">0</span> measured<span class="p">;</span> <span class="m">0</span> filtered out <span class="o">(</span>38ms<span class="o">)</span></span></span></code></pre></div></div>
<h4 id="repository">Repository</h4>
<p><code>Repository</code>通常和数据库交互，将传入的数据持久化到数据库中；对于添加用户这个接口，我们的需求因该是将传入的信息以数据库要求的格式存储起来，并将结果返回给<code>Service</code>; 因此，<code>Todo</code>大致如下：</p>
<blockquote>
<ul>
<li>将传入的用户存入数据亏并返回特定数据结构的信息</li>
<li>如果参数中缺少基本字段则抛异常</li>
</ul>
</blockquote>
<p>测试如下：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// tests/repositories/UserRepo.test.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">stub</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Stub</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">v4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assert</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertMatch</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrowsAsync</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">UserRepo</span> <span class="kr">from</span> <span class="s2">&#34;../../src/repositories/userRepo.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">client</span> <span class="kr">from</span> <span class="s2">&#34;../../src/Utils/client.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">IUser</span> <span class="kr">from</span> <span class="s2">&#34;../../src/entity/User.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">NotFoundException</span> <span class="kr">from</span> <span class="s2">&#34;../../src/exception/NotFoundException.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">InvalidedParamsException</span> <span class="kr">from</span> <span class="s2">&#34;../../src/exception/InvalidedParamsException.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="p">{</span> <span class="nx">test</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">Deno</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;UserRepo #create should return mocked User given username&amp;password when create&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">queryStub</span>: <span class="kt">Stub</span><span class="p">&lt;</span><span class="nt">Client</span><span class="p">&gt;</span> <span class="o">=</span> <span class="nx">stub</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="s2">&#34;query&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">mockedQueryResult</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">rowCount</span>: <span class="kt">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="nx">queryStub</span><span class="p">.</span><span class="nx">returns</span> <span class="o">=</span> <span class="p">[</span><span class="nx">mockedQueryResult</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">parameter</span>: <span class="kt">IUser</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">username</span><span class="o">:</span> <span class="s2">&#34;username&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">password</span><span class="o">:</span> <span class="s2">&#34;password&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userRepo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserRepo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nx">userRepo</span><span class="p">.</span><span class="nx">client</span> <span class="o">=</span> <span class="nx">client</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">createdUserResult</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">userRepo</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">parameter</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="nx">createdUserResult</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span> <span class="nx">parameter</span><span class="p">.</span><span class="nx">username</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertEquals</span><span class="p">(</span><span class="nx">createdUserResult</span><span class="p">.</span><span class="nx">password</span><span class="p">,</span> <span class="nx">parameter</span><span class="p">.</span><span class="nx">password</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assert</span><span class="p">(</span><span class="nx">v4</span><span class="p">.</span><span class="nx">validate</span><span class="p">(</span><span class="nx">createdUserResult</span><span class="p">.</span><span class="nx">id</span><span class="o">!</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="nx">assertMatch</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">createdUserResult</span><span class="p">.</span><span class="nx">registrationDate</span><span class="o">!</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="sr">/[\d]{4}-[\d]{2}-[\d]{2}T[\d]{2}:[\d]{2}:[\d]{2}\.[\d]{1,3}Z/</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">queryStub</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">test</span><span class="p">(</span><span class="s2">&#34;UserRepo #create should throw exception given no value for field when create&#34;</span><span class="p">,</span> <span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">parameter</span>: <span class="kt">IUser</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">username</span><span class="o">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">password</span><span class="o">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kr">const</span> <span class="nx">userRepo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserRepo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">assertThrowsAsync</span><span class="p">(</span><span class="kr">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">await</span> <span class="nx">userRepo</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">parameter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span> <span class="nx">InvalidedParamsException</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;should supply valid username and password!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span></span></span></code></pre></div></div>
<p>因为<code>Repository</code>层要和数据库打交道，所以需要一个和数据库操作相应的处理工具库；在此我们期望通过使用<code>PostgreSql</code>自己的的<code>Client</code>来执行数据库操作。</p>
<p>在上面第一个测试代码中， 我们<code>mock</code>了<code>Client</code>的<code>query</code>方法，并且返回了预定的数据。接着调用<code>UserRepo</code>的<code>create</code>方法，判断返回数据的数据字段值与期望值是否一致。</p>
<p>运行测试依旧会失败，接下来以最简单的方式实现让测试通过。</p>
<p>导入<code>PostgreSql</code>相关的依赖；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="kr">export</span> <span class="p">{</span> <span class="nx">Client</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;https://deno.land/x/postgres/mod.ts&#34;</span><span class="p">;</span></span></span></code></pre></div></div>
<p>及定义数据库连接信息</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/config.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="kr">const</span> <span class="nx">DB_HOST</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">DB_HOST</span> <span class="o">||</span> <span class="s2">&#34;localhost&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">DB_USER</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">DB_USER</span> <span class="o">||</span> <span class="s2">&#34;postgres&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">DB_PASSWORD</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">DB_PASSWORD</span> <span class="o">||</span> <span class="s2">&#34;0&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">DB_DATABASE</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">DB_DATABASE</span> <span class="o">||</span> <span class="s2">&#34;postgres&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">DB_PORT</span> <span class="o">=</span> <span class="nx">env</span><span class="p">.</span><span class="nx">DB_PORT</span> <span class="o">?</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">env</span><span class="p">.</span><span class="nx">DB_PORT</span><span class="p">)</span> <span class="o">:</span> <span class="mi">5432</span><span class="p">;</span></span></span></code></pre></div></div>
<p>获取数据库连接的<code>Client</code>实例</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="c1">// src/Utils/client.ts
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span> <span class="nx">Client</span> <span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../../deps.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">DB_HOST</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">DB_DATABASE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">DB_PORT</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">DB_USER</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">DB_PASSWORD</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="kr">from</span> <span class="s2">&#34;../config.ts&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Client</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">  <span class="nx">hostname</span>: <span class="kt">DB_HOST</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">database</span>: <span class="kt">DB_DATABASE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">user</span>: <span class="kt">DB_USER</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">password</span>: <span class="kt">DB_PASSWORD</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">port</span>: <span class="kt">DB_PORT</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="k">default</span> <span class="nx">client</span><span class="p">;</span></span></span></code></pre></div></div>
<p>数据库应该在应用启动时连接，所以在<code>index.ts</code>引入<code>client</code>并建立连接和管理连接。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-ts">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ts" data-lang="ts"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="kr">import</span><span class="p">.</span><span class="nx">meta</span><span class="p">.</span><span class="nx">main</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="o">+</span>  <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nx">connect</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="o">+</span>  <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s2">&#34;数据库链接成功！&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">createApplication</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">   <span class="k">await</span> <span class="nx">listenToServer</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="o">+</span>  <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h5 id="重新启动测试">重新启动测试</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make <span class="nb">test</span>
</span></span><span class="line"><span class="cl">deno <span class="nb">test</span> --allow-env --allow-net -L info
</span></span><span class="line"><span class="cl">Check file:///xxx/deno-restful-api-with-postgresql-tdd/.deno.test.ts
</span></span><span class="line"><span class="cl">running <span class="m">8</span> tests
</span></span><span class="line"><span class="cl"><span class="nb">test</span> should work ... ok <span class="o">(</span>2ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserRepo <span class="c1">#create should return mocked User given username&amp;password when create ... ok (1ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserRepo <span class="c1">#create should throw exception given no value for field when create ... ok (1ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should return added user when add user ... ok (14ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should throw exception about no params given no params when add user ... ok (4ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserController <span class="c1">#addUser should throw exception about no correct params given wrong params when add user ... ok (2ms)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> health check ... ok <span class="o">(</span>3ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">test</span> UserService <span class="c1">#addUser should return added user ... ok (1ms)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">test</span> result: ok. <span class="m">8</span> passed<span class="p">;</span> <span class="m">0</span> failed<span class="p">;</span> <span class="m">0</span> ignored<span class="p">;</span> <span class="m">0</span> measured<span class="p">;</span> <span class="m">0</span> filtered out <span class="o">(</span>28ms<span class="o">)</span></span></span></code></pre></div></div>
<h5 id="请求体-1">请求体</h5>
<p>由<code>RestClient</code>验证请求； 现在启动应用，发送如下请求；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>// _resources/httpClient/addUser.http
POST http://localhost:8000/api/v1/users HTTP/1.1
Content-Type: application/x-www-form-urlencoded

name=foo&amp;password=123</code></pre></div>
<h5 id="请求结果-1">请求结果</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>HTTP/1.1 201 Created
content-length: 149
x-response-time: 34ms
content-type: application/json; charset=utf-8

{
  &#34;success&#34;: true,
  &#34;data&#34;: {
    &#34;username&#34;: &#34;foo&#34;,
    &#34;password&#34;: &#34;123&#34;,
    &#34;id&#34;: &#34;7aea0bb7-e0bc-4f1f-a516-3a43f4e30fb6&#34;,
    &#34;registrationDate&#34;: &#34;2020-07-27T14:11:24.140Z&#34;
  }
}</code></pre></div>
<p>异常情况可以自己制造，在此就不演示了，至此完成用户添加的接口。</p>
<h2 id="打包">打包</h2>
<p>按照上面的步骤，我们可以完成查询单个用户 (<code>GET</code>:<code>/users/:id</code>), 查询所有用户 (<code>GET</code>:<code>/users</code>) 和删除 (<code>DELETE</code>:<code>/users/:id</code>) 等接口，快速且高效。当我们完成测试和接口后，使用<code>deno</code>的命令行工具，我们可以将整个工程打包为一个<code>.js</code>文件；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make bundle
</span></span><span class="line"><span class="cl">mkdir dist
</span></span><span class="line"><span class="cl">deno bundle src/index.ts dist/platform.js
</span></span><span class="line"><span class="cl">Bundle file:///xxx/deno-restful-api-with-postgresql-tdd/src/index.ts
</span></span><span class="line"><span class="cl">Emit <span class="s2">&#34;dist/platform.js&#34;</span> <span class="o">(</span>856.11 KB<span class="o">)</span></span></span></code></pre></div></div>
<p>对于<code>NodeJs</code>开发的后端应用，可怕的<code>node_modules</code>依赖在打包时会是个问题，一般的<code>Node</code>后端应用都是直接将环境变量更新一下，然后将其部署在生产环境；
开发者写的工程文件并没有多大，而应用依赖的<code>node_modules</code>大多时候时工程文件的几十倍甚至几百倍。然后<code>Deno</code>很好的解决了这个问题。</p>
<h2 id="启动应用-1">启动应用</h2>
<p>如有需要将打包好的<code>.js</code>拷贝到目标目录，只要有<code>Deno</code>环境，我们就可以直接启动应用；</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ make start
</span></span><span class="line"><span class="cl"><span class="nv">APP_PORT</span><span class="o">=</span><span class="m">1234</span> deno run --allow-net --allow-env ./dist/platform.js
</span></span><span class="line"><span class="cl">数据库链接成功！
</span></span><span class="line"><span class="cl">Application started, and listen to 127.0.0.1:1234</span></span></code></pre></div></div>
<h2 id="乱中取整">乱中取整</h2>
<p>通过学习<code>Deno</code>, 有了一些心得体会；</p>
<ul>
<li>兼容浏览器<code>API</code>,<code>Deno</code>工程可以使用<code>Javascript</code>和<code>Typescript</code>进行编程，大大降低了认知复杂度和学习难度；</li>
<li>如果使用<code>Typescript</code>开发，那么会避免<code>动态一时爽，重构火葬场</code>的尴尬局面，所以推荐使用<code>Typescript</code>来写应用；</li>
<li>去中心化仓库，以单文件的形式分发，在协作开发的时候，为了统一库版本，就需校验依赖的版本，<code>Deno</code>提供了生成<code>lock.json</code>的形式来保证不同协作者之间的版本依赖；</li>
<li>&hellip;</li>
</ul>
<p>最后感谢 <a href="https://yihaimen.github.io/" target="_blank" rel="noopener noreffer ">海门</a> 和 <a href="https://github.com/hylerrix" target="_blank" rel="noopener noreffer ">亦乐</a> 的校对与指导；在他们的帮助下，我顺利完成了这篇博客。</p>
<h2 id="引用">引用</h2>
<ul>
<li>
<p><a href="https://github.com/guzhongren/deno-restful-api-with-postgresql-tdd" target="_blank" rel="noopener noreffer ">源码：https://github.com/guzhongren/deno-restful-api-with-postgresql-tdd</a></p>
</li>
<li>
<p><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客：https://guzhongren.github.io/</a></p>
</li>
<li>
<p><a href="https://deno.land/" target="_blank" rel="noopener noreffer ">Denoland: https://deno.land/</a></p>
</li>
<li>
<p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreffer ">VS Code: https://code.visualstudio.com/</a></p>
</li>
<li>
<p><a href="https://www.docker.com/" target="_blank" rel="noopener noreffer ">Docker: https://www.docker.com/</a></p>
</li>
<li>
<p><a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreffer ">Typescript: https://www.typescriptlang.org/</a></p>
</li>
<li>
<p><a href="https://nodejs.org/" target="_blank" rel="noopener noreffer ">Node: https://nodejs.org/</a></p>
</li>
<li>
<p><a href="https://github.com/udibo/mock" target="_blank" rel="noopener noreffer ">mock: https://github.com/udibo/mock</a></p>
</li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/data-hosting@master/20210819/wechat.ae9zxgscqcg.png" alt="https://cdn.jsdelivr.net/gh/guzhongren/data-hosting@master/20210819/wechat.ae9zxgscqcg.png" title="谷哥说-微信公众号" style="max-width: 100%; height: auto;"></p>
]]></description></item><item><title>Build My Blog With Hugo</title><link>https://guzhongren.github.io/2020/02/build-my-blog-with-hugo.zh/</link><pubDate>Sun, 23 Feb 2020 18:17:51 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/02/build-my-blog-with-hugo.zh/</guid><description><![CDATA[<p><img src="https://images.pexels.com/photos/868306/pexels-photo-868306.jpeg?cs=srgb&amp;dl=orange-and-green-camping-tent-under-starry-sky-868306.jpg&amp;fm=jpg" alt="https://images.pexels.com/photos/868306/pexels-photo-868306.jpeg?cs=srgb&amp;dl=orange-and-green-camping-tent-under-starry-sky-868306.jpg&amp;fm=jpg" title="Photo by Daniel Ap from Pexels" style="max-width: 100%; height: auto;"></p>
<h2 id="overview">Overview</h2>
<p><code>Hugo</code>是一款基于 golang 实现的静态网站生成器。以其简单、易用、高效、易扩展、快速部署受到开发者的喜爱，比起 <a href="https://hexo.io/" target="_blank" rel="noopener noreffer ">Hexo</a> 感觉更轻便。下图是我初步实现的博客截图。</p>
<p><img src="https://pic4.zhimg.com/80/v2-074dbc08888a5aa31642c53bce79297f_hd.jpg" alt="https://pic4.zhimg.com/80/v2-074dbc08888a5aa31642c53bce79297f_hd.jpg" title="博客截图" style="max-width: 100%; height: auto;"></p>
<h2 id="安装">安装</h2>
<h3 id="golang">Golang</h3>
<p>Hugo 是基于 Go 语言的，所以需要安装 go, 我的机器是 Mac, 所以直接用 homebrew 就搞定。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-zsh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">$ brew install go</span></span></code></pre></div></div>
<h3 id="hugo">Hugo</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-zsh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">$ brew install hugo</span></span></code></pre></div></div>
<h3 id="生成博客站点">生成博客站点</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-zsh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">$ hugo new site blog</span></span></code></pre></div></div>
<h3 id="安装-loveithttpsgithubcomdillonzqloveit-主题">安装 <a href="https://github.com/dillonzq/LoveIt" target="_blank" rel="noopener noreffer ">LoveIt</a> 主题</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-zsh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">$ <span class="nb">cd</span> blog
</span></span><span class="line"><span class="cl">$ git init
</span></span><span class="line"><span class="cl">$ git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt</span></span></code></pre></div></div>
<h3 id="配置-configtoml">配置 config.toml</h3>
<p>将<code>themes/LoveIt/exampleSite/config.toml</code> copy 到 blog 根目录，并根据需要修改里面的配置。</p>
<blockquote>
<p>注： 需要将 copy 过来的 config.toml 里的 themeDir 由<code>../..</code> 改为 <code>./themes</code></p>
</blockquote>
<h2 id="优化模板">优化模板</h2>
<p>Hugo 生成的 markdown 文件都是由<code>archetypes/default.md</code>生成的， 所以我们可以在模板里加入一些我们通常使用的文案和图片。 比如：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-toml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="nx">---</span>
</span></span><span class="line"><span class="cl"><span class="nx">title</span><span class="err">:</span> <span class="s2">&#34;{{ replace .Name &#34;</span><span class="nx">-</span><span class="s2">&#34; &#34;</span> <span class="s2">&#34; | title }}&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">date</span><span class="err">:</span> <span class="p">{{</span> <span class="p">.</span><span class="nx">Date</span> <span class="p">}}</span>
</span></span><span class="line"><span class="cl"><span class="nx">draft</span><span class="err">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="nx">author</span><span class="err">:</span> <span class="s2">&#34;谷中仁&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">authorLink</span><span class="err">:</span> <span class="s2">&#34;https://guzhongren.github.io&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">description</span><span class="err">:</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">license</span><span class="err">:</span> <span class="err">&lt;</span><span class="nx">a</span> <span class="nx">rel</span><span class="p">=</span><span class="s2">&#34;license&#34;</span> <span class="nx">href</span><span class="p">=</span><span class="s2">&#34;http://creativecommons.org/licenses/by-nc/4.0/&#34;</span><span class="err">&gt;&lt;</span><span class="nx">img</span> <span class="nx">alt</span><span class="p">=</span><span class="s2">&#34;Creative Commons License&#34;</span> <span class="nx">style</span><span class="p">=</span><span class="s2">&#34;border-width:0&#34;</span> <span class="nx">src</span><span class="p">=</span><span class="s2">&#34;https://i.creativecommons.org/l/by-nc/4.0/80x15.png&#34;</span> <span class="err">/&gt;&lt;/</span><span class="nx">a</span><span class="err">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">tags</span><span class="err">:</span> <span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">categories</span><span class="err">:</span> <span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">hiddenFromHomePage</span><span class="err">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">featuredImage</span><span class="err">:</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">featuredImagePreview</span><span class="err">:</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">toc</span><span class="err">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="nx">autoCollapseToc</span><span class="err">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="nx">math</span><span class="err">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="nx">comment</span><span class="err">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="nx">---</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">## 引用</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">----</span>
</span></span><span class="line"><span class="cl"><span class="err">!</span><span class="p">[</span><span class="err">谷哥说</span><span class="nx">-</span><span class="err">微信公众号</span><span class="p">]</span><span class="err">(</span><span class="nx">https</span><span class="err">://</span><span class="nx">cdn</span><span class="p">.</span><span class="nx">jsdelivr</span><span class="p">.</span><span class="nx">net</span><span class="err">/</span><span class="nx">gh</span><span class="err">/</span><span class="nx">guzhongren</span><span class="err">/</span><span class="nx">data-hosting</span><span class="err">@</span><span class="nx">master</span><span class="err">/</span><span class="mi">20210819</span><span class="err">/</span><span class="nx">wechat</span><span class="p">.</span><span class="nx">ae9zxgscqcg</span><span class="p">.</span><span class="nx">png</span><span class="err">)</span></span></span></code></pre></div></div>
<p>生成文章后，直接更新需要更新的字段，如标签（tags）和分类（categories）等，然后在中间直接写文章就可以。</p>
<h3 id="上传到-github">上传到 Github</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-zsh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">$ git remote add origin git@github.com:guzhongren/guzhongren.github.io.git
</span></span><span class="line"><span class="cl">$ git add .
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;init&#34;</span>
</span></span><span class="line"><span class="cl">$ git push -u origin master</span></span></code></pre></div></div>
<h4 id="创建-blog分支">创建 <code>blog</code>分支</h4>
<p>在 Github 上个创建 blog 分支。我们的博客都会在 blog 分支</p>
<h4 id="创建personal_token-或者-deploy-token">创建<code>PERSONAL_TOKEN</code>, 或者 Deploy Token</h4>
<p>我们在 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener noreffer ">Developer settings</a> 以 PERSONAL_TOKEN 为例。
<img src="https://pic4.zhimg.com/80/v2-12b6bf464fe3bc0020eddc1660b9a590_hd.jpg" alt="https://pic4.zhimg.com/80/v2-12b6bf464fe3bc0020eddc1660b9a590_hd.jpg" title="Image" style="max-width: 100%; height: auto;"></p>
<p>然后在项目设置的 Secret 中用<code>PERSONAL_TOKEN</code>添加
<img src="https://pic4.zhimg.com/80/v2-776abce099d89d67e2b1f35b8b71d18d_hd.jpg" alt="https://pic4.zhimg.com/80/v2-776abce099d89d67e2b1f35b8b71d18d_hd.jpg" title="Image" style="max-width: 100%; height: auto;"></p>
<h2 id="自动化部署配置">自动化部署配置</h2>
<p>既然博客基于 github, 那么我们可以直接用 <a href="https://github.com/features/actions" target="_blank" rel="noopener noreffer ">Github Actions</a>, 在项目页点击<code>Actions</code>, 创建一个 Workflow, 其内容大致如下</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">blog</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build-deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v1</span><span class="w"> </span><span class="c"># 必须用 v1 ，v2 不支持 submodule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0.64.0&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">add nojekyll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">touch ./public/.nojekyll</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">personal_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.PERSONAL_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">publish_branch</span><span class="p">:</span><span class="w"> </span><span class="l">master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">user_name</span><span class="p">:</span><span class="w"> </span><span class="l">guzhongren</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">user_email</span><span class="p">:</span><span class="w"> </span><span class="l">guzhongren@live.cn</span></span></span></code></pre></div></div>
<h2 id="写文章">写文章</h2>
<p>为了更好的管理发布的文章，建议用 <code>/year/mouth/article_name.zh.md</code> 这种格式。也可用我写的 Makefile 命令</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-zsh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">$ <span class="c1"># hugo new posts/2020/02/first.zh.md</span>
</span></span><span class="line"><span class="cl">$ make <span class="nv">post</span><span class="o">=</span>first.zh.md</span></span></code></pre></div></div>
<p>然后打开<code>content/posts/2020/02/first.zh.md</code> 进行文章编辑。</p>
<h2 id="预览">预览</h2>
<p>在 blog 项目根目录运行如下命令进行预览</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-zsh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">$ <span class="c1"># hugo server -D</span>
</span></span><span class="line"><span class="cl">$ make pre</span></span></code></pre></div></div>
<h2 id="提交">提交</h2>
<p>提交到 git 中，暂存起来</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-zsh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">$ make commit <span class="nv">message</span><span class="o">=</span>feat<span class="o">(</span>post<span class="o">)</span>: 发布新文章</span></span></code></pre></div></div>
<p>或者用如下命令</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-zsh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">$ git add -A
</span></span><span class="line"><span class="cl">$	git commit -m feat<span class="o">(</span>post<span class="o">)</span>: 发布新文章</span></span></code></pre></div></div>
<h2 id="发布">发布</h2>
<p>将本地更新提交到 github 上， 会自动触发 actions 然后进行构建，构建完成后自动将代码部署到</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-zsh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">$ make pub</span></span></code></pre></div></div>
<p>或者用</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-zsh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">$ git commit -m <span class="s2">&#34;first article&#34;</span>
</span></span><span class="line"><span class="cl">$ git pull
</span></span><span class="line"><span class="cl">$ git push</span></span></code></pre></div></div>
<h2 id="优化">优化</h2>
<p>在敲 hugo 相关的命令的时候比较繁琐，有几个参数经常会敲， 所以使用 <code>Makefile</code> 优化一下，上面有些命令就是在此定义的。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-Makefile">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Makefile" data-lang="Makefile"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">post</span> <span class="o">=</span> default.zh.md
</span></span><span class="line"><span class="cl"><span class="nv">message</span> <span class="o">=</span> git commit
</span></span><span class="line"><span class="cl"><span class="nv">Year_month</span> <span class="o">=</span> <span class="k">$(</span>shell date +<span class="s2">&#34;%Y/%m&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">new</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	hugo new posts/<span class="k">$(</span>Year_month<span class="k">)</span>/<span class="k">$(</span>post<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">pre</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	hugo server -D
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">commit</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	git add -A
</span></span><span class="line"><span class="cl">	git commit -m <span class="s2">&#34;</span><span class="k">$(</span>message<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nf">pub</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	git pull
</span></span><span class="line"><span class="cl">	git push
</span></span></code></pre></div></div>
<ul>
<li>new: 创建文章</li>
<li>pre: 写文章时预览</li>
<li>commit: 提交到本地暂存区</li>
<li>pub: 发布文章</li>
</ul>
<blockquote>
<p>尽情享用吧。..🎉🎉🎉🎉🎉</p>
</blockquote>
<h2 id="引用">引用</h2>
<ul>
<li>1.<a href="https://gohugo.io/" target="_blank" rel="noopener noreffer ">https://gohugo.io/</a></li>
<li>2.<a href="https://golang.google.cn/" target="_blank" rel="noopener noreffer ">https://golang.google.cn/</a></li>
<li>3.<a href="https://github.com/dillonzq/LoveIt" target="_blank" rel="noopener noreffer ">https://github.com/dillonzq/LoveIt</a></li>
<li>4.<a href="https://github.com/features/actions" target="_blank" rel="noopener noreffer ">https://github.com/features/actions</a></li>
<li>5.<a href="https://github.com/settings/tokens" target="_blank" rel="noopener noreffer ">https://github.com/settings/tokens</a></li>
<li>6.<a href="https://realfavicongenerator.net/" target="_blank" rel="noopener noreffer ">生成 icon: https://realfavicongenerator.net/</a></li>
</ul>
<hr>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/data-hosting@master/20210819/wechat.ae9zxgscqcg.png" alt="https://cdn.jsdelivr.net/gh/guzhongren/data-hosting@master/20210819/wechat.ae9zxgscqcg.png" title="谷哥说-微信公众号" style="max-width: 100%; height: auto;"></p>
]]></description></item><item><title>Version Management Strategy</title><link>https://guzhongren.github.io/2020/02/version-management-strategy.zh/</link><pubDate>Sun, 23 Feb 2020 11:11:22 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/02/version-management-strategy.zh/</guid><description><![CDATA[<p><img src="https://yqfile.alicdn.com/3b84530723a76268f2a99d3b65b3a354e87fe309.jpeg" alt="https://yqfile.alicdn.com/3b84530723a76268f2a99d3b65b3a354e87fe309.jpeg" title="Photo by Matheus Natan from Pexels" style="max-width: 100%; height: auto;"></p>
<p>为了开发高质量的软件，我们需要能够跟踪所有更改并在必要时将其撤消。 版本控制系统通过跟踪项目历史记录并帮助合并多人所做的更改来填补这一角色，极大地加快了工作速度，并使我们能够更轻松地发现错误。</p>
<p>此外，得益于这些工具，分布式团队可以畅通合作，使多个人可以同时处理项目的不同部分，然后将其结果合并为一个产品。 让我们仔细看看版本控制系统，git-flow 和 Trunk-based development（基于主干的开发）是如何形成的。</p>
<h2 id="版本控制系统是怎样改变世界的">版本控制系统是怎样改变世界的</h2>
<p>在版本控制系统出现之前，开发人员依靠手动备份项目的先前版本。他们手工复制修改过的文件，以便将多个开发人员的工作合并到同一项目中。
这样的操作花费了大量时间、硬盘空间和 money。</p>
<p>软件的目的是为了更好、更高效的完成工作。<code>工欲善其事必先利其器</code>，那么作为开发者肯定会在产出软件之前对自己的代码进行更有效的管理。</p>
<p>当我们回顾历史时 [1]，我们可以大致区分出三代阶段的控制软件。</p>
<table>
  <thead>
      <tr>
          <th>阶段</th>
          <th>操作</th>
          <th>并发</th>
          <th>存储</th>
          <th>工具</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>单文件</td>
          <td>锁定文件</td>
          <td>集中式</td>
          <td>RCS</td>
      </tr>
      <tr>
          <td>2</td>
          <td>多文件</td>
          <td>提交前 merge</td>
          <td>集中式</td>
          <td>Subversion, CVS</td>
      </tr>
      <tr>
          <td>3</td>
          <td>多文件</td>
          <td>merge 前提交</td>
          <td>分布式</td>
          <td>Git, Mercurial</td>
      </tr>
  </tbody>
</table>
<p>我们注意到随着版本控制系统的成熟，并行处理项目的能力成为了趋势。</p>
<p>最具突破性的更改之一是从锁定文件转变为合并更改。它使开发者能够更有效地工作。
另一个重大改进是引入了分布式系统。 Git 是采用这种理念的首批工具之一。 实际上，它使开源世界得以蓬勃发展。 Git 允许开发人员通过称为分叉的操作复制整个存储库，并引入所需的更改，而不必担心合并冲突。</p>
<p>随后，开发者可以创建一个 PR(Pull request)，以将其更改合并到原始项目中。 如果最初的开发人员对合并其他存储库中的更改不感兴趣，那么他们可以自己将其转换 (Fork) 为单独的项目。 由于没有中央存储的概念，因此一切皆有可能。</p>
<h2 id="git-flow">Git-flow</h2>
<p><img src="https://i.loli.net/2020/02/23/evmkayH8PSZfoCl.png" alt="https://i.loli.net/2020/02/23/evmkayH8PSZfoCl.png" title="Git-flow" style="max-width: 100%; height: auto;"></p>
<p>在 Git-flow 开发模型中，你有一个主分支 (master branch)，从主分支创建开发分支 (develop branch)，所有开发工作提交都基于开发分支。<code>主分支和开发分支在 git-flow 的整个生命周期中都是一直存在的。</code></p>
<p>开发人员从该开发分支创建功能分支 (Feature branch) 并对其进行 Coding。完成后，它们将创建 PR。在审查 (Review) PR 过程中，其他开发人员会对更改发表评论，并可能进行讨论，讨论时间也许会很长。</p>
<p>对 PR 评审完成后，PR 将被接受并 merge 到开发分支。 一旦确定开发分支已经成熟到可以发布，就会创建一个单独的分支 (release branch) 来准备最终版本。 该分支的应用程序已经过测试，并且在准备好将其发布给最终用户之前会应用错误修复 (bugfixs)。 完成此操作后，我们会将最终产品合并到主 (master branch) 分支，并打标签 (Tag)。 同时，可以在 develop 分支上继续开发新功能。
Git 流的优点之一是严格控制。仔细查看更改后，只有授权的开发人员才能批准更改。它可以确保代码质量，并有助于尽早消除错误。</p>
<p>但是，你需要记住，这也可能是一个巨大的劣势。它会形成一个瓶颈，从而减慢软件开发速度。如果速度是你的首要考虑，那么这应该是一个严重的问题。单独开发的功能可以创建长期存在的分支，这些分支可能很难与主项目结合。</p>
<p>此外，PR 仅将代码重点放在新代码上。他们只查看新引入的更改，而不是整体查看代码并进行改进。在某些情况下，它们可能会导致过早的优化，因为总有可能实现某些功能以使其更快地执行。</p>
<p>还有，PR 可能会导致<code>权利泛滥</code>，在这种情况下，牵头开发人员实际上会管理每行代码。如果你有经验丰富的开发人员可以信任，他们可以处理，但是你可能会浪费他们的时间和技能。它还可能严重削弱开发人员的动力。</p>
<p>在较大的组织中，PR 也可能会导致办公室政治或者以权谋私的事情发生。</p>
<h3 id="git-flow-的适用情况分析">Git-flow 的适用情况分析</h3>
<h4 id="git-flow-在什么时候最有效">git-flow 在什么时候最有效</h4>
<ul>
<li>当你在运营一个开源项目时</li>
</ul>
<p>这种场景是开源社区，在这里效果最好。 由于每个人都可以做出贡献，因此你希望能够非常严格地访问所有更改。 你希望能够检查每一行代码，坦率地说，你不能相信贡献者。 通常，这些不是商业项目，因此开发速度不是问题。</p>
<ul>
<li>当你有很多初级开发人员的时候</li>
</ul>
<p>如果你主要与初级开发人员一起工作，那么你希望有一种方法来仔细检查他们的工作。 你可以为他们提供更多有关如何更有效地 Coding, 并帮助他们更快地提高编程技能。 接受 PR 的人员对重复发生的更改具有严格的控制权，因此可以防止代码质量下降。</p>
<ul>
<li>当你已经有现成的产品的时候</li>
</ul>
<p>当你已经有成功的产品时，这种方式也可以很好地发挥作用。 在这种情况下，通常将重点放在应用程序性能和负载功能上。 这种优化需要非常精确的更改。 通常，时间不是限制，因此这种控制在这里效果很好，尤其大型企业非常适合这种风格（因为他们不想破坏自己数百万的投资，他们需要严密控制每个变更）。</p>
<h4 id="git-flow-会在什么情况下会有问题">git-flow 会在什么情况下会有问题</h4>
<ul>
<li>当你启动一个新项目时</li>
</ul>
<p>你可能希望快速创建最小可行的产品 (MVP)，提 PR 会产生巨大的瓶颈，这会大大降低整个团队的速度而你负担不起。Git 流程的问题在于，PR 可能会花费很多时间。</p>
<ul>
<li>当你需要快速迭代</li>
</ul>
<p>达到产品的第一个版本后，你很可能需要几次调整以满足你客户的需求。 同样，多个分支和 PR 会极大地降低开发速度，因此不建议这样做。</p>
<ul>
<li>当你与高级开发人员一起工作时</li>
</ul>
<p>如果你的团队主要由相互合作了较长时间的高级开发人员组成，那么你实际上就不需要上述的 PR 。你应该信任你的开发人员，并且知道他们是专业人士，让他们做好自己的工作，不要让所有 Git-Flow 的流程拖慢开发进度。</p>
<h2 id="github-flow">Github-flow</h2>
<p><img src="https://i.loli.net/2020/02/23/obvq1wuliJNczU9.png" alt="https://i.loli.net/2020/02/23/obvq1wuliJNczU9.png" title="github-flow.png" style="max-width: 100%; height: auto;"></p>
<p>Github-flow 是在 git-flow 的基础上衍生而来的。他简化了 git-flow 的复杂模型，并且与 Github 可以很好的结合，在此就不赘述了。</p>
<h2 id="trunk-based-developmenttbd">Trunk-based Development(TBD)</h2>
<p><img src="https://i.loli.net/2020/02/23/5JeLIEG2uxNokS4.png" alt="https://i.loli.net/2020/02/23/5JeLIEG2uxNokS4.png" title="Trunk-based Development" style="max-width: 100%; height: auto;"></p>
<p>在基于主干的开发模型中，所有开发人员都在一个具有开放访问权限的分支上工作。通常它只是 master 分支。他们将代码提交给它并运行它，非常简单。</p>
<p>在某些情况下，它们会创建短暂的功能分支。 分支上的代码编译并通过所有测试后，便将其直接合并到 master。 它可确保开发真正连续进行，并防止开发人员创建难以解决的合并冲突。</p>
<p>用这种方法检查代码的唯一方法是进行完整的源代码检查。 通常，冗长的讨论是有限的。 没有人能严格控制源代码库中正在修改的内容，这就是为什么拥有可强制执行的代码样式很重要的原因。 以这种风格工作的开发人员应具有丰富的经验，以便你知道他们不会降低源代码的质量。</p>
<p>当你与经验丰富的软件开发人员团队一起工作时，这种工作方式可能会很棒。 它使他们能够快速引入新的改进，而无需不必要的官僚作风。 它还显示了你对它们的信任，因为它们可以将代码直接引入 master 分支。 此工作流程中的开发人员非常自治-他们直接交付并检查工作产品中的最终结果。 这种方法绝对没有办公室管理的微观管理和可能性。</p>
<p>另一方面，如果你没有经验丰富的团队，或者由于某种原因不信任他们，则不应该采用这种方法，而应选择 Git flow。它将为你节省不必要的后顾之忧。</p>
<h3 id="tbd-的适用情况分析">TBD 的适用情况分析</h3>
<p>TBD 的适用情况与 git-flow 的适用情况恰好相反，可自行脑补。</p>
<h4 id="我有话说">我有话说</h4>
<p>在我上个项目中，我们的版本控制策略则更激进。</p>
<p>我们所有的开发没有特性分支，所有的 Code 都在 Master 分支上开发，原因有如下：</p>
<ul>
<li>我们的每张卡都拆的非常细（因为有老 BA)</li>
<li>我们每个人各自负责前端、移动端和后端</li>
<li>最重要的是我们的 CICD 完全一条龙操作，环境有 local、DEV、UAT 和 Prod, 在前一个环境 QA 验证不通过，是进入不到下一个环境的</li>
</ul>
<p>如果开发速度比较快，有些内容是要在下个版本才要上，那么团队就需要启用 FeatureToggle 了， 关于这部分可参考之前的 <a href="https://yq.aliyun.com/articles/727991?spm=a2c4e.11155435.0.0.152d3312ob5mmL" target="_blank" rel="noopener noreffer ">《FeatureToggle 引起的。&hellip; 总结》</a>。</p>
<blockquote>
<p>软件开发是一场人、语言和工具的故事，但愿你在合适的场景选择合适的工具。</p>
</blockquote>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://rc.sydney.edu.au/git-user-guide/history.html" target="_blank" rel="noopener noreffer ">1.https://rc.sydney.edu.au/git-user-guide/history.html</a></li>
<li><a href="https://nvie.com/files/Git-branching-model.pdf" target="_blank" rel="noopener noreffer ">2.https://nvie.com/files/Git-branching-model.pdf</a></li>
<li><a href="https://trunkbaseddevelopment.com" target="_blank" rel="noopener noreffer ">3.https://trunkbaseddevelopment.com</a></li>
<li><a href="https://guides.github.com/introduction/flow/" target="_blank" rel="noopener noreffer ">4.https://guides.github.com/introduction/flow/</a></li>
</ul>
<hr>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/data-hosting@master/20210819/wechat.ae9zxgscqcg.png" alt="https://cdn.jsdelivr.net/gh/guzhongren/data-hosting@master/20210819/wechat.ae9zxgscqcg.png" title="谷哥说-微信公众号" style="max-width: 100%; height: auto;"></p>
]]></description></item><item><title>Git Revert 多条已提交的记录</title><link>https://guzhongren.github.io/2019/09/git-revert-%E5%A4%9A%E6%9D%A1%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E8%AE%B0%E5%BD%95.zh/</link><pubDate>Mon, 30 Sep 2019 15:52:49 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2019/09/git-revert-%E5%A4%9A%E6%9D%A1%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E8%AE%B0%E5%BD%95.zh/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://yqfile.alicdn.com/4a5a82578aaa956e2fc4b83847feba87e44ad848.png" referrerpolicy="no-referrer">
            </div><p>我需要撤销最后的四个提交</p>
<p><img src="https://yqfile.alicdn.com/3fbcbf5e8d1d7d7d1ab6f5978b9df1f702f4e420.png" alt="https://yqfile.alicdn.com/3fbcbf5e8d1d7d7d1ab6f5978b9df1f702f4e420.png" title="image" style="max-width: 100%; height: auto;"></p>
<p>如果用* git revert * 一个一个 revert 挺费劲，可以用* git revert OLDER_COMMIT^..NEWER_COMMIT* 这种格式，对应我的工程就是</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git revert 54b23c2251acde.....09123463e99436fba83f9^..a19a10b24b648b80401234686aac65...</span></span></code></pre></div></div>
<p>这样会在 log 上多留下四条 revert 相关的记录，我不想生成 revert 相关的记录呢？可以的</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git revert -n 54b23c2251acde.....09123463e99436fba83f9^..a19a10b24b648b80401234686aac65...</span></span></code></pre></div></div>
<p>就是多加个 <em>-n</em> 参数，然后再通过 git add 和 git commit 等步骤就可以了。</p>
<p>最后的效果如下</p>
<p><img src="https://yqfile.alicdn.com/4a5a82578aaa956e2fc4b83847feba87e44ad848.png" alt="https://yqfile.alicdn.com/4a5a82578aaa956e2fc4b83847feba87e44ad848.png" title="image" style="max-width: 100%; height: auto;"></p>
<h2 id="引用">引用</h2>
<p><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">1.https://guzhongren.github.io/</a></p>
<hr>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/data-hosting@master/20210819/wechat.ae9zxgscqcg.png" alt="https://cdn.jsdelivr.net/gh/guzhongren/data-hosting@master/20210819/wechat.ae9zxgscqcg.png" title="谷哥说-微信公众号" style="max-width: 100%; height: auto;"></p>
]]></description></item><item><title>使用 git 迁移 git 项目并保留提交记录</title><link>https://guzhongren.github.io/2019/09/%E4%BD%BF%E7%94%A8git%E8%BF%81%E7%A7%BBgit%E9%A1%B9%E7%9B%AE%E5%B9%B6%E4%BF%9D%E7%95%99%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95.zh/</link><pubDate>Mon, 30 Sep 2019 15:52:49 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2019/09/%E4%BD%BF%E7%94%A8git%E8%BF%81%E7%A7%BBgit%E9%A1%B9%E7%9B%AE%E5%B9%B6%E4%BF%9D%E7%95%99%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95.zh/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://i.loli.net/2020/03/29/EZGJPfDjFAvM2Ug.jpg" referrerpolicy="no-referrer">
            </div><h2 id="场景">场景</h2>
<p>在平时开发中我们有自己的 git 仓库，组内提交都是在这个库。突然有一天，领导说要把这个库整合到另一个更大的工程中（华为云的看板），那里面有前后端的代码；为了方便大家查找，我们需要将各个组的代码迁移到同一个大工程下。</p>
<h2 id="问题">问题</h2>
<ul>
<li>提交要保留提交记录</li>
<li>changelog 要保留</li>
<li>组内成员要保留</li>
</ul>
<h2 id="解决方案">解决方案</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git push --mirror ......</span></span></code></pre></div></div>
<h2 id="操作">操作</h2>
<p>假如我们原有的仓库为<code>git@codehub.devcloud.huaweicloud.com:project.git</code></p>
<h4 id="1-从原地址克隆一份裸版本库">1. 从原地址克隆一份裸版本库</h4>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git clone --bare git@codehub.devcloud.huaweicloud.com:project.git
</span></span><span class="line"><span class="cl">......</span></span></code></pre></div></div>
<h4 id="2-在新目录创建-git-空项目">2. 在新目录创建 git <em>空</em>项目</h4>
<p>这一步是为了让旧项目有<strong>镜像</strong></p>
<p>假如新仓库地址为<code>git@codehub.devcloud.huaweicloud.com:leaderProject.git</code></p>
<h4 id="3-镜像推送代码到新仓库">3. 镜像推送代码到新仓库</h4>
<p>进入旧 git 目录，推送即可</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">cd</span> project
</span></span><span class="line"><span class="cl">$ git push --mirror git@codehub.devcloud.huaweicloud.com:leaderProject.git</span></span></code></pre></div></div>
<h2 id="晒个图">晒个图</h2>
<p><img src="https://i.loli.net/2020/03/29/ow9O6BnDeuLjqQh.png" alt="https://i.loli.net/2020/03/29/ow9O6BnDeuLjqQh.png" title="git.mirror.png" style="max-width: 100%; height: auto;"></p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">1. 博客：https://guzhongren.github.io/</a></li>
<li><a href="https://yq.aliyun.com/articles/675073?spm=a2c4e.11155435.0.0.27543312iFnJbY" target="_blank" rel="noopener noreffer ">2. 原文：https://yq.aliyun.com/articles/675073?spm=a2c4e.11155435.0.0.27543312iFnJbY</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/data-hosting@master/20210819/wechat.ae9zxgscqcg.png" alt="https://cdn.jsdelivr.net/gh/guzhongren/data-hosting@master/20210819/wechat.ae9zxgscqcg.png" title="谷哥说-微信公众号" style="max-width: 100%; height: auto;"></p>
]]></description></item><item><title>Npm 安装 git 资源</title><link>https://guzhongren.github.io/2018/10/npm-%E5%AE%89%E8%A3%85git%E8%B5%84%E6%BA%90.zh/</link><pubDate>Fri, 19 Oct 2018 19:27:23 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2018/10/npm-%E5%AE%89%E8%A3%85git%E8%B5%84%E6%BA%90.zh/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.pexels.com/photos/3979186/pexels-photo-3979186.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=750&amp;w=1260" referrerpolicy="no-referrer">
            </div><h2 id="引言">引言</h2>
<p>我们大多数情况下用到的包都是存放在 <a href="https://www.npmjs.com/" target="_blank" rel="noopener noreffer ">npmjs.com</a> 这个网站上的，只要我们安装了 Node，我们就可以使用 Node 自带的 npm 包来下载你需要的包；但有时候我们想让我们自己的包或者库私有，哪怎么办呢？很多人就会想到自己搭一个私服，比如 <a href="https://oss.sonatype.org/#Documentation" target="_blank" rel="noopener noreffer ">Nexus Repository Manager </a> 和 <a href="https://github.com/rlidwka/sinopia" target="_blank" rel="noopener noreffer ">sinopia</a>;　虽然搭建起来不是很困难，尤其是 sinopia 就是一个 npm 包，安装灰常简单，但是都需要一台服务器，一台服务。.. 一台服。.. 一台。.. 一。..</p>
<p>现在大多数公司肯定有自己的 git 仓库了，[没有到 git？说明你们技术太 XXX 落后] 那么我们何不利用 git 仓库来存放我们的各种 lib 呢？</p>
<h2 id="传统方式">传统方式</h2>
<blockquote>
<p>前事不忘，后事之师。先来复习一下怎么从 npmjs.com 获取包。[这句是我说的]</p>
</blockquote>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ npm install XXX
</span></span><span class="line"><span class="cl">...</span></span></code></pre></div></div>
<h2 id="git-仓库">git 仓库</h2>
<p>假如你已经做了一个特别牛逼的库，但是因为只是公司内部使用，比如一些工具库，放出去比如放到 npmjs.com 上没任何意义的，你可以把这个库整理成一个 git 的 repo, 当然打个标签，发个各版本什么的那就更好了。当你把你牛逼的库放在你司的 git 上后，比如地址是 <em><strong>ssh:git.niubi.com/yourName/niubility.git</strong></em>　或者　<em><strong><a href="https://git.niubi.com/yourName/niubility.git" target="_blank" rel="noopener noreffer ">https://git.niubi.com/yourName/niubility.git</a></strong></em>, 接下来就是发大招。</p>
<h2 id="大招">大招</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ npm install git+ssh:git.niubi.com/yourName/niubility.git
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">**#或者**
</span></span><span class="line"><span class="cl">$ npm install git+https://git.niubi.com/yourName/niubility.git
</span></span><span class="line"><span class="cl">...</span></span></code></pre></div></div>
<h2 id="隐藏技能-不推荐">隐藏技能 [不推荐]</h2>
<h3 id="用户名方式">用户名方式</h3>
<p>如果你将 npm 注册到自己的 git 仓库，就可以直接省去域名等一切能定位到该 lib 的的通用信息。</p>
<h4 id="注册及登录">注册及登录</h4>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ npm adduser --registry http://you.domain.com
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">$ npm login --registry http://you.domain.com
</span></span><span class="line"><span class="cl">...</span></span></code></pre></div></div>
<h4 id="安装">安装</h4>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ npm install yourName/niubility
</span></span><span class="line"><span class="cl">...</span></span></code></pre></div></div>
<h2 id="恩没什么可说的了我真是来测试打赏功能的">恩，没什么可说的了我真是来测试打赏功能的。</h2>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">1. 博客：https://guzhongren.github.io/</a></li>
<li><a href="https://sm.ms/" target="_blank" rel="noopener noreffer ">2. 图床：https://sm.ms/</a></li>
<li><a href="https://yq.aliyun.com/articles/655108?spm=a2c4e.11155435.0.0.3c783312bi9tbU" target="_blank" rel="noopener noreffer ">3. 原文：https://yq.aliyun.com/articles/655108?spm=a2c4e.11155435.0.0.3c783312bi9tbU</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p><img src="https://cdn.jsdelivr.net/gh/guzhongren/data-hosting@master/20210819/wechat.ae9zxgscqcg.png" alt="https://cdn.jsdelivr.net/gh/guzhongren/data-hosting@master/20210819/wechat.ae9zxgscqcg.png" title="谷哥说-微信公众号" style="max-width: 100%; height: auto;"></p>
]]></description></item></channel></rss>