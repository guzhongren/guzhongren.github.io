<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>AI - 标签 - 谷中仁的博客</title><link>https://guzhongren.github.io/tags/ai/</link><description>AI - 标签 - 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>guzhongren@live.cn (谷中仁)</managingEditor><webMaster>guzhongren@live.cn (谷中仁)</webMaster><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 22 Oct 2025 08:39:44 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/tags/ai/" rel="self" type="application/rss+xml"/><item><title>AI 使强者更强</title><link>https://guzhongren.github.io/2025/10/ai%E4%BD%BF%E5%BC%BA%E8%80%85%E6%9B%B4%E5%BC%BA/</link><pubDate>Wed, 22 Oct 2025 08:39:44 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/10/ai%E4%BD%BF%E5%BC%BA%E8%80%85%E6%9B%B4%E5%BC%BA/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><blockquote>
<p>工作固然重要，但没有什么值得你为此失去完整的人生。</p></blockquote>
<p>这是今天看到一篇公众号文章<a href="https://www.infoq.cn/article/2mcpfRO4ocBWJG7jb6HF">《AI 时代，编程语言选型更难也更重要：Go、Rust、Python、TypeScript 谁该上场？》</a><sup>[1]</sup>
上写的。自从 7 年前加入 Thougthworks 好像就从来没加过班一样的。周末可以正常休息，还可以打球，而且从来不出差。感恩公司。</p>
<h2 id="强者恒强">强者恒强</h2>
<p>这几年 AI 越来越普及，大到大型项目工程，小到小学生解题，AI 在以各种各样的方式“侵入”了我们生活的方方面面。在 AI 发展初期，很多人认为 AI 第一个能代替的行业是程序员，但直到现在，程序员依旧是这个世界上很难被代替的职业，抛开低迷的经济，各位专业的程序员依旧在自己的岗位上“发光发热”，并没有收到 AI 太大的冲击，相反，AI 正在助力程序员变得更强，更快，更可靠。</p>
<p>一个被广泛报道的案例是<a href="https://economictimes.indiatimes.com/magazines/panache/instant-karma-employer-who-replaced-his-tech-team-with-ai-asks-for-new-developers-on-linkedin-heres-what-happened-next/articleshow/116625826.cms?from=mdr">Instant karma: Employer who replaced his tech team with AI tries to hire new developers on LinkedIn. Here&rsquo;s what happened next</a><sup>[2]</sup>
，一位名叫 Wes Winder 的加拿大软件开发者在 Reddit 和 LinkedIn 上称自己已用 AI 工具取代了整个开发团队。然而，这一决定很快就事与愿违，几个月后他就在 LinkedIn 上发布招聘信息，重新招聘开发人员，引发了网友的嘲笑。这起事件被《经济时报》等媒体报道，并被视为用 AI 完全取代人类开发者的一个反面案例。</p>
<p>程序员到目前为止，甚至未来很长一段时间，依旧是很难被取代的。但 AI 使高级程序员更高级这一点也越来越突出。</p>
<p>我使用 AI 来编程，不管是做 SRE Agent 还是为业务代码实现需求，或者为业务代码实现单元测试，甚至使用 MCP 为开源项目写，修复 E2E 测试都有不少的经验，AI 在其中加速了我实现我的想法；</p>
<ul>
<li>
<p>比如在实现 SRE Agent 的时候，我需要将我的 Agent 集成到 Slack 中以 Bot 的形式与用户交互，这里需要创建一个 Slack bot，如果是我以前的开发方式，肯定使去看官方的开发文档，然后跟着文档一步一步的尝试，但在有 AI 之后，我可以直接告诉 AI 我的整体诉求，让后告诉他需要注意的点，最后再强调一下方案的可行性及答案的详细程度，AI 在思考片刻后，就会给出答案，并且附带参考链接。</p>
</li>
<li>
<p>再比如，我在为项目写 E2E 时，Playwright 脚本报了一个奇怪的错误，我有点不了解，并且我也不想去了解，我直接可以给出大致如下的 Prompt:</p>
<blockquote>
<p>请运行 E2E 测试脚本使用 @Playwright MCP 修复xxx.e2e.ts中错误。</p></blockquote>
</li>
</ul>
<p>如此简单，AI 会自动启动浏览器，并且打开浏览器控制台，在运行出错后，AI 收集信息，然后分析，给出解决方案并实施，不到 2 分钟，一个棘手的问题就被 AI 修复了，回过头来，我再让 AI 帮我总结一下刚才的问题，我只需要做适当的理解，在下次发生相同问题的时候，我就可以快速修复了。</p>
<ul>
<li>还有，我最近在做一个数据迁移的项目，设计到了我不熟悉的语言 Ruby, 作为一个 JavaScript/TypeScript、Java、Rust 写顺手，没写过 Ruby 语言的程序员来说，Ruby 真的是有点抽象，而且我们需要在短时间内完成开发工作，在这种情况下，我们肯定没有时间去学 Ruby 基础语法，但好在，我们有其他语言的基础，况且还有 AI；我大致读了代码，找到要加代码的位置，然后告诉 AI 我的需求，GitHub Copilot 就自动帮我完成了。但是他只是完成了你的最简单的需求，你需要对工程模式，代码格式等等负责，比如让他对方法中的 if else 进行重构。</li>
</ul>
<p>在基于 AI 开发的新项目中，有经验的程序员在解决复杂的业务/技术问题的时候往往具有更好的思维方式和更快的解决速度。</p>
<h2 id="弱者疾速">弱者疾速</h2>
<p>对于新晋程序员来说，AI 是个好助手。在学习开始前，可以先询问AI, 让其来规划学习路径，以减少不必需要的弯路。在具体的学习过程中，如果遇到问题，可以借助AI 让其帮你解决，但一定要自己总结遇到的问题和对应的解决办法。</p>
<p>相比于没有使用AI 来学习的老一辈程序员来说，学习一门新语言，新技术的周期已经不可同日而语。</p>
<p>AI 加速了学习周期，但最终的学习结果还是一样的，要熟悉语言的语法，模式，声明方式等等。</p>
<h2 id="ai-只是辅助远远替代不了人">AI 只是辅助，远远替代不了人</h2>
<p>社会运行的如此“高效”，机器只是其中一小部分，最大的因素往往是人，是人和人之间的关系。</p>
<p>当AI 完全参与到你生活的方方面面的时候，也需要人的介入，将你和机器，你和其他人链接起来共同完成一项工作或者创造。</p>
<p>还有AI 只是个概率机器，既然是概率，那么他就一定有出错的时候，不可对其产生的结果完全相信。还有另一个概念“<a href="https://cloud.google.com/discover/what-are-ai-hallucinations">AI幻觉(hallucinations)</a><sup>[3]</sup>
”，意思就是AI在一本正经的胡说八道，人在看其给出的结果的每一步，都觉得没有问题，但是整个结果确实错误的。虽然AI 幻觉可以通过技术手段来判断解决，但在现实大部分情况下依然存在很大的挑战，不管是数据的正确性或者是使用的规模上都很难规模化，但是对于特定行业或者问题解决AI 幻觉还是可以实施的，因为其异常场景几乎可以枚举，且规模不大, 甚至，行业专家都可以肉眼判断。</p>
<h2 id="练好基本功">练好基本功</h2>
<p>不要听信网上各种不靠谱的非专业程序员短时间完成一个所谓的程序就放狂言“以后都不需要程序员了”，在我看来，大部分非专业程序员写的程序基本都是垃圾，好一点的可以称之为POC。工程化往往是一个项目或者产品在实现过程中最难的。如果你有良好的基本功，就可以对架构，流程等进行随意合理的更改，扩展。</p>
<blockquote>
<p>慢慢来，比较快。</p></blockquote>
<div class="references">
                <h2>参考</h2>
                <ol><li>《AI 时代，编程语言选型更难也更重要：Go、Rust、Python、TypeScript 谁该上场？》: <a href="https://www.infoq.cn/article/2mcpfRO4ocBWJG7jb6HF" rel="noopener noreferrer">https://www.infoq.cn/article/2mcpfRO4ocBWJG7jb6HF</a></li><li>Instant karma: Employer who replaced his tech team with AI tries to hire new developers on LinkedIn. Here&rsquo;s what happened next: <a href="https://economictimes.indiatimes.com/magazines/panache/instant-karma-employer-who-replaced-his-tech-team-with-ai-asks-for-new-developers-on-linkedin-heres-what-happened-next/articleshow/116625826.cms?from=mdr" rel="noopener noreferrer">https://economictimes.indiatimes.com/magazines/panache/instant-karma-employer-who-replaced-his-tech-team-with-ai-asks-for-new-developers-on-linkedin-heres-what-happened-next/articleshow/116625826.cms?from=mdr</a></li><li>AI幻觉(hallucinations): <a href="https://cloud.google.com/discover/what-are-ai-hallucinations" rel="noopener noreferrer">https://cloud.google.com/discover/what-are-ai-hallucinations</a></li></ol>
            </div>]]></description></item><item><title>基于AI大模型开发一个Slack Bot的总结</title><link>https://guzhongren.github.io/2025/03/%E5%9F%BA%E4%BA%8Eai%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAslack-bot%E7%9A%84%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 28 Mar 2025 22:32:34 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/03/%E5%9F%BA%E4%BA%8Eai%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAslack-bot%E7%9A%84%E6%80%BB%E7%BB%93/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="起因">起因</h2>
<p>最近一个半月都在Beach，虽然离开了项目，但每天的生活比项目期间还要忙碌，同时也学到了很多新知识。</p>
<hr>
<p>在Beach期间，我参与了两个与AI相关的项目。虽然AI功能的开发占比不大，但通过代码学习了AI开发的相关模式，例如Google Cloud Platform、Terraform、Vertex AI、CrewAI以及Agent的编排。Agent编排在正式项目中尤为重要，因为AI无法一次性理解并完成复杂任务，需要将任务（Work）拆分为多个子任务（Task），通过编排的Agent组合完成。这种编排的控制逻辑和编码逻辑基本一致，主要包括顺序、循环和组合等基本形式。</p>
<hr>
<p>第一个项目是关于遗留系统维护质量评估的，涉及了许多新技术，例如 CrewAI、Vertex AI、Streamlit、Hugging Face 和 Agent 编排。在这个项目中，我首次使用 Python Flask 独立构建了一个后端服务，并结合 Streamlit 开发了服务端渲染的前端，为用户提供了优秀的交互体验。简单来说，这个功能类似于一个聊天记录的展示。</p>
<hr>
<p>第二个项目与SRE相关，目标是将可观测链路上的 Alert 转换为 Incident，并通过<code>ChatOps</code>形式处理这些 Incident。为此，我们需要一个集成AI功能的 Bot 来提升 Incident 处理效率。例如，当一个 Manager 加入 Incident Channel 时，需要一个简要的总结（当前 Incident 的情况总结）。这也是本文的来源。</p>
<h2 id="需求">需求</h2>
<p>在<code>ChatOps</code>中，当 Manager 加入 Incident 处理的聊天组时，需要及时获取当前 Incident 的处理情况，包括实时状态、关键行为以及可能的建议。</p>
<h2 id="基本流程">基本流程</h2>
<p>基于上述需求，我们需要为 Chat 设计一个 Bot。这个 Bot 在接收到简单指令后，可以生成当前 Incident 的关键数据报告，类似于 PIR（Post-Incident Report），但不需要那么详细。</p>
<div class="mermaid" id="id-1"></div><h2 id="开发流程">开发流程</h2>
<p>在开发过程中，我们需要完成以下任务：</p>
<ol>
<li>在 Slack 上创建一个 Bot，作为用户与 Slack 之间的沟通桥梁。</li>
<li>使用无服务器函数处理 Bot 发送的请求，获取 AI 所需数据，并将其传递给 AI 模型，最终将AI返回的内容发送回 Slack。</li>
</ol>
<h3 id="创建slack-bot">创建Slack Bot</h3>
<p>在<a href="https://api.slack.com/apps">Slack官网</a><sup>[1]</sup>
上创建 Bot 有两种方式： 1, Manifest， 2，Scratch 方式</p>
<div class="mermaid" id="id-2"></div><div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw" aria-hidden="true"></i>提示<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">创建Slack Bot需要Slack Workspace的管理员权限。</div>
        </div>
    </div>
<h4 id="manifest方式">Manifest方式</h4>
<p>这种方式相对简单，支持 JSON 和 YAML 格式，所有配置都集中在 Manifest文件中。以下是一个 YAML 格式的示例：</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">display_information</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">XBot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">bot_user</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">display_name</span><span class="p">:</span><span class="w"> </span><span class="l">XBot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">always_online</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">slash_commands</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">/summary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;ServerLess HTTPS URL&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="l">summary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">usage_hint</span><span class="p">:</span><span class="w"> </span><span class="l">it</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">should_escape</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">oauth_config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scopes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">bot</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">app_mentions:read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">channels:history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">channels:join</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">channels:read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">chat:write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">chat:write.public</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">commands</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">incoming-webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">groups:history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">im:history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">mpim:history</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">users:read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">settings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">event_subscriptions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">request_url</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;ServerLess HTTPS URL&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">bot_events</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">app_mention</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">interactivity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">is_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">request_url</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;ServerLess HTTPS URL&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">org_deploy_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">socket_mode_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">token_rotation_enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span></span></span></code></pre></div></div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>示例<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">ServerLess HTTPS URL: <a href="https://serverless.functions.url/x-bot">https://serverless.functions.url/x-bot</a><sup>[2]</sup></div>
        </div>
    </div>
<p>这种方式适合已经创建过一个 Bot，需要重新创建的情况，例如测试完成后需要创建正式的 Bot。</p>
<h4 id="scratch方式">Scratch方式</h4>
<p>按照提示逐步完成配置，涉及多个模块，例如<code>Basic Information</code>、<code>Socket Mode</code>、<code>Incoming Webhooks</code>、<code>Slash Command</code>、<code>OAuth &amp; Permissions</code>和<code>Event Subscriptions</code>等。具体权限可参考 Manifest 的 YAML 配置。</p>
<p>通过上述两种方式之一创建Bot后，需要获取以下Token，这些Token将在无服务器函数中使用：</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">项目</th>
          <th style="text-align: left">位置</th>
          <th style="text-align: left">操作</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">SIGNING_SECRET</td>
          <td style="text-align: left"><code>Basic Information</code> -&gt; <code>Signing Secret</code></td>
          <td style="text-align: left">复制</td>
      </tr>
      <tr>
          <td style="text-align: left">SLACK_APP_TOKEN</td>
          <td style="text-align: left"><code>Basic Information</code> -&gt; <code>App-Level Tokens</code></td>
          <td style="text-align: left">点击<code>Generate Token and Scope</code>，命名并赋予<code>connections:write</code>权限</td>
      </tr>
      <tr>
          <td style="text-align: left">SLACK_BOT_TOKEN</td>
          <td style="text-align: left"><code>OAuth &amp; Permissions</code> -&gt; <code>OAuth Tokens</code></td>
          <td style="text-align: left">复制</td>
      </tr>
  </tbody>
</table>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>重要提示<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>在本地开发代码并与Slack测试时，启用<code>Socket Mode</code>可以避免每次都部署代码，从而节省时间和资源</li>
<li>启用<code>Socket Mode</code>时，如果多人开发同一个Bot，可能会收到彼此的请求返回结果。建议每人创建一个独立的Workspace以避免冲突</li>
<li>更改完配置之后，需要将 App 安装到你的 Workspace 中</li>
</ul>
</div>
        </div>
    </div>
<h3 id="创建无服务器函数处理用户请求">创建无服务器函数处理用户请求</h3>
<p>这里选择使用 Python 来作为 Serferless 处理工具，并将其部署在云服务器上，比如 AWS Lambda, Azure Function， 或者 Google Cloud Platform 的 Cloud Run Functions中，这里不讲工程构建之类的，直接给出部分参考代码。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">slack_bolt</span> <span class="kn">import</span> <span class="n">App</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">slack_bolt.adapter.flask</span> <span class="n">imp</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">vertexai</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">vertexai.preview.generative_models</span> <span class="kn">import</span> <span class="n">GenerativeModel</span><span class="p">,</span> <span class="n">GenerationConfig</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">App</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">token</span><span class="o">=</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;SLACK_BOT_TOKEN&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">signing_secret</span><span class="o">=</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;SIGNING_SECRET&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">raise_error_for_unhandled_request</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="nd">@app.command</span><span class="p">(</span><span class="s2">&#34;/summary&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">handle_summary_command</span><span class="p">(</span><span class="n">ack</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">say</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">ack</span><span class="p">(</span><span class="s2">&#34;Thinking...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">channel_id</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s2">&#34;channel_id&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">check_channel_membership</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">channel_id</span><span class="p">,</span> <span class="n">say</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">slack_channel_histories</span> <span class="o">=</span> <span class="n">get_chat_history</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">channel_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">input</span> <span class="o">=</span> <span class="n">format_events</span><span class="p">(</span><span class="n">incident_id</span><span class="p">,</span> <span class="n">slack_channel_histories</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Use AI to summarize</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">system_prompt</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;</span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="s1">    You are an operations analysis expert. You .....
</span></span></span><span class="line"><span class="cl"><span class="s1">    ......
</span></span></span><span class="line"><span class="cl"><span class="s1">    Output format:
</span></span></span><span class="line"><span class="cl"><span class="s1">    ......
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">vertexai</span><span class="o">.</span><span class="n">init</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">project</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;GCP_PROJECT&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">location</span><span class="o">=</span><span class="s2">&#34;us-central1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">model</span> <span class="o">=</span> <span class="n">GenerativeModel</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">model_name</span><span class="o">=</span><span class="s2">&#34;gemini-2.0-flash&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">system_instruction</span><span class="o">=</span><span class="p">[</span><span class="n">system_prompt</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">gen_config</span> <span class="o">=</span> <span class="n">GenerationConfig</span><span class="p">(</span><span class="n">temperature</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">generate_content</span><span class="p">([</span><span class="n">prompt</span><span class="p">],</span> <span class="n">generation_config</span><span class="o">=</span><span class="n">gen_config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span>
</span></span><span class="line"><span class="cl">    <span class="n">say</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">blocks</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;header&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;plain_text&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;Here is the summary of the incident:&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;section&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;mrkdwn&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;text&#34;</span><span class="p">:</span> <span class="n">summary</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">handler</span> <span class="o">=</span> <span class="n">SlackRequestHandler</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Main</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">slack_bot</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">handler</span><span class="o">.</span><span class="n">handle</span><span class="p">(</span><span class="n">request</span><span class="p">)</span></span></span></code></pre></div></div>
<p>比如使用如下命令将这个程序部署在 GCP 中：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">gcloud functions deploy x-bot <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --runtime python310 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --trigger-http <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --allow-unauthenticated <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --entry-point slack_bot <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --timeout<span class="o">=</span>120s <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --set-env-vars <span class="nv">GCP_PROJECT</span><span class="o">=</span><span class="s1">&#39;&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --set-env-vars <span class="nv">SLACK_BOT_TOKEN</span><span class="o">=</span><span class="s1">&#39;&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --set-env-vars <span class="nv">SIGNING_SECRET</span><span class="o">=</span><span class="s1">&#39;&#39;</span></span></span></code></pre></div></div>
<h2 id="注意事项">注意事项</h2>
<p>部署好 Serverless Function 之后，需要将Serverless Function 的访问的 URL 添加到 Slack App 的配置中；</p>
<ul>
<li>将 <code>Socket Mode</code> 关闭</li>
<li>将 URL 填到 <code>Event Subscriptions</code>, 需要通过其校验</li>
<li>将 URL 填到 <code>Slash Commands</code> 添加的那个Command（<code>/summary</code>） 中</li>
</ul>
<h2 id="总结">总结</h2>
<p>Slack bot 的开发相对简单，大部分内容是简单的配置；重要的是将获取到的数据以某种特定的 Prompt ，并将其传递给 AI model 获取到准确的结果。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Slack官网: <a href="https://api.slack.com/apps" rel="noopener noreferrer">https://api.slack.com/apps</a></li><li>https://serverless.functions.url/x-bot: <a href="https://serverless.functions.url/x-bot" rel="noopener noreferrer">https://serverless.functions.url/x-bot</a></li></ol>
            </div>]]></description></item><item><title>本地跑deepseek 7b模型</title><link>https://guzhongren.github.io/2025/02/%E6%9C%AC%E5%9C%B0%E8%B7%91deepseek-7b%E6%A8%A1%E5%9E%8B/</link><pubDate>Tue, 11 Feb 2025 22:31:58 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/02/%E6%9C%AC%E5%9C%B0%E8%B7%91deepseek-7b%E6%A8%A1%E5%9E%8B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="背景">背景</h2>
<p>最近，Deepseek 因其卓越的性能和高效的推理速度在技术圈内引起了广泛关注。</p>
<p>Deepseek 采用了先进的算法(使用汇编和 CUDA 混编的方式调用 GPU)和训练方法(蒸馏)，不仅显著提升了推理速度，还降低了对硬件配置的要求，使其能够在更多设备上运行。</p>
<p>然而，使用在线 Deepseek 服务时，用户可能会遇到“服务器繁忙，请稍后再试”的问题。</p>
<p>作为程序员，我们自然不能忍受这种情况，因此本文将指导你如何在本地搭建 Deepseek 模型。</p>
<h2 id="搭建步骤">搭建步骤</h2>
<h3 id="所需软件及环境">所需软件及环境</h3>
<h4 id="环境">环境</h4>
<ul>
<li><strong>操作系统</strong>: MacOS M1 (Sequoia [Version 15.3])</li>
</ul>
<h4 id="软件">软件</h4>
<ul>
<li><strong><a href="https://ollama.com/">Ollama</a><sup>[1]</sup>
</strong>: 用于管理和运行大模型。</li>
<li><strong><a href="https://chatboxai.app/">Chatbox AI</a><sup>[2]</sup>
</strong>: 提供与大模型交互的界面。</li>
</ul>
<h3 id="安装步骤">安装步骤</h3>
<h4 id="安装-ollama">安装 Ollama</h4>
<p>Ollama 可以通过命令行或手动下载安装包进行安装。手动安装后，系统会自动启动 Ollama 服务；而通过命令行安装后，则需要手动启动服务。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">brew install ollama
</span></span><span class="line"><span class="cl"><span class="c1"># 安装完成后，启动 Ollama 服务</span>
</span></span><span class="line"><span class="cl">ollama serve</span></span></code></pre></div></div>
<h4 id="运行-deepseek模型">运行 deepseek模型</h4>
<ol>
<li>访问 Ollama 模型库，搜索 deepseek。</li>
<li>选择 deepseek-r1 模型，并选择 7b 版本。</li>
<li>点击复制按钮，将命令行粘贴到终端中运行。Ollama 将自动拉取并启动该模型。</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ollama run deepseek-r1:7b</span></span></code></pre></div></div>
<h4 id="安装-chatbox">安装 Chatbox</h4>
<p>Chatbox 是与大模型进行交互的界面。你可以选择直接安装软件或通过 Docker 运行。推荐使用软件安装，以便快速启动和操作。</p>
<p>可安装软件或者通过docker 运行，推荐软件安装，可以快速启动软件来提速。</p>
<h4 id="配置">配置</h4>
<p>Chatbox 安装完成并且 deepseek 大模型运行起来后，在 Chatbox -&gt; Settings 中选择本地启动的模型即可。</p>
<h2 id="总结">总结</h2>
<p>随着人工智能技术的快速发展，社会分工可能会发生显著变化, 最明显的是人工智能会淘汰掉社会分工的中间层。</p>
<p>未来的趋势可能是：要么成为顶层的规则设计者，要么成为底层的实践者。通过本地搭建和运行 Deepseek 模型，我们不仅能够避免在线服务的限制，还能更深入地理解和掌握这一前沿技术。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Ollama: <a href="https://ollama.com/" rel="noopener noreferrer">https://ollama.com/</a></li><li>Chatbox AI: <a href="https://chatboxai.app/" rel="noopener noreferrer">https://chatboxai.app/</a></li></ol>
            </div>]]></description></item></channel></rss>