<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Online - 标签 - 谷中仁的博客</title><link>https://guzhongren.github.io/tags/online/</link><description>Online - 标签 - 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>guzhongren@live.cn (谷中仁)</managingEditor><webMaster>guzhongren@live.cn (谷中仁)</webMaster><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 30 Jun 2023 23:23:05 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/tags/online/" rel="self" type="application/rss+xml"/><item><title>端午Incident了</title><link>https://guzhongren.github.io/2023/06/%E7%AB%AF%E5%8D%88incident%E4%BA%86/</link><pubDate>Fri, 30 Jun 2023 23:23:05 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/06/%E7%AB%AF%E5%8D%88incident%E4%BA%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="前言">前言</h2>
<p>现在，我们作为Ops 维护这一个新加坡的项目，项目还是比较复杂的。端午前一天00：00 上线了很多hotfix, 而这里面就隐藏了2个bug。</p>
<h2 id="回顾">回顾</h2>
<p>技术层面，有两个bug，一个Job运行时，数据库CPU 拉满，一个少了Redis 初始化，导致从Event Hub 发送过来的数据无法处理。</p>
<p>业务层面, 数据库CPU 拉满，导致业务数据无法处理；另一个Redis 初始化失败，影响到所有用户数据同步及奖励转换的问题。</p>
<h3 id="数据库cpu-拉满">数据库CPU 拉满</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sql">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="s2">&#34;table&#34;</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">columnName</span><span class="o">=</span><span class="s1">&#39;value&#39;</span></span></span></code></pre></div></div>
<p>新的代码修改是根据数据库某一列去查找对应的数据，然而Dev 对于这一列并没有添加索引，导致在Job 运行，Job 运行时间过长，通过数据库指标的dashboard 查看，数据库CPU 爆满,进而对该Job 的代码重新review， 发现时数据库查询没有加索引的问题。</p>
<p>发现有问题后，我们开始分析是否可以回滚该服务；但是发现该服务还涉及到其他hotfix, 如果这个service rollback，那么还有其他2个service 也需要回滚，影响面比较大。最终，我们的解决方案是，hotfix 依旧上线，但是涉及的Daily Job 从任务中删除，通知客户该incident 的影响面，并且在第二天晚上定时任务执行的时候再次确认是否又执行了; 对于在新的fix 上线之前的报告，我们使用手动生成的方式,以使业务持续。</p>
<p>是不是感觉不应该出现这样的问题？</p>
<p>是的, 但为什么还是出现了这样的事故呢？个人认为原因很简单:</p>
<ul>
<li>在low env 没有足够的数据对新的代码更改做充分的压力测试，只是完成的对应的功能</li>
<li>Review 时没有发现该问题，不可否认，这完全是Reveiwer 的经验问题</li>
</ul>
<h3 id="redis-没有初始化">Redis 没有初始化</h3>
<p>关于这个问题，我们的应用程序在代码层面有两方面的设计，1，启动server, 向外部提供RESTful 服务；2，启动Agendash, 运行一些业务方面的定时任务。</p>
<p>而我们的更新就是去优化这个服务，在应用层面分为2个服务，并且保持运行Agendash 的pod 数量与Event Hub partition 的数量一致，以解决一个消息被重复消费的问题（虽然很tricky）。</p>
<p>团队使用的方式是，参考之前某一个服务的拆分策略，业务代码，Ops 部署代码都进行双份设计，在启动服务时，启动不同的脚本即可。方式很简单，只是<code>抄代码，抄逻辑</code>。</p>
<p>然而，团队在做code fix 时，没有将代码<code>抄</code>全，导致少了 <code>initRedis()</code> 这样的代码；又因为团队对对应的业务了解的不多，没有进行充分的上线前的测试，只是凭<code>Senior dev</code> 的感觉就上线了。</p>
<p>为什么呢？</p>
<ul>
<li>Dev 对<code>抄</code>过来的代码在思想上很有信心，但是没有经过验证</li>
<li>没有在本地测试</li>
<li>没有充分的业务测试，甚至没有测试</li>
<li>Senior dev 可能粗心没发现</li>
</ul>
<p>这个过程中，因为负责这个code fix 的是个Junior Dev, 而在那段时间，我们有新的Senior Dev 要上项目，所以两人Pair 一起修bug。</p>
<h2 id="standby">Standby</h2>
<p>为什么需要Standby 呢？</p>
<h3 id="增强信心">增强信心</h3>
<p>如果你是第一次遇到Incident，是不是会害怕?</p>
<ul>
<li>这个问题到底是怎么发生的？</li>
<li>这么多人问我这么多问题，我忙不过来，会不会被客户投诉？</li>
<li>标准的处理流程是什么？</li>
<li>这个业务我不了解，我该不该叫其他小伙伴一起看？</li>
<li>出了线上事故了，项目组或者公司会不会处理我？</li>
<li>&hellip;&hellip;</li>
</ul>
<p>想到这些，你是不是已经很恐慌了？相反，如果有人和你一起追踪这个问题，你又是什么样的心态呢？</p>
<h3 id="及时响应">及时响应</h3>
<p>正如上面所说，在出现Incident 的时候会有很多事要做，比如查询根因、处理各种leader 发过来的问题，是不是感觉一个人根本忙不过来？</p>
<p>所以，如果有其他小伙伴和你一起standby, 那么是不是可以将工作分配一下，对客户、leader 的问题及时做出响应；起码给别人你很<code>靠谱</code>的印象, 提升自己、团队甚至公司在这方面的声誉。</p>
<h2 id="收获">收获</h2>
<h3 id="在数据库中查询基本都需要考虑加索引">在数据库中查询，基本都需要考虑加索引</h3>
<p>凡事查询，在没有加索引，且数据量上去之后，查询一定会变慢，这种情况下需要根据biz/tech 的策略加索引。</p>
<h3 id="在出现incident-时全员应该随时支持所谓standby">在出现Incident 时，全员应该随时支持，所谓Standby</h3>
<p>在这次的Incident中，团队并没有及时的Standby，需要提升这方面的实践和认知。所以后续需要在团队内进行Incident 培训，让大家知道如何处理Incident。同时Standby 是一种负责人的态度。</p>
<h3 id="没有所谓的简单的工作">没有所谓的简单的工作</h3>
<p>不要在不了解事情的情况下，随便说&quot;这不是很简单么&quot;这样的话；说的越轻松，打脸往往来的越快。</p>
<h3 id="不要责备">不要责备</h3>
<p>就像Thoughtworks 所倡导的，出了问题, 不要针对个人，不要问&quot;9：00～10：00, 你在干嘛&quot; 这样&quot;地震级&quot;的问题；而应该去分析为什么会出现这个Incident, 以后怎么避免。</p>
<h2 id="总结">总结</h2>
<p>在Ops 项目中遇到Incident 应该是在平常不过的了，那么处理Incident 的过程中，流程和人才是最重要的。将流程标准化（SOP）,鼓励团队积极响应，认真分析，产出修复方案，做好事后事故报告(Incident Report)这些才是最重要的。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item></channel></rss>