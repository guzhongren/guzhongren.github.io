<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Log - 标签 - 谷中仁的博客</title><link>https://guzhongren.github.io/tags/log/</link><description>Log - 标签 - 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>guzhongren@live.cn (谷中仁)</managingEditor><webMaster>guzhongren@live.cn (谷中仁)</webMaster><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 05 Aug 2022 09:33:24 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/tags/log/" rel="self" type="application/rss+xml"/><item><title>Some Good Practices of Logging</title><link>https://guzhongren.github.io/2022/08/some-good-practices-of-logging/</link><pubDate>Fri, 05 Aug 2022 09:33:24 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/08/some-good-practices-of-logging/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.staticaly.com/gh/guzhongren/data-hosting@main/Software-Engineering/Observability/Logging/logging.25uhyh14zi2o.webp" referrerpolicy="no-referrer">
            </div><h2 id="introduction">Introduction</h2>
<p>Logging is structured or unstructured text information generated by the system during operation. Usually, it can be regarded as a record of an event by the application. Logging can often help us discover unexpected behaviors in systems, especially in some microservice architecture systems. As an important part of Observability, Logging plays an irreplaceable role in our system development and maintenance.</p>

<h2 id="the-importance-of-logging">The importance of logging</h2>
<p>To understand why logging plays an important role in products or systems, we must understand its value. Currently, the most widely used logging forms are <strong>alerting</strong>, <strong>troubleshooting</strong>, and <strong>business data visualization</strong>.</p>
<h3 id="alerting">Alerting</h3>
<p>Logging can be used as an important data source for our business system monitoring; mature product systems have alarm systems. If there is a problem exceeding a certain defined indicator in the system, the log system will automatically send the alarm information to the notification platform. The On-call people can locate and solve the problem according to the alarm information.</p>
<h3 id="troubleshooting">Troubleshooting</h3>
<p>Imagine that the system you are responsible for developing and maintaining is found to be faulty. What is the first thing you should do? Check the system information to verify that it’s true. The log printed on the server  is the best auxiliary information. As programmers, logs are the most familiar tool for solving problems.</p>
<h3 id="business-data-visualization">Business Data Visualization</h3>
<p>Many companies can use the logs of the production environment stored in their own databases to visualize business data in combination with the corresponding tools such as <strong>Grafana</strong> and <strong>SumoLogic</strong>.</p>
<h2 id="logging-how-to">Logging how-to</h2>
<h3 id="templating">Templating</h3>
<p>It’s necessary to sort out our log format and write logs according to certain specifications.
</p>
<ul>
<li>
<p>Basic template</p>
<ul>
<li>At minimum, qualified logs should have the following information: time, log level, and log information.</li>
</ul>
</li>
<li>
<p>Advanced Template
Add thread name, hostname, method name, class name, and the number of lines corresponding to the method;</p>
<ul>
<li>Thread Name: Most applications don’t have a single user. For a single-instance service, many users accessing the same interface will execute the application in different threads. So using the thread name is best to differentiate the business process of corresponding users.</li>
<li>Hostname: Most current applications are deployed in the cloud with multiple instances, so on the basis of a single node, the logging needs to be distinguished at the instance level on multiple instances, and the hostname is the best way to differentiate.</li>
<li>Method Name: A convenient way to differentiate the source within the same log.</li>
<li>Class Name:  A convenient way to quickly locate the business process.</li>
<li>Number of lines: A quick way to find the specific location of the log.</li>
</ul>
</li>
</ul>
<h3 id="formatting">Formatting</h3>
<p>To improve the readability of the log, we can focus on formatting.</p>
<ul>
<li>Put <strong>square brackets</strong> around the log level, host name, and thread name;</li>
<li>Add <strong>parentheses</strong> to the class name and line number where the method name is located, and separate the class name and line number with a colon;</li>
<li>Add a <strong>horizontal line</strong> between the line number and log information;
Specific formatting is also possible for log information:</li>
<li>For regular requests, response or other business logs, you can separate custom information and parameters with an <strong>underscore</strong>; multiple parameters are separated by <strong>commas</strong>;</li>
<li>For error message formatting, you can use <strong>Key:Value</strong>.</li>
</ul>
<h3 id="chain-tracking">Chain-Tracking</h3>
<p>If the recorded log is just a simple text description line by line, it’ll be hard to read. In a complex system or a system with frequent business operations, there will be multiple logs and we’ll have to spend time filtering out the relevant logs. The best way to solve this problem is through chain tracking of logs: putting one or more unique IDs in the business system that are added to each log, so that when locating business problems, we can quickly filter out the relevant logs through these unique IDs and Other criteria (e.g. time).</p>
<h3 id="logging-on-demand">Logging on demand</h3>
<h4 id="log-level">Log level</h4>

<p>The output of the log is divided into levels.Different scenarios need to print different levels of logs.</p>
<ul>
<li>Debug: Record technical details and logs to help understand the system operation;</li>
<li>Info: Record business information;</li>
<li>Warn: Acceptable error messages that are manageable and not urgent;</li>
<li>Error: Unexpected errors or system behavior, usually caused by system bugs or environmental problems.</li>
</ul>
<p>At the same time, not all logs need to be recorded, we need to record as needed. The following table shows which logs should be recorded depending on the environment.</p>
<table>
  <thead>
      <tr>
          <th>Environment</th>
          <th>Log Leave</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Dev</td>
          <td>Debug</td>
      </tr>
      <tr>
          <td>Test</td>
          <td>Debug</td>
      </tr>
      <tr>
          <td>UAT</td>
          <td>Info</td>
      </tr>
      <tr>
          <td>Prod</td>
          <td>Info</td>
      </tr>
  </tbody>
</table>
<h4 id="logging-position">Logging position</h4>
<p>The location of the log print also needs to be made clear.</p>
<ul>
<li>When other systems call their own systems, they need to print the log once each when they receive a request and when the request is completed;</li>
<li>The log is printed once before the self-hosted system calls the interface of the third-party system and after receiving the response;</li>
<li>The log needs to be printed in any abnormal place in the system.</li>
</ul>
<h2 id="tool-recommendation">Tool recommendation</h2>
<p>Different programming languages have different logging tools; the most famous is Apache&rsquo;s <a href="https://logging.apache.org/log4j" target="_blank" rel="noopener noreffer ">Log4j</a>, which is highly configurable and can be configured via external files at runtime. It is based on logging priority and provides mechanisms to instruct logging information to many destinations such as database, file, console, UNIX system log, etc.; log4j has been ported to other programming languages, such as <a href="https://docs.python.org/3/library/logging.html" target="_blank" rel="noopener noreffer ">logging</a> in Python, <a href="https://www.npmjs.com/package/log4js" target="_blank" rel="noopener noreffer ">log4js</a> in NodeJS, <a href="https://crates.io/crates/log4rs" target="_blank" rel="noopener noreffer ">log4rs</a> in Rust.</p>
<h2 id="tips">Tips</h2>
<p>Avoid printing or recording any sensitive information, including but not limited to various <strong>PII</strong>, <strong>PCI</strong> information. Remember to obey local laws and regulations, such as China&rsquo;s <strong>PILI</strong> (Personal Information Protection Law) or Europe’s <strong>GDPR</strong> (General Data Protection Regulation). Choose the appropriate log level and log position as needed.
……</p>
<h2 id="summary">Summary</h2>
<p>A good log can not only facilitate program development and provide the most important auxiliary information for troubleshooting, it also gives optimization suggestions or data statistics for business or infrastructure.</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>日志记录的最佳实践</title><link>https://guzhongren.github.io/2022/07/%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Sun, 10 Jul 2022 12:01:50 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/07/%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.staticaly.com/gh/guzhongren/data-hosting@main/Software-Engineering/Observability/Logging/logging.25uhyh14zi2o.webp" referrerpolicy="no-referrer">
            </div><h2 id="简介">简介</h2>
<p>日志（Log）是由系统在运行过程中产生的结构化或者非结构化的文字信息。通常情况，可以将其视为应用程序对某个事件（Event）的记录。日志通常可以帮助我们发现一些微服务架构系统的非预期或突发的行为。
Logging作为 Observability的重要组成部分，在我们的系统开发、维护中起到无法替代的作用。</p>

<h2 id="日志的重要性">日志的重要性</h2>
<p>要理解为什么日志在产品或者系统中扮演着重要的角色，我们必须了解它的价值。至少到现在，日志被应用最广泛的是<strong>报警</strong>、<strong>故障排除</strong>和<strong>业务数据可视化</strong>。</p>
<h3 id="报警">报警</h3>
<p>日志可以作为我们业务系统监控的重要数据来源；成熟的产品系统都有报警系统，如果系统中出现超过某个已定义的某个指标的问题，日志系统会自动将报警信息发送到通知平台，On-call 的人就可以根据报警信息定位解决问题了。
</p>
<h3 id="故障排除">故障排除</h3>
<p>这种情况非常普遍；想象一下你最近负责开发维护的系统被他人发现有问题，在你梳理完思路之后第一件事是干什么？ 肯定是查看系统信息验证自己的假设是否成立， 这里打印在服务器上的日志就是最好的辅助信息。而作为程序员的我们，日志是我们最熟悉不过的解决问题的利器。
</p>
<h3 id="业务数据可视化">业务数据可视化</h3>
<p>很多公司可以利用存储在自己数据库里的生产环境的日志，结合相应的工具可以对业务进行业务数据可视化。这里最典型的代表是 Grafana 和 SumoLogic。
</p>

<h2 id="怎么做">怎么做</h2>
<h3 id="模版化">模版化</h3>
<p>为了更好的支持上面的各种情况，我们需要对我们的日志格式进行梳理，按照一定的规范来写日志，而不是随便写一句废话。
</p>
<ul>
<li>基础版本
<ul>
<li>对于日志，<strong>时间</strong>，<strong>日志级别</strong>，和<strong>日志信息</strong>最为重要，所以一个合格的日志应该至少包含这些信息。</li>
</ul>
</li>
<li>高级版本
<ul>
<li>在基础版的基础上，加入线程名，方法名，类名，方法对应的行数；</li>
<li><strong>线程名</strong>： 多数应用的用户都不是单一的，对于单实例的服务对同一个接口很多用户访问应用会将在不同的线程中执行，这时如果要区分对应用户的业务流程，那么通过线程名是最好的。</li>
<li><strong>主机名</strong>：现在的应用大都部署在 Cloud 中都是多实例的，所以在单节点的基础上，日志在多实例上就需要实例级别的区分，而主机名是最好的区分方式。</li>
<li><strong>方法名</strong>： 打印了日志的方法名，方便区分相同日志的出处。</li>
<li><strong>类名</strong>： 打印了日志的类名，方便快速定位业务流程。</li>
<li><strong>行数</strong>：打印了日志的行数，方便快速定位日志的具体位置。</li>
</ul>
</li>
</ul>
<h3 id="格式化">格式化</h3>
<p>为了提高日志的可读性，我们可以对日志进行修饰。</p>
<ul>
<li>对日志级别、主机名和线程名前后加<strong>中括号</strong>；</li>
<li>对方法名所在的类名和行号加括号，并在类名与行号中间用<strong>冒号</strong>隔开；</li>
<li>在行号和日志信息中间加入一个<strong>横线</strong>来分割；</li>
<li>对于日志信息也可以进行特定的格式化
<ul>
<li>对于常规的请求（Request）、响应（Response）或者其他业务日志，可以在自定义信息和参数之间用<strong>下划线</strong>分割；多个参数之间用<strong>逗号</strong>分隔，当然参数也是可选的；</li>
<li>对于错误信息格式化，也可以按照 <strong>Key：Value</strong> 的形式进行组织。</li>
</ul>
</li>
</ul>
<h3 id="链式追踪">链式追踪</h3>
<p>记录下了日志，如果只是一行行简单的文字说明，那是没有太大意义的。在复杂系统或业务操作频繁的系统中，会产生非常多的日志，在这种情况下，我们就得花时间去过滤出相关的日志。
解决上面问题的最好办法是日志的<strong>链式追踪</strong>；简单说就是，在每条日志中加入业务系统中的一个或者多个<strong>唯一</strong>的 ID，这样在定位业务问题的时候可以通过这些唯一的 ID 和 其他条件（e.g. 时间）快速过滤出相关的日志。</p>
<h3 id="按需记录日志">按需记录日志</h3>
<h4 id="日志级别">日志级别</h4>

<p>日志的输出都是分级别的，不同的场景需要打印不同级别的日志；以下是几个比较重要的日志级别。</p>
<ul>
<li><strong>Debug</strong>: 记录技术细节，和一些帮助理解系统运行的日志;</li>
<li><strong>Info</strong>: 记录业务信息的日志;</li>
<li><strong>Warn</strong>: 非紧急且可控的可接受的错误信息;</li>
<li><strong>Error</strong>: 非期望的错误或者系统表现，通常是由系统bug或者环境问题导致。</li>
</ul>
<p>同时不是所有的日志都需要记录，我们要做到按需记录。下表是推荐在不同的环境选择不同的日志级别。</p>
<table>
  <thead>
      <tr>
          <th>Environment</th>
          <th>Log Leave</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Dev</td>
          <td>Debug</td>
      </tr>
      <tr>
          <td>Test</td>
          <td>Debug</td>
      </tr>
      <tr>
          <td>UAT</td>
          <td>Info</td>
      </tr>
      <tr>
          <td>Prod</td>
          <td>Info</td>
      </tr>
  </tbody>
</table>
<h4 id="日志位置">日志位置</h4>
<p>有了日志级别，日志打印的位置也需要明确。一般情况下：</p>
<ul>
<li>其他系统调用自有系统时需要在收到请求和完成请求时各打印一次日志；</li>
<li>自有系统调用第三方系统的接口前和收到返回信息后各打印一次日志；</li>
<li>在系统任何有异常的地方需要打印日志；</li>
</ul>
<p>还有一种特殊情况是，像消息传递之类的系统，为了节省日志存储和减少查看干扰，大多时候我们不需要在收到消息后直接打印该消息，一般建议在收到消息后，如果系统处理有异常，在异常中将原始消息打印。</p>
<h2 id="工具推荐">工具推荐</h2>
<p>不同的编程语言有不同的日志工具；比较著名的是 Apache 的 <a href="https://logging.apache.org/log4j" target="_blank" rel="noopener noreffer ">Log4j</a>, Log4j是高度可配置的，并可通过在运行时的外部文件配置。它根据记录的优先级别，并提供机制以指示记录信息到许多的目的地，诸如：数据库，文件，控制台，UNIX系统日志等；而且 log4j 已经被移植到了其他编程语言中了，如 Python 中的 <a href="https://docs.python.org/3/library/logging.html" target="_blank" rel="noopener noreffer ">logging</a>, NodeJS 中的<a href="https://www.npmjs.com/package/log4js" target="_blank" rel="noopener noreffer ">log4js</a>, Rust 中的<a href="https://crates.io/crates/log4rs" target="_blank" rel="noopener noreffer ">log4rs</a>。</p>
<h2 id="注意点">注意点</h2>
<ul>
<li>避免打印或记录任何敏感信息，包括但不限于各种PII，PCI信息，一定要记得遵守当地的各种法律法规，如中国的《个人信息保护法》（PILI）, 欧洲的一般数据保护条例GDPR等</li>
<li>按需选择合适的日志级别和日志位置</li>
<li>&hellip;&hellip;</li>
</ul>
<h2 id="总结">总结</h2>
<p>好的日志不仅可以为程序开发提供便利，为故障排除提供最重要的辅助信息，更可以为业务或基础设施提供优化建议或数据统计。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://logit.io/blog/post/the-top-21-grafana-dashboards-and-visualisations" target="_blank" rel="noopener noreffer ">THE TOP 25 GRAFANA DASHBOARD EXAMPLES</a></li>
<li><a href="https://grafana.com/" target="_blank" rel="noopener noreffer ">Grafana lab</a></li>
<li><a href="https://www.sumologic.com/" target="_blank" rel="noopener noreffer ">SumoLogic</a></li>
<li><a href="https://logging.apache.org/log4j" target="_blank" rel="noopener noreffer ">Log4j</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>真的需要在测试中打log么？</title><link>https://guzhongren.github.io/2022/06/%E7%9C%9F%E7%9A%84%E9%9C%80%E8%A6%81%E5%9C%A8%E6%B5%8B%E8%AF%95%E4%B8%AD%E6%89%93log%E4%B9%88/</link><pubDate>Sat, 11 Jun 2022 20:03:35 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/06/%E7%9C%9F%E7%9A%84%E9%9C%80%E8%A6%81%E5%9C%A8%E6%B5%8B%E8%AF%95%E4%B8%AD%E6%89%93log%E4%B9%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1654885506947-fe5280d8e0ea?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1470&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="引言">引言</h2>
<blockquote>
<p>&ldquo;调试程序是程序员最大的耻辱&rdquo; &ndash; CTO</p>
</blockquote>
<h2 id="写了-log-并且出错的程序">写了 log 并且出错的程序</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;multiple&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be send when invoke the method sendMessage&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;top&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">value</span><span class="o">:</span> <span class="nb">window</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;postMessage&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">value</span><span class="o">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">top</span><span class="o">?</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sendMessage</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">top</span><span class="o">?</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">).</span><span class="nx">toBeCalledTimes</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<p>运行输出</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">mockConstructor</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">_isMockFunction</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getMockImplementation</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mock</span><span class="o">:</span> <span class="p">[</span><span class="nx">Getter</span><span class="o">/</span><span class="nx">Setter</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockClear</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReset</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRestore</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockResolvedValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRejectedValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockResolvedValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRejectedValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockImplementationOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockImplementation</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnThis</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockName</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getMockName</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">__test__</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">ts</span><span class="o">:</span><span class="mi">16</span><span class="o">:</span><span class="mi">13</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">mockConstructor</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">_isMockFunction</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getMockImplementation</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mock</span><span class="o">:</span> <span class="p">[</span><span class="nx">Getter</span><span class="o">/</span><span class="nx">Setter</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockClear</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReset</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRestore</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockResolvedValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRejectedValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockResolvedValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRejectedValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockImplementationOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockImplementation</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnThis</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockName</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getMockName</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">__test__</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">ts</span><span class="o">:</span><span class="mi">18</span><span class="o">:</span><span class="mi">13</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nx">FAIL</span>  <span class="nx">__test__</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">ts</span>
</span></span><span class="line"><span class="cl">  <span class="nx">multiple</span>
</span></span><span class="line"><span class="cl">    <span class="err">✕</span> <span class="nx">should</span> <span class="nx">be</span> <span class="nx">send</span> <span class="nx">when</span> <span class="nx">invoke</span> <span class="nx">the</span> <span class="nx">method</span> <span class="nx">sendMessage</span> <span class="p">(</span><span class="mi">12</span> <span class="nx">ms</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="err">●</span> <span class="nx">multiple</span> <span class="err">›</span> <span class="nx">should</span> <span class="nx">be</span> <span class="nx">send</span> <span class="nx">when</span> <span class="nx">invoke</span> <span class="nx">the</span> <span class="nx">method</span> <span class="nx">sendMessage</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()).</span><span class="nx">toBeCalledTimes</span><span class="p">(</span><span class="nx">expected</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">Expected</span> <span class="nx">number</span> <span class="k">of</span> <span class="nx">calls</span><span class="o">:</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Received</span> <span class="nx">number</span> <span class="k">of</span> <span class="nx">calls</span><span class="o">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="mi">17</span> <span class="o">|</span>     <span class="nx">sendMessage</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="mi">18</span> <span class="o">|</span>     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">top</span><span class="o">?</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">&gt;</span> <span class="mi">19</span> <span class="o">|</span>     <span class="nx">expect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">).</span><span class="nx">toBeCalledTimes</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="o">|</span>                                       <span class="o">^</span>
</span></span><span class="line"><span class="cl">      <span class="mi">20</span> <span class="o">|</span>   <span class="p">})</span>
</span></span><span class="line"><span class="cl">      <span class="mi">21</span> <span class="o">|</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">__test__</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">ts</span><span class="o">:</span><span class="mi">19</span><span class="o">:</span><span class="mi">39</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">at</span> <span class="nx">processTicksAndRejections</span> <span class="p">(</span><span class="nx">node</span><span class="o">:</span><span class="nx">internal</span><span class="o">/</span><span class="nx">process</span><span class="o">/</span><span class="nx">task_queues</span><span class="o">:</span><span class="mi">96</span><span class="o">:</span><span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Test</span> <span class="nx">Suites</span><span class="o">:</span> <span class="mi">1</span> <span class="nx">failed</span><span class="p">,</span> <span class="mi">1</span> <span class="nx">total</span>
</span></span><span class="line"><span class="cl"><span class="nx">Tests</span><span class="o">:</span>       <span class="mi">1</span> <span class="nx">failed</span><span class="p">,</span> <span class="mi">1</span> <span class="nx">total</span>
</span></span><span class="line"><span class="cl"><span class="nx">Snapshots</span><span class="o">:</span>   <span class="mi">0</span> <span class="nx">total</span>
</span></span><span class="line"><span class="cl"><span class="nx">Time</span><span class="o">:</span>        <span class="mf">1.077</span> <span class="nx">s</span>
</span></span><span class="line"><span class="cl"><span class="nx">Ran</span> <span class="nx">all</span> <span class="nx">test</span> <span class="nx">suites</span> <span class="nx">matching</span> <span class="o">/</span><span class="err">\</span><span class="o">/</span><span class="nx">Users</span><span class="err">\</span><span class="o">/</span><span class="nx">zhongren</span><span class="err">\</span><span class="p">.</span><span class="nx">gu</span><span class="err">\</span><span class="o">/</span><span class="mi">01</span><span class="err">\</span><span class="p">.</span><span class="nx">Project</span><span class="err">\</span><span class="o">/</span><span class="nx">test</span><span class="o">-</span><span class="nb">window</span><span class="o">-</span><span class="nx">object</span><span class="err">\</span><span class="o">/</span><span class="nx">__test__</span><span class="err">\</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="err">\</span><span class="p">.</span><span class="nx">spec</span><span class="err">\</span><span class="p">.</span><span class="nx">ts</span><span class="o">/</span><span class="nx">i</span> <span class="kd">with</span> <span class="nx">tests</span> <span class="nx">matching</span> <span class="s2">&#34;multiple should be send when invoke the method sendMessage&#34;</span><span class="p">.</span></span></span></code></pre></div></div>
<h2 id="在测试中写-log-有什么用">在测试中写 log 有什么用？</h2>
<blockquote>
<p>本文所说的测试中写的 Log 是提交到代码仓库中的日志。</p>
</blockquote>
<p>看了上面的测试和 UT 运行后的结果，你有什么看法？</p>
<p>在我看来，有以下几点：</p>
<h3 id="影响总体的测试输出">影响总体的测试输出</h3>
<p>如果测试中存在很多的 log，并且有部分测试会失败，当你找失败的测试的时候就会变得非常困难，会被log 迷惑。测试结果列表不是那么整齐，给人以测试混乱，不够整洁的感觉，影响开发体验。</p>
<h3 id="日志对测试运行的成败没有任何好处">日志对测试运行的成败没有任何好处</h3>
<p>测试在运行失败后，会自动打印出真实值（Received）和 期望值（Expected), 对于优秀的程序员，大家都用 TDD 开发，按照 TDD 的套路，程序的期望值是已知的；如果测试失败，你应该修改你的产品代码，让你的产品代码的输出符合你测试的期望值; 而不是在你的测试代码中调试，打 log。</p>
<p>如果在测试中打印了 Log，程序员最多在测试日志中看看某个变量的值，对生产代码没有任何影响; 同时你还得花时间去找你想要的日志，纯属浪费时间。</p>
<p>如果真的需要看测试的某个变量或者看生产代码中某行代码的运行时值，通过调试你的测试代码，在你的生产代码中打断点即可，完全没有必要将测试中的日志永久的留在代码库中。</p>
<h2 id="生产代码中的日志被测试打印出来可以吗">生产代码中的日志被测试打印出来，可以吗？</h2>
<p>不行。没有意义。</p>
<p>运行测试，我们只想知道所有测试是否成功，至于中间打印出生产代码中的日志也没有意义。
如果测试失败，只需要 Fix 对应的测试即可, 无论什么方法。</p>
<h2 id="解决方案">解决方案</h2>
<p>如果真的需要在测试时调试代码，可以加 <code>debug</code> 级别的调试代码，这样就可以通过日志来调试了，但还是需要通过其他的方式，比如 <code>eslint</code> 来限制将 <code>debug</code> 日志提交到 Repo 中。</p>
<p>怎么让测试的输出中不输出 log 信息呢？</p>
<ul>
<li>
<p>对于前端，我们可以在所有测试运行前 Spy <code>console.*</code>的所有的方法，</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;log&#39;</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;info&#39;</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;warn&#39;</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;error&#39;</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">();</span></span></span></code></pre></div></div>
<p>这段代码需要写在 <code>tests/jest-setup.[t|j]s</code> 中。</p>
</li>
<li>
<p>或者使用第三方成熟的 npm 包， 像 <a href="https://www.npmjs.com/package/jest-mock-console" target="_blank" rel="noopener noreffer ">jest-mock-console</a>, 这个包功能更强大一点。</p>
</li>
</ul>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客: https://guzhongren.github.io/</a></li>
<li><a href="http://github.yanhaixiang.com/jest-tutorial/basic/mock-timer/#mock-logger" target="_blank" rel="noopener noreffer ">Mock logger in jest: http://github.yanhaixiang.com/jest-tutorial/basic/mock-timer/#mock-logger</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item></channel></rss>