<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Engineering - 分类 - 谷中仁的博客</title><link>https://guzhongren.github.io/categories/engineering/</link><description>Engineering - 分类 - 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>guzhongren@live.cn (谷中仁)</managingEditor><webMaster>guzhongren@live.cn (谷中仁)</webMaster><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 11 Feb 2025 22:31:58 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/categories/engineering/" rel="self" type="application/rss+xml"/><item><title>本地跑deepseek 7b模型</title><link>https://guzhongren.github.io/2025/02/%E6%9C%AC%E5%9C%B0%E8%B7%91deepseek-7b%E6%A8%A1%E5%9E%8B/</link><pubDate>Tue, 11 Feb 2025 22:31:58 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2025/02/%E6%9C%AC%E5%9C%B0%E8%B7%91deepseek-7b%E6%A8%A1%E5%9E%8B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="背景">背景</h2>
<p>最近，Deepseek 因其卓越的性能和高效的推理速度在技术圈内引起了广泛关注。</p>
<p>Deepseek 采用了先进的算法(使用汇编和 CUDA 混编的方式调用 GPU)和训练方法(蒸馏)，不仅显著提升了推理速度，还降低了对硬件配置的要求，使其能够在更多设备上运行。</p>
<p>然而，使用在线 Deepseek 服务时，用户可能会遇到“服务器繁忙，请稍后再试”的问题。</p>
<p>作为程序员，我们自然不能忍受这种情况，因此本文将指导你如何在本地搭建 Deepseek 模型。</p>
<h2 id="搭建步骤">搭建步骤</h2>
<h3 id="所需软件及环境">所需软件及环境</h3>
<h4 id="环境">环境</h4>
<ul>
<li><strong>操作系统</strong>: MacOS M1 (Sequoia [Version 15.3])</li>
</ul>
<h4 id="软件">软件</h4>
<ul>
<li><strong><a href="https://ollama.com/" target="_blank" rel="noopener noreffer ">Ollama</a></strong>: 用于管理和运行大模型。</li>
<li><strong><a href="https://chatboxai.app/" target="_blank" rel="noopener noreffer ">Chatbox AI</a></strong>: 提供与大模型交互的界面。</li>
</ul>
<h3 id="安装步骤">安装步骤</h3>
<h4 id="安装-ollama">安装 Ollama</h4>
<p>Ollama 可以通过命令行或手动下载安装包进行安装。手动安装后，系统会自动启动 Ollama 服务；而通过命令行安装后，则需要手动启动服务。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">brew install ollama
</span></span><span class="line"><span class="cl"><span class="c1"># 安装完成后，启动 Ollama 服务</span>
</span></span><span class="line"><span class="cl">ollama serve</span></span></code></pre></div></div>
<h4 id="运行-deepseek模型">运行 deepseek模型</h4>
<ol>
<li>访问 Ollama 模型库，搜索 deepseek。</li>
<li>选择 deepseek-r1 模型，并选择 7b 版本。</li>
<li>点击复制按钮，将命令行粘贴到终端中运行。Ollama 将自动拉取并启动该模型。</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ollama run deepseek-r1:7b</span></span></code></pre></div></div>
<h4 id="安装-chatbox">安装 Chatbox</h4>
<p>Chatbox 是与大模型进行交互的界面。你可以选择直接安装软件或通过 Docker 运行。推荐使用软件安装，以便快速启动和操作。</p>
<p>可安装软件或者通过docker 运行，推荐软件安装，可以快速启动软件来提速。</p>
<h4 id="配置">配置</h4>
<p>Chatbox 安装完成并且 deepseek 大模型运行起来后，在 Chatbox -&gt; Settings 中选择本地启动的模型即可。</p>
<h2 id="总结">总结</h2>
<p>随着人工智能技术的快速发展，社会分工可能会发生显著变化, 最明显的是人工智能会淘汰掉社会分工的中间层。</p>
<p>未来的趋势可能是：要么成为顶层的规则设计者，要么成为底层的实践者。通过本地搭建和运行 Deepseek 模型，我们不仅能够避免在线服务的限制，还能更深入地理解和掌握这一前沿技术。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
<li><a href="https://www.deepseek.com/" target="_blank" rel="noopener noreffer ">Deepseek:https://www.deepseek.com/</a></li>
<li><a href="https://ollama.com/" target="_blank" rel="noopener noreffer ">Ollama:https://ollama.com/</a></li>
<li><a href="https://chatboxai.app/" target="_blank" rel="noopener noreffer ">Chatbox AI:https://chatboxai.app/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>使用 setuptools 工具搭建 Python 工程</title><link>https://guzhongren.github.io/2023/10/%E4%BD%BF%E7%94%A8setuptools%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BApython%E5%B7%A5%E7%A8%8B/</link><pubDate>Fri, 13 Oct 2023 21:26:15 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2023/10/%E4%BD%BF%E7%94%A8setuptools%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BApython%E5%B7%A5%E7%A8%8B/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><p>最近运维项目上要使用Pyspark进行报告生成，嗯，是的，运维项目的技术栈永远是你想象不到的。</p>
<p>有活就干，这形势只能“狗着”。</p>
<p>技术栈是Python, 硅基生命时代的基础之一； 工程化管理工具是<a href="https://setuptools.pypa.io/en/latest/userguide/index.html" target="_blank" rel="noopener noreffer ">setuptools</a>, 嗯，对我来说是新工具，在工作的8年里，第一次听说这个。这次的重点就是利用它来构建一个模块化的工程。 相对于前端架构而言，其就相当于 <code>package.json</code>。</p>
<h2 id="期望">期望</h2>
<p>基于 setuptools 产出一个模块化的工程，高级模块要依赖通用模块(commons)。</p>
<h2 id="工具介绍">工具介绍</h2>
<p>按照 setuptools 官网介绍，我们需要更新最新的 setuptools，安装 <code>build</code> 和 <code>whell</code>, 依赖管理会在 setuptools 的 <code>install_requires</code> 中体现，如下;</p>
<blockquote>
<p>pip 最好是 pip3, Python 最好是最新版的 Python3。</p>
</blockquote>
<h2 id="代码实践">代码实践</h2>
<h3 id="虚拟环境">虚拟环境</h3>
<p>在 Python 工程中，虚拟环境是一个非常重要的概念。 你可以随时创建纯净的虚拟环境开始你的（已有/新的）工程。 最简单的好处就是不会在系统级别相互影响。</p>
<p>在我们这个示例中，最简单的好处就是生成的包不会影响系统中已有的包。退出虚拟环境后，在虚拟环境中安装的包不会在系统中出现。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 在你合适的位置创建目录管理 Python 虚拟环境</span>
</span></span><span class="line"><span class="cl">mkdir myenv
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> myenv
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 Python 自带的 venv 来创建全新的虚拟环境</span>
</span></span><span class="line"><span class="cl">python3 -m venv myenv
</span></span><span class="line"><span class="cl"><span class="c1"># 激活当前环境，然后就可以切换目录到工程目录进行编码了</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> bin/activate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 退出当前虚拟环境</span>
</span></span><span class="line"><span class="cl">deactivate</span></span></code></pre></div></div>
<h3 id="setuptools">setuptools</h3>
<p>setuptools 是 Python 官方的工程构建工具。 其可以打包项目、打包 lib等。有三种配置格式， 分别为<code>pyproject.toml</code>、 <code>setup.cfg</code> 和 <code>setup.py</code>, 竟然不支持 yaml 语法。 官方不推荐 <code>setup.py</code> 这种形式，但其可读性真的好啊，因为我不是很喜欢 <code>toml</code>。</p>
<h3 id="目标工程">目标工程</h3>
<h4 id="文件结构">文件结构</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">tree -L <span class="m">3</span>
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── LICENSE
</span></span><span class="line"><span class="cl">├── setup.py
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── commons
</span></span><span class="line"><span class="cl">│   │   └── __init__.py
</span></span><span class="line"><span class="cl">│   ├── module1
</span></span><span class="line"><span class="cl">│   │   ├── __init__.py
</span></span><span class="line"><span class="cl">│   │   └── __main__.py
</span></span><span class="line"><span class="cl">│   └── timmins
</span></span><span class="line"><span class="cl">│       ├── __init__.py
</span></span><span class="line"><span class="cl">│       └── __main__.py
</span></span><span class="line"><span class="cl">└── tests
</span></span><span class="line"><span class="cl">    └── test.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">6</span> directories, <span class="m">8</span> files</span></span></code></pre></div></div>
<h3 id="setuppy">setup.py</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">setup</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span><span class="o">=</span><span class="s1">&#39;zhongren&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">version</span><span class="o">=</span><span class="s1">&#39;0.1.1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">entry_points</span><span class="o">=</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;console_scripts&#39;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;hello-world = timmins:hello_world&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;module = module1:say_hello&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="n">install_requires</span><span class="o">=</span><span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;build&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;wheel&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></div></div>
<p>这个文件主要描述了工程的名字和版本，最重要的是 <code>entry_points</code> 和 <code>install_requires</code>。</p>
<ul>
<li><code>entry_points</code> 数组中的每一条记录都会被打包成一个可执行程序，在这里将会产生 <code>hell-world</code>和 <code>module</code> 两个可执行程序。</li>
<li><code>install_requires</code> 指定依赖的第三方库，这里不指定版本，使用最新版。</li>
</ul>
<h5 id="commons">commons</h5>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __init.py</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">something</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;commons say: &#34;</span> <span class="o">+</span> <span class="n">something</span><span class="p">)</span></span></span></code></pre></div></div>
<p><code>commons</code> 是项目公共方法，供高层模块调用。</p>
<h5 id="module1">module1</h5>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __init__.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">commons</span> <span class="kn">import</span> <span class="n">say</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">say_hello</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">say</span><span class="p">(</span><span class="s1">&#39;zhongren world&#39;</span><span class="p">)</span></span></span></code></pre></div></div>
<p>在 <code>__init__.py</code> 中，我们通过加载指定的绝对路径的方法，调用了 commons 模块中的 say 方法，实现了 <code>低耦合</code>。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __main__.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">say_hello</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">say_hello</span><span class="p">()</span></span></span></code></pre></div></div>
<p>在同样的工程下面，为什么还要有 <code>__main__.py</code>呢？</p>
<p>因为我们要将工程打包，并生成多个模块，在这里是模块 <code>module1</code>
和 <code>timmins</code>；并在模块中调用了底层模块的 <code>say</code> 方法。并且这部分会是可运行程序的<code>入口</code>。</p>
<h5 id="timmins">timmins</h5>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __init__.py</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello world&#34;</span><span class="p">)</span></span></span></code></pre></div></div>
<p>此模块只是暴露方法出去，相当于 lib。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># __main__.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">hello_world</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello_world</span><span class="p">()</span></span></span></code></pre></div></div>
<p>此模块和 module1 的功能相同，只是调用了自己目录下 <code>Lib</code> 的方法。</p>
<h4 id="构建">构建</h4>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python setup.py install
</span></span><span class="line"><span class="cl">......
</span></span><span class="line"><span class="cl">Processing zhongren-0.1.1-py3.11.egg
</span></span><span class="line"><span class="cl">Removing /usr/local/lib/python3.11/site-packages/zhongren-0.1.1-py3.11.egg
</span></span><span class="line"><span class="cl">Copying zhongren-0.1.1-py3.11.egg to /usr/local/lib/python3.11/site-packages
</span></span><span class="line"><span class="cl">Adding zhongren 0.1.1 to easy-install.pth file
</span></span><span class="line"><span class="cl">Installing hello-world script to /usr/local/bin
</span></span><span class="line"><span class="cl">Installing module script to /usr/local/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Installed /usr/local/lib/python3.11/site-packages/zhongren-0.1.1-py3.11.egg
</span></span><span class="line"><span class="cl">Processing dependencies <span class="k">for</span> <span class="nv">zhongren</span><span class="o">==</span>0.1.1
</span></span><span class="line"><span class="cl">Finished processing dependencies <span class="k">for</span> <span class="nv">zhongren</span><span class="o">==</span>0.1.1</span></span></code></pre></div></div>
<p>按照提示，打包后的模块已经被安装在了 <code>/usr/local/bin</code> 中了。我们可以使用两种方式进行验证。</p>
<ol>
<li>CMD</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">module
</span></span><span class="line"><span class="cl">&gt; commons say: zhongren world
</span></span><span class="line"><span class="cl">hello-world
</span></span><span class="line"><span class="cl">&gt; Hello world</span></span></code></pre></div></div>
<p>可以看到两个 <code>entry_points</code> 模块运行后的输出和我们在程序中定义的一致。</p>
<ol start="2">
<li>测试</li>
</ol>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-python">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># test.py</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">timmins</span> <span class="kn">import</span> <span class="n">hello_world</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">module1</span> <span class="kn">import</span> <span class="n">say_hello</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">hello_world</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">say_hello</span><span class="p">()</span></span></span></code></pre></div></div>
<p>通过执行<code>python3 test</code>, 输出如下</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python3 tests/test.py
</span></span><span class="line"><span class="cl">&gt; Hello world
</span></span><span class="line"><span class="cl">&gt; commons say: zhongren world</span></span></code></pre></div></div>
<h4 id="wheel-构建">wheel 构建</h4>
<p>我们最终想要的肯定是一个可以部署的包（package）,在 Python 里，通常使用 <code>.whl</code> wheel 包来分享或者部署。</p>
<h5 id="打包-whl-包">打包 whl 包</h5>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">python3 setup.py bdist_wheel
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">running bdist_wheel
</span></span><span class="line"><span class="cl">running build
</span></span><span class="line"><span class="cl">running build_py
</span></span><span class="line"><span class="cl">......
</span></span><span class="line"><span class="cl">running install_scripts
</span></span><span class="line"><span class="cl">creating build/bdist.macosx-13-x86_64/wheel/zhongren-0.1.1.dist-info/WHEEL
</span></span><span class="line"><span class="cl">creating <span class="s1">&#39;dist/zhongren-0.1.1-py3-none-any.whl&#39;</span> and adding <span class="s1">&#39;build/bdist.macosx-13-x86_64/wheel&#39;</span> to it
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;commons/__init__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;module1/__init__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;module1/__main__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;timmins/__init__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;timmins/__main__.py&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/LICENSE&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/METADATA&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/WHEEL&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/entry_points.txt&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/top_level.txt&#39;</span>
</span></span><span class="line"><span class="cl">adding <span class="s1">&#39;zhongren-0.1.1.dist-info/RECORD&#39;</span>
</span></span><span class="line"><span class="cl">removing build/bdist.macosx-13-x86_64/wheel</span></span></code></pre></div></div>
<p>可以看到 <code>zhongren-0.1.1-py3-none-any.whl</code> 在 <code>dist</code> 目录下被成功构建。</p>
<p>同样，可以使用安装命令来测试安装, 并用上面的<code>python3 tests/test.py</code> 来验证。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">pip3 install dist/zhongren-0.1.1-py3-none-any.whl
</span></span><span class="line"><span class="cl">Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
</span></span><span class="line"><span class="cl">Processing ./dist/zhongren-0.1.1-py3-none-any.whl
</span></span><span class="line"><span class="cl">Installing collected packages: zhongren
</span></span><span class="line"><span class="cl">Successfully installed zhongren-0.1.1</span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<p>学习最佳实践，可以节约时间，同时，也是真爱生命。</p>
<p>项目工程地址: <a href="https://github.com/beef-noodles/py-project" target="_blank" rel="noopener noreffer ">https://github.com/beef-noodles/py-project</a></p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
<li><a href="https://setuptools.pypa.io/en/latest/userguide/index.html" target="_blank" rel="noopener noreffer ">setuptools: https://setuptools.pypa.io/en/latest/userguide/index.html</a></li>
<li><a href="https://www.delftstack.com/howto/python/python-import-from-parent-directory/" target="_blank" rel="noopener noreffer ">Import Modules From Parent Directory in Python: https://www.delftstack.com/howto/python/python-import-from-parent-directory/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>Some Good Practices of Logging</title><link>https://guzhongren.github.io/2022/08/some-good-practices-of-logging/</link><pubDate>Fri, 05 Aug 2022 09:33:24 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/08/some-good-practices-of-logging/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Software-Engineering/Observability/Logging/logging.25uhyh14zi2o.webp" referrerpolicy="no-referrer">
            </div><h2 id="introduction">Introduction</h2>
<p>Logging is structured or unstructured text information generated by the system during operation. Usually, it can be regarded as a record of an event by the application. Logging can often help us discover unexpected behaviors in systems, especially in some microservice architecture systems. As an important part of Observability, Logging plays an irreplaceable role in our system development and maintenance.</p>

<h2 id="the-importance-of-logging">The importance of logging</h2>
<p>To understand why logging plays an important role in products or systems, we must understand its value. Currently, the most widely used logging forms are <strong>alerting</strong>, <strong>troubleshooting</strong>, and <strong>business data visualization</strong>.</p>
<h3 id="alerting">Alerting</h3>
<p>Logging can be used as an important data source for our business system monitoring; mature product systems have alarm systems. If there is a problem exceeding a certain defined indicator in the system, the log system will automatically send the alarm information to the notification platform. The On-call people can locate and solve the problem according to the alarm information.</p>
<h3 id="troubleshooting">Troubleshooting</h3>
<p>Imagine that the system you are responsible for developing and maintaining is found to be faulty. What is the first thing you should do? Check the system information to verify that it’s true. The log printed on the server  is the best auxiliary information. As programmers, logs are the most familiar tool for solving problems.</p>
<h3 id="business-data-visualization">Business Data Visualization</h3>
<p>Many companies can use the logs of the production environment stored in their own databases to visualize business data in combination with the corresponding tools such as <strong>Grafana</strong> and <strong>SumoLogic</strong>.</p>
<h2 id="logging-how-to">Logging how-to</h2>
<h3 id="templating">Templating</h3>
<p>It’s necessary to sort out our log format and write logs according to certain specifications.
</p>
<ul>
<li>
<p>Basic template</p>
<ul>
<li>At minimum, qualified logs should have the following information: time, log level, and log information.</li>
</ul>
</li>
<li>
<p>Advanced Template
Add thread name, hostname, method name, class name, and the number of lines corresponding to the method;</p>
<ul>
<li>Thread Name: Most applications don’t have a single user. For a single-instance service, many users accessing the same interface will execute the application in different threads. So using the thread name is best to differentiate the business process of corresponding users.</li>
<li>Hostname: Most current applications are deployed in the cloud with multiple instances, so on the basis of a single node, the logging needs to be distinguished at the instance level on multiple instances, and the hostname is the best way to differentiate.</li>
<li>Method Name: A convenient way to differentiate the source within the same log.</li>
<li>Class Name:  A convenient way to quickly locate the business process.</li>
<li>Number of lines: A quick way to find the specific location of the log.</li>
</ul>
</li>
</ul>
<h3 id="formatting">Formatting</h3>
<p>To improve the readability of the log, we can focus on formatting.</p>
<ul>
<li>Put <strong>square brackets</strong> around the log level, host name, and thread name;</li>
<li>Add <strong>parentheses</strong> to the class name and line number where the method name is located, and separate the class name and line number with a colon;</li>
<li>Add a <strong>horizontal line</strong> between the line number and log information;
Specific formatting is also possible for log information:</li>
<li>For regular requests, response or other business logs, you can separate custom information and parameters with an <strong>underscore</strong>; multiple parameters are separated by <strong>commas</strong>;</li>
<li>For error message formatting, you can use <strong>Key:Value</strong>.</li>
</ul>
<h3 id="chain-tracking">Chain-Tracking</h3>
<p>If the recorded log is just a simple text description line by line, it’ll be hard to read. In a complex system or a system with frequent business operations, there will be multiple logs and we’ll have to spend time filtering out the relevant logs. The best way to solve this problem is through chain tracking of logs: putting one or more unique IDs in the business system that are added to each log, so that when locating business problems, we can quickly filter out the relevant logs through these unique IDs and Other criteria (e.g. time).</p>
<h3 id="logging-on-demand">Logging on demand</h3>
<h4 id="log-level">Log level</h4>

<p>The output of the log is divided into levels.Different scenarios need to print different levels of logs.</p>
<ul>
<li>Debug: Record technical details and logs to help understand the system operation;</li>
<li>Info: Record business information;</li>
<li>Warn: Acceptable error messages that are manageable and not urgent;</li>
<li>Error: Unexpected errors or system behavior, usually caused by system bugs or environmental problems.</li>
</ul>
<p>At the same time, not all logs need to be recorded, we need to record as needed. The following table shows which logs should be recorded depending on the environment.</p>
<table>
  <thead>
      <tr>
          <th>Environment</th>
          <th>Log Leave</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Dev</td>
          <td>Debug</td>
      </tr>
      <tr>
          <td>Test</td>
          <td>Debug</td>
      </tr>
      <tr>
          <td>UAT</td>
          <td>Info</td>
      </tr>
      <tr>
          <td>Prod</td>
          <td>Info</td>
      </tr>
  </tbody>
</table>
<h4 id="logging-position">Logging position</h4>
<p>The location of the log print also needs to be made clear.</p>
<ul>
<li>When other systems call their own systems, they need to print the log once each when they receive a request and when the request is completed;</li>
<li>The log is printed once before the self-hosted system calls the interface of the third-party system and after receiving the response;</li>
<li>The log needs to be printed in any abnormal place in the system.</li>
</ul>
<h2 id="tool-recommendation">Tool recommendation</h2>
<p>Different programming languages have different logging tools; the most famous is Apache&rsquo;s <a href="https://logging.apache.org/log4j" target="_blank" rel="noopener noreffer ">Log4j</a>, which is highly configurable and can be configured via external files at runtime. It is based on logging priority and provides mechanisms to instruct logging information to many destinations such as database, file, console, UNIX system log, etc.; log4j has been ported to other programming languages, such as <a href="https://docs.python.org/3/library/logging.html" target="_blank" rel="noopener noreffer ">logging</a> in Python, <a href="https://www.npmjs.com/package/log4js" target="_blank" rel="noopener noreffer ">log4js</a> in NodeJS, <a href="https://crates.io/crates/log4rs" target="_blank" rel="noopener noreffer ">log4rs</a> in Rust.</p>
<h2 id="tips">Tips</h2>
<p>Avoid printing or recording any sensitive information, including but not limited to various <strong>PII</strong>, <strong>PCI</strong> information. Remember to obey local laws and regulations, such as China&rsquo;s <strong>PILI</strong> (Personal Information Protection Law) or Europe’s <strong>GDPR</strong> (General Data Protection Regulation). Choose the appropriate log level and log position as needed.
……</p>
<h2 id="summary">Summary</h2>
<p>A good log can not only facilitate program development and provide the most important auxiliary information for troubleshooting, it also gives optimization suggestions or data statistics for business or infrastructure.</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://guzhongren.github.io/" target="_blank" rel="noopener noreffer ">博客:https://guzhongren.github.io/</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item><item><title>日志记录的最佳实践</title><link>https://guzhongren.github.io/2022/07/%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Sun, 10 Jul 2022 12:01:50 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/07/%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://cdn.jsdelivr.net/gh/guzhongren/picx-images-hosting@master/Software-Engineering/Observability/Logging/logging.25uhyh14zi2o.webp" referrerpolicy="no-referrer">
            </div><h2 id="简介">简介</h2>
<p>日志（Log）是由系统在运行过程中产生的结构化或者非结构化的文字信息。通常情况，可以将其视为应用程序对某个事件（Event）的记录。日志通常可以帮助我们发现一些微服务架构系统的非预期或突发的行为。
Logging作为 Observability的重要组成部分，在我们的系统开发、维护中起到无法替代的作用。</p>

<h2 id="日志的重要性">日志的重要性</h2>
<p>要理解为什么日志在产品或者系统中扮演着重要的角色，我们必须了解它的价值。至少到现在，日志被应用最广泛的是<strong>报警</strong>、<strong>故障排除</strong>和<strong>业务数据可视化</strong>。</p>
<h3 id="报警">报警</h3>
<p>日志可以作为我们业务系统监控的重要数据来源；成熟的产品系统都有报警系统，如果系统中出现超过某个已定义的某个指标的问题，日志系统会自动将报警信息发送到通知平台，On-call 的人就可以根据报警信息定位解决问题了。
</p>
<h3 id="故障排除">故障排除</h3>
<p>这种情况非常普遍；想象一下你最近负责开发维护的系统被他人发现有问题，在你梳理完思路之后第一件事是干什么？ 肯定是查看系统信息验证自己的假设是否成立， 这里打印在服务器上的日志就是最好的辅助信息。而作为程序员的我们，日志是我们最熟悉不过的解决问题的利器。
</p>
<h3 id="业务数据可视化">业务数据可视化</h3>
<p>很多公司可以利用存储在自己数据库里的生产环境的日志，结合相应的工具可以对业务进行业务数据可视化。这里最典型的代表是 Grafana 和 SumoLogic。
</p>

<h2 id="怎么做">怎么做</h2>
<h3 id="模版化">模版化</h3>
<p>为了更好的支持上面的各种情况，我们需要对我们的日志格式进行梳理，按照一定的规范来写日志，而不是随便写一句废话。
</p>
<ul>
<li>基础版本
<ul>
<li>对于日志，<strong>时间</strong>，<strong>日志级别</strong>，和<strong>日志信息</strong>最为重要，所以一个合格的日志应该至少包含这些信息。</li>
</ul>
</li>
<li>高级版本
<ul>
<li>在基础版的基础上，加入线程名，方法名，类名，方法对应的行数；</li>
<li><strong>线程名</strong>： 多数应用的用户都不是单一的，对于单实例的服务对同一个接口很多用户访问应用会将在不同的线程中执行，这时如果要区分对应用户的业务流程，那么通过线程名是最好的。</li>
<li><strong>主机名</strong>：现在的应用大都部署在 Cloud 中都是多实例的，所以在单节点的基础上，日志在多实例上就需要实例级别的区分，而主机名是最好的区分方式。</li>
<li><strong>方法名</strong>： 打印了日志的方法名，方便区分相同日志的出处。</li>
<li><strong>类名</strong>： 打印了日志的类名，方便快速定位业务流程。</li>
<li><strong>行数</strong>：打印了日志的行数，方便快速定位日志的具体位置。</li>
</ul>
</li>
</ul>
<h3 id="格式化">格式化</h3>
<p>为了提高日志的可读性，我们可以对日志进行修饰。</p>
<ul>
<li>对日志级别、主机名和线程名前后加<strong>中括号</strong>；</li>
<li>对方法名所在的类名和行号加括号，并在类名与行号中间用<strong>冒号</strong>隔开；</li>
<li>在行号和日志信息中间加入一个<strong>横线</strong>来分割；</li>
<li>对于日志信息也可以进行特定的格式化
<ul>
<li>对于常规的请求（Request）、响应（Response）或者其他业务日志，可以在自定义信息和参数之间用<strong>下划线</strong>分割；多个参数之间用<strong>逗号</strong>分隔，当然参数也是可选的；</li>
<li>对于错误信息格式化，也可以按照 <strong>Key：Value</strong> 的形式进行组织。</li>
</ul>
</li>
</ul>
<h3 id="链式追踪">链式追踪</h3>
<p>记录下了日志，如果只是一行行简单的文字说明，那是没有太大意义的。在复杂系统或业务操作频繁的系统中，会产生非常多的日志，在这种情况下，我们就得花时间去过滤出相关的日志。
解决上面问题的最好办法是日志的<strong>链式追踪</strong>；简单说就是，在每条日志中加入业务系统中的一个或者多个<strong>唯一</strong>的 ID，这样在定位业务问题的时候可以通过这些唯一的 ID 和 其他条件（e.g. 时间）快速过滤出相关的日志。</p>
<h3 id="按需记录日志">按需记录日志</h3>
<h4 id="日志级别">日志级别</h4>

<p>日志的输出都是分级别的，不同的场景需要打印不同级别的日志；以下是几个比较重要的日志级别。</p>
<ul>
<li><strong>Debug</strong>: 记录技术细节，和一些帮助理解系统运行的日志;</li>
<li><strong>Info</strong>: 记录业务信息的日志;</li>
<li><strong>Warn</strong>: 非紧急且可控的可接受的错误信息;</li>
<li><strong>Error</strong>: 非期望的错误或者系统表现，通常是由系统bug或者环境问题导致。</li>
</ul>
<p>同时不是所有的日志都需要记录，我们要做到按需记录。下表是推荐在不同的环境选择不同的日志级别。</p>
<table>
  <thead>
      <tr>
          <th>Environment</th>
          <th>Log Leave</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Dev</td>
          <td>Debug</td>
      </tr>
      <tr>
          <td>Test</td>
          <td>Debug</td>
      </tr>
      <tr>
          <td>UAT</td>
          <td>Info</td>
      </tr>
      <tr>
          <td>Prod</td>
          <td>Info</td>
      </tr>
  </tbody>
</table>
<h4 id="日志位置">日志位置</h4>
<p>有了日志级别，日志打印的位置也需要明确。一般情况下：</p>
<ul>
<li>其他系统调用自有系统时需要在收到请求和完成请求时各打印一次日志；</li>
<li>自有系统调用第三方系统的接口前和收到返回信息后各打印一次日志；</li>
<li>在系统任何有异常的地方需要打印日志；</li>
</ul>
<p>还有一种特殊情况是，像消息传递之类的系统，为了节省日志存储和减少查看干扰，大多时候我们不需要在收到消息后直接打印该消息，一般建议在收到消息后，如果系统处理有异常，在异常中将原始消息打印。</p>
<h2 id="工具推荐">工具推荐</h2>
<p>不同的编程语言有不同的日志工具；比较著名的是 Apache 的 <a href="https://logging.apache.org/log4j" target="_blank" rel="noopener noreffer ">Log4j</a>, Log4j是高度可配置的，并可通过在运行时的外部文件配置。它根据记录的优先级别，并提供机制以指示记录信息到许多的目的地，诸如：数据库，文件，控制台，UNIX系统日志等；而且 log4j 已经被移植到了其他编程语言中了，如 Python 中的 <a href="https://docs.python.org/3/library/logging.html" target="_blank" rel="noopener noreffer ">logging</a>, NodeJS 中的<a href="https://www.npmjs.com/package/log4js" target="_blank" rel="noopener noreffer ">log4js</a>, Rust 中的<a href="https://crates.io/crates/log4rs" target="_blank" rel="noopener noreffer ">log4rs</a>。</p>
<h2 id="注意点">注意点</h2>
<ul>
<li>避免打印或记录任何敏感信息，包括但不限于各种PII，PCI信息，一定要记得遵守当地的各种法律法规，如中国的《个人信息保护法》（PILI）, 欧洲的一般数据保护条例GDPR等</li>
<li>按需选择合适的日志级别和日志位置</li>
<li>&hellip;&hellip;</li>
</ul>
<h2 id="总结">总结</h2>
<p>好的日志不仅可以为程序开发提供便利，为故障排除提供最重要的辅助信息，更可以为业务或基础设施提供优化建议或数据统计。</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://logit.io/blog/post/the-top-21-grafana-dashboards-and-visualisations" target="_blank" rel="noopener noreffer ">THE TOP 25 GRAFANA DASHBOARD EXAMPLES</a></li>
<li><a href="https://grafana.com/" target="_blank" rel="noopener noreffer ">Grafana lab</a></li>
<li><a href="https://www.sumologic.com/" target="_blank" rel="noopener noreffer ">SumoLogic</a></li>
<li><a href="https://logging.apache.org/log4j" target="_blank" rel="noopener noreffer ">Log4j</a></li>
</ul>
<h2 id="免责声明">免责声明</h2>
<p>本文仅代表个人观点，与本人所供职的公司无任何关系。</p>
<hr>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: f2fe1394e4ab9297ed69ff73ac32e9ac1375f01c2102183b509bf9379a5995d6</p>
</blockquote>
<h2 id="赞助">赞助</h2>
<p></p>
<blockquote>
<p><a href="https://emn178.github.io/online-tools/sha256_checksum.html" target="_blank" rel="noopener noreffer ">SHA256</a> checksum: 964978ecd2059064abe542e51dc02e204d3ee2e6c320ca68e2b1399ce0c6953c</p>
</blockquote>
<blockquote>
<p>使用此<a href="https://guzhongren.github.io/images/pay/payforguzhongren.svg.sig" target="_blank" rel="noopener noreffer ">文件</a>进行校验： <code>gpg --verify PayForGuzhongren.svg.sig</code></p>
</blockquote>
]]></description></item></channel></rss>