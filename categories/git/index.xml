<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Git - 分类 - 谷中仁的博客</title><link>https://guzhongren.github.io/categories/git/</link><description>Git - 分类 - 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>guzhongren@live.cn (谷中仁)</managingEditor><webMaster>guzhongren@live.cn (谷中仁)</webMaster><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 17 Aug 2024 07:53:16 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/categories/git/" rel="self" type="application/rss+xml"/><item><title>Git多 user 管理</title><link>https://guzhongren.github.io/2024/08/git%E5%A4%9Auser%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 17 Aug 2024 07:53:16 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2024/08/git%E5%A4%9Auser%E7%AE%A1%E7%90%86/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="痛点">痛点</h2>
<p>平时在一个电脑上会有不同的项目开发，尤其是个人项目和公司项目；</p>
<ul>
<li>通常，我们不希望工作在公司项目上的时候用自己个人的git 信息提交commit, 相反也是一样</li>
<li>在不同目录下，在命令行中切换git config 也是个重复劳动的工作，比较费精力</li>
</ul>
<h2 id="方案">方案</h2>
<h3 id="方案1不同的gitconfig配置">方案1：不同的gitconfig配置</h3>
<p>此方案的实现思路是，git 检测当前目录是否是已经配置的目录，如果是配置的目录，那么就加载对应的gitconfig</p>
<h4 id="步骤">步骤</h4>
<ul>
<li>更新<code>~/.gitconfig</code>, 按需追加并修复如下内容</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-git">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-git" data-lang="git">[includeIf &#34;gitdir:~/01.Project/&#34;]
  path = ~/.gitconfigs/.gitconfig-personal

[includeIf &#34;gitdir:~/04.company/&#34;]
  path = ~/.gitconfigs/.gitconfig-company</code></pre></div>
<ul>
<li>建立相应的目录和文件，如~/.gitconfigs/.gitconfig-personal</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">mkdir -p ~/.gitconfigs1 <span class="o">&amp;&amp;</span> touch ~/.gitconfigs1/.gitconfig-personal</span></span></code></pre></div></div>
<ul>
<li>配置个人信息</li>
</ul>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-git">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-git" data-lang="git">[user]
	email = personal@email.com
	name = personalName
	signingkey = signingkey
[commit]
	gpgsign = true
[init]
	defaultBranch = main
[tag]
	forceSignAnnotated = true
[pull]
	rebase = true
[gpg]
	program = gpg
[core]
	sshCommand = ssh -i ~/.ssh/id_github
	ignorecase = false</code></pre></div>
<p>如上内容根据自己的需求更改即可。</p>
<h3 id="方案2简化git-config-命令">方案2：简化git config 命令</h3>
<h4 id="思路">思路</h4>
<p>使用git alias 执行命令加载不同的配置</p>
<h4 id="步骤-1">步骤</h4>
<ul>
<li>在~/.gitconfig中追加如下配置，并按需更改即可</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-git">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code class="language-git" data-lang="git">
[alias]
  personal = &#34;!f() { git config user.name &#39;personalUserName&#39; &amp;&amp; git config user.email &#39;personal@email.com&#39; &amp;&amp; git config --global user.signingkey KEY; }; f&#34;
  company = &#34;!f() { git config user.name &#39;company&#39; &amp;&amp; git config user.email &#39;company@email.com&#39; &amp;&amp; git config --global user.signingkey KEY; }; f&#34;</code></pre></div>
<ul>
<li>使用时只需要执行一个git alias命令，如下</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-sh">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git company</span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<p>99%的事物皆可自动化！</p>
<p>第一种方案自动化程度更高，更可取。</p>
]]></description></item><item><title>How to Encrypt Git Files</title><link>https://guzhongren.github.io/2020/07/how-to-encrypt-git-files/</link><pubDate>Sun, 12 Jul 2020 11:00:42 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/07/how-to-encrypt-git-files/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://s1.ax1x.com/2020/07/12/U32INn.png" referrerpolicy="no-referrer">
            </div><h2 id="为什么需要-crypt">为什么需要 crypt</h2>
<p>在开发过程中经常会遇到一个问题：</p>
<blockquote>
<p>怎么将敏感数据让特定的人获取到？</p>
</blockquote>
<p>常用的解决方法如下：</p>
<ul>
<li>使用如 AWS 的 KMS, ParameterStore 等服务，给不同的用户以访问该数据的角色；</li>
<li>有专人托管，在需要的时候联系他，由特定方式转发给你，如加密邮件等</li>
</ul>
<h3 id="分析">分析</h3>
<ul>
<li>对于第二种方式，相对简单粗暴，但是不利于管理。</li>
<li>第一种方案，你需要依托第三方服务，你得绝对信任他，相信他是不会出问题的；再者，你的数据管理也需要有特定的规范，不然你都不知道你存储了什么数据，更不知道有哪些数据。</li>
</ul>
<p>针对第一种情况，当我们的数据越来多的时候，我们需要将其状态可控起来，其实就是 <code>date as code</code>, 每次对数据的增删改查，我们都可以有追踪和数据保存。</p>
<h2 id="有哪些方案呢">有哪些方案呢？</h2>
<ul>
<li><a href="https://github.com/AGWA/git-crypt">git-crypt</a><sup>[1]</sup>
</li>
<li><a href="https://github.com/elasticdog/transcrypt">transcrypt</a><sup>[2]</sup>
</li>
</ul>
<p>在这里，我推荐使用 <code>git-crypt</code>, 其特点如下：</p>
<ul>
<li>加密后上传 git，在 git 上保存的是<code>二进制</code>文件；</li>
<li>分发<code>密钥</code>给可信开发人员，进行解密，维护配置文件；</li>
<li>解密后为明文内容，如需上传，不用再进行加密，工具<code>自动</code>（配合<code>git hook</code>) 会生成最新的二进制文件后上传；</li>
<li>由<code>c++</code>编写；</li>
<li>Mac 可以通过<code>brew 等</code>方式下载；</li>
<li>利用了加密工具<code>gpg</code>进行加密处理。</li>
</ul>
<h3 id="gpg">GPG</h3>
<p><img src="https://ruanyifeng.com/blogimg/asset/201307/bg2013071202.png" alt="GPG" /></p>
<p>要了解什么是 GPG，就要先了解 PGP。</p>
<p>1991 年，程序员 Phil Zimmermann 为了避开政府监视，开发了加密软件 PGP。这个软件非常好用，迅速流传开来，成了许多程序员的必备工具。但是，它是商业软件，不能自由使用。所以，自由软件基金会决定，开发一个 PGP 的替代品，取名为 GnuPG。这就是 GPG 的由来。</p>
<p>gpg 可以对密钥的<code>增删改查</code>进行操作，也可以将公钥发送到 pgp 等服务器，让别人搜索到你，具体操作可以参考阮一峰的这片博文 <a href="https://ruanyifeng.com/blog/2013/07/gpg.html">《GPG 入门教程》</a><sup>[3]</sup>
</p>
<h2 id="git-crypt-操作">git-crypt 操作</h2>
<h3 id="安装-gpg-和-git-crypt">安装 gpg 和 git-crypt</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">brew install git-crypt
</span></span><span class="line"><span class="cl">brew install gpg</span></span></code></pre></div></div>
<h3 id="gpg-version">gpg version</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gpg --version
</span></span><span class="line"><span class="cl">gpg <span class="o">(</span>GnuPG<span class="o">)</span> 2.2.19
</span></span><span class="line"><span class="cl">libgcrypt 1.8.5
</span></span><span class="line"><span class="cl">Copyright <span class="o">(</span>C<span class="o">)</span> <span class="m">2019</span> Free Software Foundation, Inc.
</span></span><span class="line"><span class="cl">License GPLv3+: GNU GPL version <span class="m">3</span> or later &lt;https://gnu.org/licenses/gpl.html&gt;
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Home: /Users/c4/.gnupg
</span></span><span class="line"><span class="cl">支持的算法：
</span></span><span class="line"><span class="cl">公钥： RSA, ELG, DSA, ECDH, ECDSA, EDDSA
</span></span><span class="line"><span class="cl">密文： IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
</span></span><span class="line"><span class="cl">    CAMELLIA128, CAMELLIA192, CAMELLIA256
</span></span><span class="line"><span class="cl">散列： SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
</span></span><span class="line"><span class="cl">压缩：  不压缩，ZIP, ZLIB, BZIP2</span></span></code></pre></div></div>
<h3 id="生成-gpg-userid">生成 gpg userId</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gpg --full-generate-key
</span></span><span class="line"><span class="cl">gpg <span class="o">(</span>GnuPG<span class="o">)</span> 2.2.19<span class="p">;</span> Copyright <span class="o">(</span>C<span class="o">)</span> <span class="m">2019</span> Free Software Foundation, Inc.
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">请选择您要使用的密钥类型：
</span></span><span class="line"><span class="cl">   <span class="o">(</span>1<span class="o">)</span> RSA 和 RSA （默认）
</span></span><span class="line"><span class="cl">   <span class="o">(</span>2<span class="o">)</span> DSA 和 Elgamal
</span></span><span class="line"><span class="cl">   <span class="o">(</span>3<span class="o">)</span> DSA（仅用于签名）
</span></span><span class="line"><span class="cl">   <span class="o">(</span>4<span class="o">)</span> RSA（仅用于签名）
</span></span><span class="line"><span class="cl">  <span class="o">(</span>14<span class="o">)</span> Existing key from card
</span></span><span class="line"><span class="cl">您的选择是？
</span></span><span class="line"><span class="cl">RSA 密钥的长度应在 <span class="m">1024</span> 位与 <span class="m">4096</span> 位之间。
</span></span><span class="line"><span class="cl">您想要使用的密钥长度？<span class="o">(</span>2048<span class="o">)</span> <span class="m">4096</span>
</span></span><span class="line"><span class="cl">请求的密钥长度是 <span class="m">4096</span> 位
</span></span><span class="line"><span class="cl">请设定这个密钥的有效期限。
</span></span><span class="line"><span class="cl">         <span class="nv">0</span> <span class="o">=</span> 密钥永不过期
</span></span><span class="line"><span class="cl">      &lt;n&gt;  <span class="o">=</span> 密钥在 n 天后过期
</span></span><span class="line"><span class="cl">      &lt;n&gt;w <span class="o">=</span> 密钥在 n 周后过期
</span></span><span class="line"><span class="cl">      &lt;n&gt;m <span class="o">=</span> 密钥在 n 月后过期
</span></span><span class="line"><span class="cl">      &lt;n&gt;y <span class="o">=</span> 密钥在 n 年后过期
</span></span><span class="line"><span class="cl">密钥的有效期限是？<span class="o">(</span>0<span class="o">)</span>
</span></span><span class="line"><span class="cl">密钥永远不会过期
</span></span><span class="line"><span class="cl">这些内容正确吗？ <span class="o">(</span>y/N<span class="o">)</span> y
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">GnuPG 需要构建用户标识以辨认您的密钥。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">真实姓名： guzhongren
</span></span><span class="line"><span class="cl">电子邮件地址： guzhongren@live.cn
</span></span><span class="line"><span class="cl">注释： guzhongren
</span></span><span class="line"><span class="cl">您选定了此用户标识：
</span></span><span class="line"><span class="cl">    “guzhongren <span class="o">(</span>guzhongren<span class="o">)</span> &lt;guzhongren@live.cn&gt;”
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">更改姓名（N）、注释（C）、电子邮件地址（E）或确定（O）/退出（Q）？ o
</span></span><span class="line"><span class="cl">我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘
</span></span><span class="line"><span class="cl">、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数
</span></span><span class="line"><span class="cl">发生器有更好的机会获得足够的熵。
</span></span><span class="line"><span class="cl">我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘
</span></span><span class="line"><span class="cl">、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数
</span></span><span class="line"><span class="cl">发生器有更好的机会获得足够的熵。
</span></span><span class="line"><span class="cl">gpg: 密钥 25DD25A47AEF036A 被标记为绝对信任
</span></span><span class="line"><span class="cl">gpg: 吊销证书已被存储为‘/Users/c4/.gnupg/openpgp-revocs.d/4FA612D2DB4244E7D64A1C1025DD25A47AEF036A.rev’
</span></span><span class="line"><span class="cl">公钥和私钥已经生成并被签名。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pub   rsa4096 2020-07-11 <span class="o">[</span>SC<span class="o">]</span>
</span></span><span class="line"><span class="cl">      4FA612D2DB4244E7D64A1C1025DD25A47AEF036A
</span></span><span class="line"><span class="cl">uid                      guzhongren <span class="o">(</span>guzhongren<span class="o">)</span> &lt;guzhongren@live.cn&gt;
</span></span><span class="line"><span class="cl">sub   rsa4096 2020-07-11 <span class="o">[</span>E<span class="o">]</span></span></span></code></pre></div></div>
<h3 id="获取-userid">获取 UserID</h3>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gpg --list-secret-keys --keyid-format LONG
</span></span><span class="line"><span class="cl">gpg: 正在检查信任度数据库
</span></span><span class="line"><span class="cl">gpg: 绝对信任密钥 8823E362E95562B8 的公钥未找到
</span></span><span class="line"><span class="cl">gpg: marginals needed: <span class="m">3</span>  completes needed: <span class="m">1</span>  trust model: pgp
</span></span><span class="line"><span class="cl">gpg: 深度：0  有效性：  <span class="m">4</span>  已签名：  <span class="m">0</span>  信任度：0-，0q，0n，0m，0f，4u
</span></span><span class="line"><span class="cl">gpg: 下次信任度数据库检查将于 2022-01-26 进行
</span></span><span class="line"><span class="cl">/Users/c4/.gnupg/pubring.kbx
</span></span><span class="line"><span class="cl">----------------------------
</span></span><span class="line"><span class="cl">sec   rsa4096/25DD25A47AEF036A 2020-07-11 <span class="o">[</span>SC<span class="o">]</span>
</span></span><span class="line"><span class="cl">      4FA612D2DB4244E7D64A1C1025DD25A47AEF036A
</span></span><span class="line"><span class="cl">uid                 <span class="o">[</span> 绝对 <span class="o">]</span> guzhongren <span class="o">(</span>guzhongren<span class="o">)</span> &lt;guzhongren@live.cn&gt;
</span></span><span class="line"><span class="cl">ssb   rsa4096/DCC72940818AB355 2020-07-11 <span class="o">[</span>E<span class="o">]</span></span></span></code></pre></div></div>
<p><code>sec   rsa4096/25DD25A47AEF036A 2020-07-11 [SC]</code> 中 <code>25DD25A47AEF036A</code>就是 gpg userId</p>
<h2 id="git-crypt-操作-1">git-crypt 操作</h2>
<h3 id="初始化">初始化</h3>
<p>进入需要做加密的 git repo 做 git-crypt 初始化操作，并将上面获取到的 gpg userId 添加进去</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git-crypt init
</span></span><span class="line"><span class="cl">git-crypt add-gpg-user 25DD25A47AEF036A</span></span></code></pre></div></div>
<h3 id="加密文件过滤器gitattributes">加密文件过滤器<code>.gitattributes</code></h3>
<p>格式为： * filter=git-crypt diff=git-crypt ；如下，我需要加密<code>secretfile</code>, <code>*.key</code>和<code>secretdir/**</code>, 那么内容如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>secretfile filter=git-crypt diff=git-crypt
*.key filter=git-crypt diff=git-crypt
secretdir/** filter=git-crypt diff=git-crypt</code></pre></div>
<h3 id="清理-config-的-git-缓存">清理 config 的 git 缓存</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git rm -r –cached config</span></span></code></pre></div></div>
<h3 id="添加需要加密的文件和数据">添加需要加密的文件和数据</h3>
<p>在<code>secretdir</code>文件夹下添加 <code>secret.yaml</code>, 并添加如下内容：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">username:password</span></span></span></code></pre></div></div>
<h3 id="上传到-git-仓库">上传到 git 仓库</h3>
<p>此步不用担心你的<code>secret.yaml</code>文件以明文的形式上传，git-crypt 会在 commit 之前将过滤后的数据加密成二进制，所以不用担心在仓库中存储敏感信息。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git add .
</span></span><span class="line"><span class="cl">git commit -m ‘git-crypt’
</span></span><span class="line"><span class="cl">git push</span></span></code></pre></div></div>
<p>如果你去 git 仓库中浏览 secret.yaml 文件，会是一个二进制文件，如图：</p>
<p><img src="https://i.loli.net/2020/07/12/lXVnNw5EbKCcvhe.png" alt="git-crypt.png" /></p>
<h2 id="协作">协作</h2>
<p>与他人协作，别人需要知道对应解密的 key</p>
<h3 id="导出密钥">导出密钥</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git-crypt export-key ~/Desktop/git-crypt.key</span></span></code></pre></div></div>
<p>得到 git-crypt.key 后，将该密钥分发给可信的团队成员，团队成员将仓库 clone 下来后，使用如下命令解密即可</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git-crypt unlock /path/to/git-crypt.key</span></span></code></pre></div></div>
<p>此时，在本地就可以看到加密后的文件内容了。</p>
<h3 id="更新密钥">更新密钥</h3>
<p>因为 git-crypt 没有提供删除或者更新密钥的命令，所以参考了一个 issue: <a href="https://github.com/AGWA/git-crypt/issues/47#issuecomment-492939759;">https://github.com/AGWA/git-crypt/issues/47#issuecomment-492939759;</a><sup>[4]</sup>
 步骤如下：</p>
<ul>
<li>Make a backup (with decrypted files): cp -r . /path/to/backup</li>
<li>Save a list of files that are encrypted: git crypt status | grep -v &rsquo;not encrypted&rsquo; &gt; ../encrypted-files.txt</li>
<li>Make git-crypt forget about itself: rm .git-crypt</li>
<li>Delete the encrypted files: awk &lsquo;{print $2}&rsquo; ../encrypted-files.txt | xargs rm</li>
<li>Commit (at this point you get a repo without git-crypt stuff)</li>
<li>Add git-crypt from scratch (init and add-gpg-user)</li>
<li>Copy the decrypted files from the backup: awk &lsquo;{print $2}&rsquo; ../encrypted-files.txt | while read l; do cp /path/to/backup/$l $l; done</li>
<li>Commit (at this point you are done, but be sure to verify things are properly encrypted before publishing)</li>
</ul>
<p>实践结果：在更新完成之后，协作者需要重新 clone 仓库，然后用新的密钥来解密，对密钥管理者来说操作比较麻烦</p>
<h3 id="总结">总结</h3>
<p>在敏感数据越来越多的时候，作为开发者，我们更应该将所有的数据都<code>as code</code>, 为以后维护提供方便。<code>git-crypt</code>确实是一个比较好的选择。</p>
<p>但是<code>git-crypt</code>有一个最大的缺点：</p>
<ul>
<li>只能添加不能删除 gpg userId, 导致更新密钥会比较麻烦，如果要更新密钥，那么就需要做重置</li>
</ul>
<div class="references">
                <h2>参考</h2>
                <ol><li>git-crypt: <a href="https://github.com/AGWA/git-crypt" rel="noopener noreferrer">https://github.com/AGWA/git-crypt</a></li><li>transcrypt: <a href="https://github.com/elasticdog/transcrypt" rel="noopener noreferrer">https://github.com/elasticdog/transcrypt</a></li><li>《GPG 入门教程》: <a href="https://ruanyifeng.com/blog/2013/07/gpg.html" rel="noopener noreferrer">https://ruanyifeng.com/blog/2013/07/gpg.html</a></li><li>https://github.com/AGWA/git-crypt/issues/47#issuecomment-492939759;: <a href="https://github.com/AGWA/git-crypt/issues/47#issuecomment-492939759;" rel="noopener noreferrer">https://github.com/AGWA/git-crypt/issues/47#issuecomment-492939759;</a></li></ol>
            </div>]]></description></item><item><title>Version Management Strategy</title><link>https://guzhongren.github.io/2020/02/version-management-strategy.zh/</link><pubDate>Sun, 23 Feb 2020 11:11:22 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2020/02/version-management-strategy.zh/</guid><description><![CDATA[<p><img src="https://yqfile.alicdn.com/3b84530723a76268f2a99d3b65b3a354e87fe309.jpeg" alt="Photo by Matheus Natan from Pexels" /></p>
<p>为了开发高质量的软件，我们需要能够跟踪所有更改并在必要时将其撤消。 版本控制系统通过跟踪项目历史记录并帮助合并多人所做的更改来填补这一角色，极大地加快了工作速度，并使我们能够更轻松地发现错误。</p>
<p>此外，得益于这些工具，分布式团队可以畅通合作，使多个人可以同时处理项目的不同部分，然后将其结果合并为一个产品。 让我们仔细看看版本控制系统，git-flow 和 Trunk-based development（基于主干的开发）是如何形成的。</p>
<h2 id="版本控制系统是怎样改变世界的">版本控制系统是怎样改变世界的</h2>
<p>在版本控制系统出现之前，开发人员依靠手动备份项目的先前版本。他们手工复制修改过的文件，以便将多个开发人员的工作合并到同一项目中。
这样的操作花费了大量时间、硬盘空间和 money。</p>
<p>软件的目的是为了更好、更高效的完成工作。<code>工欲善其事必先利其器</code>，那么作为开发者肯定会在产出软件之前对自己的代码进行更有效的管理。</p>
<p>当我们回顾历史时 [1]，我们可以大致区分出三代阶段的控制软件。</p>
<table>
  <thead>
      <tr>
          <th>阶段</th>
          <th>操作</th>
          <th>并发</th>
          <th>存储</th>
          <th>工具</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>1</td>
          <td>单文件</td>
          <td>锁定文件</td>
          <td>集中式</td>
          <td>RCS</td>
      </tr>
      <tr>
          <td>2</td>
          <td>多文件</td>
          <td>提交前 merge</td>
          <td>集中式</td>
          <td>Subversion, CVS</td>
      </tr>
      <tr>
          <td>3</td>
          <td>多文件</td>
          <td>merge 前提交</td>
          <td>分布式</td>
          <td>Git, Mercurial</td>
      </tr>
  </tbody>
</table>
<p>我们注意到随着版本控制系统的成熟，并行处理项目的能力成为了趋势。</p>
<p>最具突破性的更改之一是从锁定文件转变为合并更改。它使开发者能够更有效地工作。
另一个重大改进是引入了分布式系统。 Git 是采用这种理念的首批工具之一。 实际上，它使开源世界得以蓬勃发展。 Git 允许开发人员通过称为分叉的操作复制整个存储库，并引入所需的更改，而不必担心合并冲突。</p>
<p>随后，开发者可以创建一个 PR(Pull request)，以将其更改合并到原始项目中。 如果最初的开发人员对合并其他存储库中的更改不感兴趣，那么他们可以自己将其转换 (Fork) 为单独的项目。 由于没有中央存储的概念，因此一切皆有可能。</p>
<h2 id="git-flow">Git-flow</h2>
<p><img src="https://i.loli.net/2020/02/23/evmkayH8PSZfoCl.png" alt="Git-flow" /></p>
<p>在 Git-flow 开发模型中，你有一个主分支 (master branch)，从主分支创建开发分支 (develop branch)，所有开发工作提交都基于开发分支。<code>主分支和开发分支在 git-flow 的整个生命周期中都是一直存在的。</code></p>
<p>开发人员从该开发分支创建功能分支 (Feature branch) 并对其进行 Coding。完成后，它们将创建 PR。在审查 (Review) PR 过程中，其他开发人员会对更改发表评论，并可能进行讨论，讨论时间也许会很长。</p>
<p>对 PR 评审完成后，PR 将被接受并 merge 到开发分支。 一旦确定开发分支已经成熟到可以发布，就会创建一个单独的分支 (release branch) 来准备最终版本。 该分支的应用程序已经过测试，并且在准备好将其发布给最终用户之前会应用错误修复 (bugfixs)。 完成此操作后，我们会将最终产品合并到主 (master branch) 分支，并打标签 (Tag)。 同时，可以在 develop 分支上继续开发新功能。
Git 流的优点之一是严格控制。仔细查看更改后，只有授权的开发人员才能批准更改。它可以确保代码质量，并有助于尽早消除错误。</p>
<p>但是，你需要记住，这也可能是一个巨大的劣势。它会形成一个瓶颈，从而减慢软件开发速度。如果速度是你的首要考虑，那么这应该是一个严重的问题。单独开发的功能可以创建长期存在的分支，这些分支可能很难与主项目结合。</p>
<p>此外，PR 仅将代码重点放在新代码上。他们只查看新引入的更改，而不是整体查看代码并进行改进。在某些情况下，它们可能会导致过早的优化，因为总有可能实现某些功能以使其更快地执行。</p>
<p>还有，PR 可能会导致<code>权利泛滥</code>，在这种情况下，牵头开发人员实际上会管理每行代码。如果你有经验丰富的开发人员可以信任，他们可以处理，但是你可能会浪费他们的时间和技能。它还可能严重削弱开发人员的动力。</p>
<p>在较大的组织中，PR 也可能会导致办公室政治或者以权谋私的事情发生。</p>
<h3 id="git-flow-的适用情况分析">Git-flow 的适用情况分析</h3>
<h4 id="git-flow-在什么时候最有效">git-flow 在什么时候最有效</h4>
<ul>
<li>当你在运营一个开源项目时</li>
</ul>
<p>这种场景是开源社区，在这里效果最好。 由于每个人都可以做出贡献，因此你希望能够非常严格地访问所有更改。 你希望能够检查每一行代码，坦率地说，你不能相信贡献者。 通常，这些不是商业项目，因此开发速度不是问题。</p>
<ul>
<li>当你有很多初级开发人员的时候</li>
</ul>
<p>如果你主要与初级开发人员一起工作，那么你希望有一种方法来仔细检查他们的工作。 你可以为他们提供更多有关如何更有效地 Coding, 并帮助他们更快地提高编程技能。 接受 PR 的人员对重复发生的更改具有严格的控制权，因此可以防止代码质量下降。</p>
<ul>
<li>当你已经有现成的产品的时候</li>
</ul>
<p>当你已经有成功的产品时，这种方式也可以很好地发挥作用。 在这种情况下，通常将重点放在应用程序性能和负载功能上。 这种优化需要非常精确的更改。 通常，时间不是限制，因此这种控制在这里效果很好，尤其大型企业非常适合这种风格（因为他们不想破坏自己数百万的投资，他们需要严密控制每个变更）。</p>
<h4 id="git-flow-会在什么情况下会有问题">git-flow 会在什么情况下会有问题</h4>
<ul>
<li>当你启动一个新项目时</li>
</ul>
<p>你可能希望快速创建最小可行的产品 (MVP)，提 PR 会产生巨大的瓶颈，这会大大降低整个团队的速度而你负担不起。Git 流程的问题在于，PR 可能会花费很多时间。</p>
<ul>
<li>当你需要快速迭代</li>
</ul>
<p>达到产品的第一个版本后，你很可能需要几次调整以满足你客户的需求。 同样，多个分支和 PR 会极大地降低开发速度，因此不建议这样做。</p>
<ul>
<li>当你与高级开发人员一起工作时</li>
</ul>
<p>如果你的团队主要由相互合作了较长时间的高级开发人员组成，那么你实际上就不需要上述的 PR 。你应该信任你的开发人员，并且知道他们是专业人士，让他们做好自己的工作，不要让所有 Git-Flow 的流程拖慢开发进度。</p>
<h2 id="github-flow">Github-flow</h2>
<p><img src="https://i.loli.net/2020/02/23/obvq1wuliJNczU9.png" alt="github-flow.png" /></p>
<p>Github-flow 是在 git-flow 的基础上衍生而来的。他简化了 git-flow 的复杂模型，并且与 Github 可以很好的结合，在此就不赘述了。</p>
<h2 id="trunk-based-developmenttbd">Trunk-based Development(TBD)</h2>
<p><img src="https://i.loli.net/2020/02/23/5JeLIEG2uxNokS4.png" alt="Trunk-based Development" /></p>
<p>在基于主干的开发模型中，所有开发人员都在一个具有开放访问权限的分支上工作。通常它只是 master 分支。他们将代码提交给它并运行它，非常简单。</p>
<p>在某些情况下，它们会创建短暂的功能分支。 分支上的代码编译并通过所有测试后，便将其直接合并到 master。 它可确保开发真正连续进行，并防止开发人员创建难以解决的合并冲突。</p>
<p>用这种方法检查代码的唯一方法是进行完整的源代码检查。 通常，冗长的讨论是有限的。 没有人能严格控制源代码库中正在修改的内容，这就是为什么拥有可强制执行的代码样式很重要的原因。 以这种风格工作的开发人员应具有丰富的经验，以便你知道他们不会降低源代码的质量。</p>
<p>当你与经验丰富的软件开发人员团队一起工作时，这种工作方式可能会很棒。 它使他们能够快速引入新的改进，而无需不必要的官僚作风。 它还显示了你对它们的信任，因为它们可以将代码直接引入 master 分支。 此工作流程中的开发人员非常自治-他们直接交付并检查工作产品中的最终结果。 这种方法绝对没有办公室管理的微观管理和可能性。</p>
<p>另一方面，如果你没有经验丰富的团队，或者由于某种原因不信任他们，则不应该采用这种方法，而应选择 Git flow。它将为你节省不必要的后顾之忧。</p>
<h3 id="tbd-的适用情况分析">TBD 的适用情况分析</h3>
<p>TBD 的适用情况与 git-flow 的适用情况恰好相反，可自行脑补。</p>
<h4 id="我有话说">我有话说</h4>
<p>在我上个项目中，我们的版本控制策略则更激进。</p>
<p>我们所有的开发没有特性分支，所有的 Code 都在 Master 分支上开发，原因有如下：</p>
<ul>
<li>我们的每张卡都拆的非常细（因为有老 BA)</li>
<li>我们每个人各自负责前端、移动端和后端</li>
<li>最重要的是我们的 CICD 完全一条龙操作，环境有 local、DEV、UAT 和 Prod, 在前一个环境 QA 验证不通过，是进入不到下一个环境的</li>
</ul>
<p>如果开发速度比较快，有些内容是要在下个版本才要上，那么团队就需要启用 FeatureToggle 了， 关于这部分可参考之前的 <a href="https://yq.aliyun.com/articles/727991?spm=a2c4e.11155435.0.0.152d3312ob5mmL">《FeatureToggle 引起的。&hellip; 总结》</a><sup>[1]</sup>
。</p>
<blockquote>
<p>软件开发是一场人、语言和工具的故事，但愿你在合适的场景选择合适的工具。</p>
</blockquote>
<div class="references">
                <h2>参考</h2>
                <ol><li>《FeatureToggle 引起的。&hellip; 总结》: <a href="https://yq.aliyun.com/articles/727991?spm=a2c4e.11155435.0.0.152d3312ob5mmL" rel="noopener noreferrer">https://yq.aliyun.com/articles/727991?spm=a2c4e.11155435.0.0.152d3312ob5mmL</a></li></ol>
            </div>]]></description></item><item><title>Git Revert 多条已提交的记录</title><link>https://guzhongren.github.io/2019/09/git-revert-%E5%A4%9A%E6%9D%A1%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E8%AE%B0%E5%BD%95.zh/</link><pubDate>Mon, 30 Sep 2019 15:52:49 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2019/09/git-revert-%E5%A4%9A%E6%9D%A1%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E8%AE%B0%E5%BD%95.zh/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://yqfile.alicdn.com/4a5a82578aaa956e2fc4b83847feba87e44ad848.png" referrerpolicy="no-referrer">
            </div><p>我需要撤销最后的四个提交</p>
<p><img src="https://yqfile.alicdn.com/3fbcbf5e8d1d7d7d1ab6f5978b9df1f702f4e420.png" alt="image" /></p>
<p>如果用* git revert * 一个一个 revert 挺费劲，可以用* git revert OLDER_COMMIT^..NEWER_COMMIT* 这种格式，对应我的工程就是</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git revert 54b23c2251acde.....09123463e99436fba83f9^..a19a10b24b648b80401234686aac65...</span></span></code></pre></div></div>
<p>这样会在 log 上多留下四条 revert 相关的记录，我不想生成 revert 相关的记录呢？可以的</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-shell">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git revert -n 54b23c2251acde.....09123463e99436fba83f9^..a19a10b24b648b80401234686aac65...</span></span></code></pre></div></div>
<p>就是多加个 <em>-n</em> 参数，然后再通过 git add 和 git commit 等步骤就可以了。</p>
<p>最后的效果如下</p>
<p><img src="https://yqfile.alicdn.com/4a5a82578aaa956e2fc4b83847feba87e44ad848.png" alt="image" /></p>
]]></description></item></channel></rss>