<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Test - 分类 - 谷中仁的博客</title><link>https://guzhongren.github.io/categories/test/</link><description>Test - 分类 - 谷中仁的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>guzhongren@live.cn (谷中仁)</managingEditor><webMaster>guzhongren@live.cn (谷中仁)</webMaster><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 11 Jun 2022 20:03:35 +0800</lastBuildDate><atom:link href="https://guzhongren.github.io/categories/test/" rel="self" type="application/rss+xml"/><item><title>真的需要在测试中打log么？</title><link>https://guzhongren.github.io/2022/06/%E7%9C%9F%E7%9A%84%E9%9C%80%E8%A6%81%E5%9C%A8%E6%B5%8B%E8%AF%95%E4%B8%AD%E6%89%93log%E4%B9%88/</link><pubDate>Sat, 11 Jun 2022 20:03:35 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/06/%E7%9C%9F%E7%9A%84%E9%9C%80%E8%A6%81%E5%9C%A8%E6%B5%8B%E8%AF%95%E4%B8%AD%E6%89%93log%E4%B9%88/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1654885506947-fe5280d8e0ea?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1470&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="引言">引言</h2>
<blockquote>
<p>&ldquo;调试程序是程序员最大的耻辱&rdquo; &ndash; CTO</p>
</blockquote>
<h2 id="写了-log-并且出错的程序">写了 log 并且出错的程序</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;multiple&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should be send when invoke the method sendMessage&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;top&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">value</span><span class="o">:</span> <span class="nb">window</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="s1">&#39;postMessage&#39;</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">value</span><span class="o">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">top</span><span class="o">?</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sendMessage</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">top</span><span class="o">?</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">).</span><span class="nx">toBeCalledTimes</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>
<p>运行输出</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">mockConstructor</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">_isMockFunction</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getMockImplementation</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mock</span><span class="o">:</span> <span class="p">[</span><span class="nx">Getter</span><span class="o">/</span><span class="nx">Setter</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockClear</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReset</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRestore</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockResolvedValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRejectedValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockResolvedValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRejectedValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockImplementationOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockImplementation</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnThis</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockName</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getMockName</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">__test__</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">ts</span><span class="o">:</span><span class="mi">16</span><span class="o">:</span><span class="mi">13</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="nb">Function</span><span class="o">:</span> <span class="nx">mockConstructor</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">_isMockFunction</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getMockImplementation</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mock</span><span class="o">:</span> <span class="p">[</span><span class="nx">Getter</span><span class="o">/</span><span class="nx">Setter</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockClear</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReset</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRestore</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockResolvedValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRejectedValueOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockResolvedValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockRejectedValue</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockImplementationOnce</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockImplementation</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockReturnThis</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">mockName</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)],</span>
</span></span><span class="line"><span class="cl">      <span class="nx">getMockName</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="p">(</span><span class="nx">anonymous</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">__test__</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">ts</span><span class="o">:</span><span class="mi">18</span><span class="o">:</span><span class="mi">13</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="nx">FAIL</span>  <span class="nx">__test__</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">ts</span>
</span></span><span class="line"><span class="cl">  <span class="nx">multiple</span>
</span></span><span class="line"><span class="cl">    <span class="err">✕</span> <span class="nx">should</span> <span class="nx">be</span> <span class="nx">send</span> <span class="nx">when</span> <span class="nx">invoke</span> <span class="nx">the</span> <span class="nx">method</span> <span class="nx">sendMessage</span> <span class="p">(</span><span class="mi">12</span> <span class="nx">ms</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="err">●</span> <span class="nx">multiple</span> <span class="err">›</span> <span class="nx">should</span> <span class="nx">be</span> <span class="nx">send</span> <span class="nx">when</span> <span class="nx">invoke</span> <span class="nx">the</span> <span class="nx">method</span> <span class="nx">sendMessage</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">expect</span><span class="p">(</span><span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">()).</span><span class="nx">toBeCalledTimes</span><span class="p">(</span><span class="nx">expected</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">Expected</span> <span class="nx">number</span> <span class="k">of</span> <span class="nx">calls</span><span class="o">:</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Received</span> <span class="nx">number</span> <span class="k">of</span> <span class="nx">calls</span><span class="o">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="mi">17</span> <span class="o">|</span>     <span class="nx">sendMessage</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="mi">18</span> <span class="o">|</span>     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">top</span><span class="o">?</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">&gt;</span> <span class="mi">19</span> <span class="o">|</span>     <span class="nx">expect</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">).</span><span class="nx">toBeCalledTimes</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="o">|</span>                                       <span class="o">^</span>
</span></span><span class="line"><span class="cl">      <span class="mi">20</span> <span class="o">|</span>   <span class="p">})</span>
</span></span><span class="line"><span class="cl">      <span class="mi">21</span> <span class="o">|</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">__test__</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="p">.</span><span class="nx">spec</span><span class="p">.</span><span class="nx">ts</span><span class="o">:</span><span class="mi">19</span><span class="o">:</span><span class="mi">39</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">at</span> <span class="nx">processTicksAndRejections</span> <span class="p">(</span><span class="nx">node</span><span class="o">:</span><span class="nx">internal</span><span class="o">/</span><span class="nx">process</span><span class="o">/</span><span class="nx">task_queues</span><span class="o">:</span><span class="mi">96</span><span class="o">:</span><span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Test</span> <span class="nx">Suites</span><span class="o">:</span> <span class="mi">1</span> <span class="nx">failed</span><span class="p">,</span> <span class="mi">1</span> <span class="nx">total</span>
</span></span><span class="line"><span class="cl"><span class="nx">Tests</span><span class="o">:</span>       <span class="mi">1</span> <span class="nx">failed</span><span class="p">,</span> <span class="mi">1</span> <span class="nx">total</span>
</span></span><span class="line"><span class="cl"><span class="nx">Snapshots</span><span class="o">:</span>   <span class="mi">0</span> <span class="nx">total</span>
</span></span><span class="line"><span class="cl"><span class="nx">Time</span><span class="o">:</span>        <span class="mf">1.077</span> <span class="nx">s</span>
</span></span><span class="line"><span class="cl"><span class="nx">Ran</span> <span class="nx">all</span> <span class="nx">test</span> <span class="nx">suites</span> <span class="nx">matching</span> <span class="o">/</span><span class="err">\</span><span class="o">/</span><span class="nx">Users</span><span class="err">\</span><span class="o">/</span><span class="nx">zhongren</span><span class="err">\</span><span class="p">.</span><span class="nx">gu</span><span class="err">\</span><span class="o">/</span><span class="mi">01</span><span class="err">\</span><span class="p">.</span><span class="nx">Project</span><span class="err">\</span><span class="o">/</span><span class="nx">test</span><span class="o">-</span><span class="nb">window</span><span class="o">-</span><span class="nx">object</span><span class="err">\</span><span class="o">/</span><span class="nx">__test__</span><span class="err">\</span><span class="o">/</span><span class="nx">method_sendMessage_mult_tests</span><span class="err">\</span><span class="p">.</span><span class="nx">spec</span><span class="err">\</span><span class="p">.</span><span class="nx">ts</span><span class="o">/</span><span class="nx">i</span> <span class="kd">with</span> <span class="nx">tests</span> <span class="nx">matching</span> <span class="s2">&#34;multiple should be send when invoke the method sendMessage&#34;</span><span class="p">.</span></span></span></code></pre></div></div>
<h2 id="在测试中写-log-有什么用">在测试中写 log 有什么用？</h2>
<blockquote>
<p>本文所说的测试中写的 Log 是提交到代码仓库中的日志。</p>
</blockquote>
<p>看了上面的测试和 UT 运行后的结果，你有什么看法？</p>
<p>在我看来，有以下几点：</p>
<h3 id="影响总体的测试输出">影响总体的测试输出</h3>
<p>如果测试中存在很多的 log，并且有部分测试会失败，当你找失败的测试的时候就会变得非常困难，会被log 迷惑。测试结果列表不是那么整齐，给人以测试混乱，不够整洁的感觉，影响开发体验。</p>
<h3 id="日志对测试运行的成败没有任何好处">日志对测试运行的成败没有任何好处</h3>
<p>测试在运行失败后，会自动打印出真实值（Received）和 期望值（Expected), 对于优秀的程序员，大家都用 TDD 开发，按照 TDD 的套路，程序的期望值是已知的；如果测试失败，你应该修改你的产品代码，让你的产品代码的输出符合你测试的期望值; 而不是在你的测试代码中调试，打 log。</p>
<p>如果在测试中打印了 Log，程序员最多在测试日志中看看某个变量的值，对生产代码没有任何影响; 同时你还得花时间去找你想要的日志，纯属浪费时间。</p>
<p>如果真的需要看测试的某个变量或者看生产代码中某行代码的运行时值，通过调试你的测试代码，在你的生产代码中打断点即可，完全没有必要将测试中的日志永久的留在代码库中。</p>
<h2 id="生产代码中的日志被测试打印出来可以吗">生产代码中的日志被测试打印出来，可以吗？</h2>
<p>不行。没有意义。</p>
<p>运行测试，我们只想知道所有测试是否成功，至于中间打印出生产代码中的日志也没有意义。
如果测试失败，只需要 Fix 对应的测试即可, 无论什么方法。</p>
<h2 id="解决方案">解决方案</h2>
<p>如果真的需要在测试时调试代码，可以加 <code>debug</code> 级别的调试代码，这样就可以通过日志来调试了，但还是需要通过其他的方式，比如 <code>eslint</code> 来限制将 <code>debug</code> 日志提交到 Repo 中。</p>
<p>怎么让测试的输出中不输出 log 信息呢？</p>
<ul>
<li>
<p>对于前端，我们可以在所有测试运行前 Spy <code>console.*</code>的所有的方法，</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;log&#39;</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;info&#39;</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;warn&#39;</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">spyOn</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;error&#39;</span><span class="p">).</span><span class="nx">mockReturnValue</span><span class="p">();</span></span></span></code></pre></div></div>
<p>这段代码需要写在 <code>tests/jest-setup.[t|j]s</code> 中。</p>
</li>
<li>
<p>或者使用第三方成熟的 npm 包， 像 <a href="https://www.npmjs.com/package/jest-mock-console">jest-mock-console</a><sup>[1]</sup>
, 这个包功能更强大一点。</p>
</li>
</ul>
<div class="references">
                <h2>参考</h2>
                <ol><li>jest-mock-console: <a href="https://www.npmjs.com/package/jest-mock-console" rel="noopener noreferrer">https://www.npmjs.com/package/jest-mock-console</a></li></ol>
            </div>]]></description></item><item><title>使用 Cypress 创建测试镜像并完成 E2E 测试</title><link>https://guzhongren.github.io/2022/01/%E4%BD%BF%E7%94%A8cypress%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E9%95%9C%E5%83%8F%E5%B9%B6%E5%AE%8C%E6%88%90e2e%E6%B5%8B%E8%AF%95/</link><pubDate>Sun, 16 Jan 2022 14:47:53 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2022/01/%E4%BD%BF%E7%94%A8cypress%E5%88%9B%E5%BB%BA%E6%B5%8B%E8%AF%95%E9%95%9C%E5%83%8F%E5%B9%B6%E5%AE%8C%E6%88%90e2e%E6%B5%8B%E8%AF%95/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.pexels.com/photos/5667741/pexels-photo-5667741.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=650&amp;w=940" referrerpolicy="no-referrer">
            </div><h2 id="缘由">缘由</h2>
<p>最近在做一个 Buildkite 的 Dashboard 的项目 <a href="https://github.com/guzhongren/Powerboard">Powerboard</a><sup>[1]</sup>
，项目是托管在 GitHub 的 Git Pages 上的；项目只是一个纯前端项目，且 E2E 测试是用 <a href="https://www.cypress.io/">Cypress</a><sup>[2]</sup>
 构建的；如果要进行 E2E 测试一般情况都是对着部署在 Git Pages 上的网站直接测试，而且也是这么做的😄。</p>
<h2 id="痛点">痛点</h2>
<h3 id="测试滞后">测试滞后</h3>
<p>这么做肯定是有问题的，产品都上线了才做测试，肯定已经迟了；如果程序有问题，那么就会影响所有用户。这种情况应该算是 P1 级别的产品事故，对用户来说简直就是灾难。应该在部署之前就应该完成 E2E 测试，如果测试通过不了，就不应该部署代码。所以测试应该前移。</p>
<h2 id="解决方案">解决方案</h2>
<p>由于我们的测试需要自动化，需要在 Pipeline 上执行，所以必须是一个可以独立运行的程序和 Cypress 程序同时运行，并最终返回测试结果，由 Pipeline 来决定是否终止 Pipeline 运行。</p>
<p>在 GitHub Actions 的 Pipeline 上同时运行程序只能依靠 <code>docker-compose</code>, 在这我们可以使用 Cypress 官方出品的 <a href="https://hub.docker.com/r/cypress/included">cypress/included</a><sup>[3]</sup>
, 通过编排程序来进行测试。</p>
<h3 id="cypressincluded">cypress/included</h3>
<p>cypress/included 可以让我们挂载 cypress 的测试脚本，然后自动执行，并在最终返回 Linux 命令状态值，如 0 ， 非 0 值。</p>
<h3 id="docker-compose">Docker-compose</h3>
<p><a href="https://docs.docker.com/compose/">Docker-compose</a><sup>[4]</sup>
 是一套容器编排工具，可以很轻松的管理容器的启动顺序等。在本地项目搭建中非常有用，比如构建数据库，执行 shell/yaml lint 等。</p>
<h2 id="执行方案">执行方案</h2>
<h3 id="构建应用镜像">构建应用镜像</h3>
<p>在测试之前需要将应用构建好并部署好，我们可以用 Node 镜像打包应用，并利用容器的多阶段构建 (<a href="https://docs.docker.com/develop/develop-images/multistage-build/">multi-stage builds</a><sup>[5]</sup>
) 完成应用轻量化构建，并部署在 <a href="https://hub.docker.com/_/nginx">Nginx</a><sup>[6]</sup>
 中。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">FROM node:17-alpine as distPackage</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">COPY ./ /app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">WORKDIR /app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">RUN yarn</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">RUN yarn build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">FROM nginx:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">COPY --from=distPackage /app/dist /usr/share/nginx/html</span></span></span></code></pre></div></div>
<h3 id="编排-service">编排 service</h3>
<p>因为我们的程序需要在测试的时候就要部署好，所以我们可以利用 Docker-compose 的 <a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#build">build</a><sup>[7]</sup>
 参数，在容器启动时构建应用并部署。并在 cypress/included 启动是执行测试命令 <code>npx cy:docker</code>, 具体就是<code>cross-env ENV=docker cypress run --spec 'cypress/integration/dashboard.spec.js</code>。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-yaml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">web</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">context</span><span class="p">:</span><span class="w"> </span><span class="l">./</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">dockerfile</span><span class="p">:</span><span class="w"> </span><span class="l">./Dockerfile</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;80:80&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">e2e</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">cypress/included:9.2.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">cypress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">CYPRESS_baseUrl=http://web</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">ENV=docker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">npx cy:docker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">working_dir</span><span class="p">:</span><span class="w"> </span><span class="l">/e2e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./:/e2e</span></span></span></code></pre></div></div>
<p>这样我们就可以独立的运行起真实程序和正式的测试程序了，具体的 Pipeline 可以参考 Powerboard 的 <a href="https://github.com/guzhongren/Powerboard/blob/main/.github/workflows/main.yml">Workflow</a><sup>[8]</sup>
。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-yml">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">E2E</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          docker-compose up --build e2e</span><span class="w">          </span></span></span></code></pre></div></div>
<h2 id="总结">总结</h2>
<p><code>Docker-compopse</code> 有很好的应用编排能力，可以很轻松的构建多服务程序；并在构建应用的时候可以使用多阶段构建来优化镜像大小。使用 <code>Cypress</code> 可以提高开发效率并可在 <code>Pipeline</code> 上保证程序的正确性。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>Powerboard: <a href="https://github.com/guzhongren/Powerboard" rel="noopener noreferrer">https://github.com/guzhongren/Powerboard</a></li><li>Cypress: <a href="https://www.cypress.io/" rel="noopener noreferrer">https://www.cypress.io/</a></li><li>cypress/included: <a href="https://hub.docker.com/r/cypress/included" rel="noopener noreferrer">https://hub.docker.com/r/cypress/included</a></li><li>Docker-compose: <a href="https://docs.docker.com/compose/" rel="noopener noreferrer">https://docs.docker.com/compose/</a></li><li>multi-stage builds: <a href="https://docs.docker.com/develop/develop-images/multistage-build/" rel="noopener noreferrer">https://docs.docker.com/develop/develop-images/multistage-build/</a></li><li>Nginx: <a href="https://hub.docker.com/_/nginx" rel="noopener noreferrer">https://hub.docker.com/_/nginx</a></li><li>build: <a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#build" rel="noopener noreferrer">https://docs.docker.com/compose/compose-file/compose-file-v3/#build</a></li><li>Workflow: <a href="https://github.com/guzhongren/Powerboard/blob/main/.github/workflows/main.yml" rel="noopener noreferrer">https://github.com/guzhongren/Powerboard/blob/main/.github/workflows/main.yml</a></li></ol>
            </div>]]></description></item><item><title>Test With 3rd Party Library</title><link>https://guzhongren.github.io/2021/04/test-with-3rd-party-library/</link><pubDate>Sun, 18 Apr 2021 21:57:08 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/04/test-with-3rd-party-library/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="场景">场景</h2>
<p>一般的前端开发情况下，我们都会用到其他的第三方库，比如 UI 库 <code>Ant Desgin</code>， 请求库 <code>axios</code> 等，通常对于 UI 库，我们可以通过快照等操作对其进行测试，但是对于像 axios 这类第三方库，我们必须通过 mock 的方式来实现。</p>
<h2 id="问题">问题</h2>
<p>上周四晚上突然收到同事的微信求助，怎么 mock 一个 <code>jwt-decode</code> 这个库。然而理想很丰满，现实很骨干。妹子找了 jest 官网的各种测试方式，没有成功，我岂能随随便便成功。</p>
<p>妹子的问题如下：</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">jwt_decode</span> <span class="nx">from</span> <span class="s1">&#39;jwt-decode&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">cookieAccessToken</span> <span class="o">=</span> <span class="nx">cookie</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;cookie-key&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">userJwt</span> <span class="o">=</span> <span class="p">(</span><span class="nx">cookieAccessToken</span> <span class="o">&amp;&amp;</span> <span class="nx">jwt_decode</span><span class="p">(</span><span class="nx">cookieAccessToken</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">....</span></span></span></code></pre></div></div>
<h2 id="解决方案">解决方案</h2>
<p>在构建项目前期，通过各种尝试启动一个支持 <code>import</code> 语法的项目，始终未遂。 最终还是按照 Jest 官网的提示一步步走，构建起了一个项目。</p>
<h3 id="参考官网示例">参考官网示例</h3>
<p>官网示例如下，是一个 mock 有方法的类的，但是通过上面的代码可知，这个不是一个类，而是直接使用的一个方法。</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">moduleName</span><span class="p">,</span> <span class="p">{</span><span class="nx">foo</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;../moduleName&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="s1">&#39;../moduleName&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">__esModule</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">default</span><span class="o">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="mi">42</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">foo</span><span class="o">:</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="mi">43</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">moduleName</span><span class="p">();</span> <span class="c1">// Will return 42
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">foo</span><span class="p">();</span> <span class="c1">// Will return 43
</span></span></span></code></pre></div></div>
<p>很明显这是不符合我么场景的。通过观察可知，jest.mock 的第二参数是工参数，返回了一个对象，然后通过调用个这个对象的方法，返回特定的 mock 数据。 那么对于我们这种情况，我们只需要返回一个 mock 后的方法即可。</p>
<p>so, 方案可整理如下</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">import</span> <span class="nx">jwt_decode</span> <span class="nx">from</span> <span class="s2">&#34;jwt-decode&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">jest</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="s2">&#34;jwt-decode&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">().</span><span class="nx">mockImplementation</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s2">&#34;test&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">it</span><span class="p">(</span><span class="s2">&#34;jwt&#34;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">token</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmb28iOiJiYXIiLCJleHAiOjEzOTMyODY4OTMsImlhdCI6MTM5MzI2ODg5M30.4-iaDojEVl0pJQMjrbM1EzUIfAZgsbK_kgnVyVxFSVo&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kr">const</span> <span class="nx">decoded</span> <span class="o">=</span> <span class="nx">jwt_decode</span><span class="p">(</span><span class="nx">token</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nx">expect</span><span class="p">(</span><span class="nx">decoded</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s2">&#34;test&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span></span></span></code></pre></div></div>
<p>然后运行 test，通过。</p>
<p>Code 地址：https://github.com/guzhongren/awesome-unittest/tree/main/JavaScript/Frontend/src/3rd-part-test</p>
]]></description></item><item><title>[翻译] 初探性能测试</title><link>https://guzhongren.github.io/2021/04/%E5%88%9D%E6%8E%A2%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</link><pubDate>Sat, 03 Apr 2021 21:12:37 +0800</pubDate><author>谷中仁</author><guid>https://guzhongren.github.io/2021/04/%E5%88%9D%E6%8E%A2%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://images.unsplash.com/photo-1671227498016-93aa927686f8?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1074&amp;q=80" referrerpolicy="no-referrer">
            </div><h2 id="什么是性能测试">什么是性能测试</h2>
<p></p>
<p>性能测试是一种软件测试过程，用于测试特定工作负载下软件应用程序的速度、响应时间、稳定性、可靠性、可伸缩性和资源使用情况。性能测试的主要目的是识别和消除软件应用程序中的性能瓶颈。它是性能工程的一个子集，也被称为&quot;Perf Testing&quot;。</p>
<p>性能测试的重点是检查软件程序的以下几个性能：</p>
<ul>
<li><strong>速度</strong>    ——确定应用程序是否快速响应</li>
<li><strong>可伸缩性</strong>——确定软件应用程序能够处理的最大用户负载</li>
<li><strong>稳定性</strong>  &ndash;确定应用程序在变化的负载下是否稳定</li>
</ul>
<h2 id="为什么要做性能测试">为什么要做性能测试</h2>
<p>软件系统支持的特性和功能并不是唯一的关注点。软件应用程序的性能，如响应时间、可靠性、资源使用和可伸缩性都很重要。性能测试的目标不是发现 bug，而是消除性能瓶颈。</p>
<p>进行性能测试是为了向涉众提供有关其应用程序的速度、稳定性和可伸缩性方面的信息。更重要的是，性能测试揭示了在产品进入市场之前需要改进的地方。如果没有性能测试，软件很可能会遇到这样的问题：几个用户同时使用时运行缓慢，不同操作系统之间的不一致性以及易用性差。</p>
<p>性能测试将确定他们的软件在预期的工作负载下是否满足速度、可伸缩性和稳定性要求。由于不存在或糟糕的性能测试而将性能指标较差的应用程序发送到市场上，可能会获得坏名声，无法达到预期的销售目标等。</p>
<p>此外，诸如太空发射计划或救生医疗设备等关键任务应用程序应进行性能测试，以确保它们能够长期运行而无偏差。</p>
<p>据 Dunn &amp; Bradstreet 公司统计，59%的财富 500 强公司每周的停机时间估计为 1.6 小时。考虑到拥有至少 1 万名员工的《财富》500 强公司的平均工资是每小时 56 美元，这样的组织的停工部分的劳动成本将是每周 89.6 万美元，换算成每年超过 4600 万美元。</p>
<p>据估计，Google.com(8 月 19 日至 13 日）仅 5 分钟的停机时间就会给这家搜索巨头带来 54.5 万美元的损失。</p>
<p>另外，由于最近一次亚马逊网络服务中断，公司每秒损失了价值 1100 美元的销售额。</p>
<p>鉴于此，性能测试在保障服务可用性等方面真的很重要。</p>
<h2 id="性能测试的类型">性能测试的类型</h2>
<p><strong>负载测试</strong>    ——检查应用程序在预期用户负载下的执行能力。目标是在软件应用程序运行之前识别性能瓶颈。</p>
<p><strong>压力测试</strong>    ——包括在极端工作负载下测试应用程序，以了解它如何处理高流量或数据处理。目标是识别应用程序的极限。</p>
<p><strong>耐久性测</strong>  ——是为了确保软件能够在很长一段时间内处理预期的负载。</p>
<p><strong>峰值测试</strong>    ——测试软件对用户产生的突然的负载峰值的反应。</p>
<p><strong>体积测试</strong>    ——在大量测试数据被填充到数据库下，监测整个软件系统的行为。目标是检查软件应用程序在不同数据库容量下的性能。</p>
<p><strong>可伸缩性测试</strong>——可伸缩性测试的目标是确定软件应用程序在“扩展”以支持用户负载增加方面的有效性。它有助于规划软件系统的容量。</p>
<h2 id="常见的性能问题">常见的性能问题</h2>
<p>大多数性能问题都与速度、响应时间、加载时间和较差的可伸缩性有关。速度通常是应用程序最重要的属性之一。运行缓慢的应用程序将失去潜在的用户。性能测试是为了确保应用运行速度足以吸引用户的注意和兴趣。看看下面的常见性能问题列表，并注意到速度是其中的一个常见因素：</p>
<ul>
<li>
<p><strong>加载时间长</strong>——加载时间通常是应用程序启动的初始时间。这通常应该保持在最低限度。虽然有些应用程序不可能在一分钟内完成加载，但加载时间应该尽可能保持在几秒钟以内。</p>
</li>
<li>
<p><strong>响应时间短</strong>——响应时间是从用户向应用程序输入数据到应用程序输出对该输入的响应所花费的时间。一般来说，这应该很快。如果用户等待的时间过长，他们就会失去兴趣。</p>
</li>
<li>
<p><strong>可伸缩性差</strong>——当软件产品不能处理预期的用户数量或不能容纳足够大的用户范围时，它就会受到可伸缩性差的困扰。应该进行负载测试，以确定应用程序能够处理预期的用户数量。</p>
</li>
<li>
<p><strong>瓶颈</strong>-瓶颈是系统中会降低整体系统性能的障碍。瓶颈是编码错误或硬件问题导致在特定负载下吞吐量下降。瓶颈通常是由一个错误的代码部分引起的。修复瓶颈问题的关键是找到导致放缓的代码部分，并尝试修复它。瓶颈通常可以通过修复运行不良的进程或添加额外的硬件来解决。一些常见的性能瓶颈是：</p>
<ul>
<li><strong>CPU 利用率</strong></li>
<li><strong>内存利用率</strong></li>
<li><strong>网络利用率</strong></li>
<li><strong>操作系统限制</strong></li>
<li><strong>磁盘使用情况</strong></li>
</ul>
</li>
</ul>
<h2 id="性能测试过程">性能测试过程</h2>
<p>为性能测试所采用的方法可能有很大的不同，但是性能测试的目标是相同的。它可以帮助证明您的软件系统满足某些预先定义的性能标准。或者它可以帮助比较两个软件系统的性能。它还可以帮助识别降低软件系统性能的部分。</p>
<p>下面是关于如何执行性能测试的一般流程：</p>
<p></p>
<ol>
<li>
<p><strong>确定您的测试环境</strong> —— 了解您的物理测试环境、生产环境以及可用的测试工具。在开始测试过程之前，请了解测试过程中使用的硬件、软件和网络配置的详细信息。它将帮助测试人员创建更有效的测试。它还将帮助识别测试人员在性能测试过程中可能遇到的挑战。</p>
</li>
<li>
<p><strong>确定性能验收标准</strong> —— 这包括吞吐量、响应时间和资源分配的目标和约束。在这些目标和约束之外确定项目成功的标准也是必要的。测试人员应该被授权设置性能标准和目标，因为项目规范通常不会包括足够广泛的性能基准。有时可能根本没有。如果可能，找到一个类似的应用程序进行比较是设置性能目标的好方法。</p>
</li>
<li>
<p><strong>计划和设计性能测试</strong> —— 确定最终用户的使用可能如何变化，并确定测试所有可能用例的关键场景。模拟各种终端用户、计划性能测试数据并概述将要收集的度量标准是必要的。</p>
</li>
<li>
<p><strong>配置测试环境</strong>—— 执行前准备测试环境。同时，安排工具和其他资源。</p>
</li>
<li>
<p><strong>执行测试设计</strong> —— 根据测试设计创建性能测试。</p>
</li>
<li>
<p><strong>运行测试</strong> &ndash; 执行和监视测试。</p>
</li>
<li>
<p>分析，调整和重新测试-合并，分析和共享测试结果。然后进行微调并再次测试，看看性能是否有改善或下降。由于每次重新测试的改进通常都会变小，所以当瓶颈是由 CPU 引起时就停止。然后，您可以考虑增加 CPU 功率。</p>
</li>
</ol>
<h2 id="性能测试指标参数监测">性能测试指标：参数监测</h2>
<p></p>
<p>在性能测试期间监视的基本参数包括：</p>
<ul>
<li><strong>处理器使用 (Processor Usage)</strong>——处理器执行非空闲线程所花费的时间。</li>
<li><strong>内存使用 (Memory use)</strong>——计算机上进程可用的物理内存总量。</li>
<li><strong>磁盘时间 (Disk time)</strong>——磁盘忙于执行读或写请求的时间。</li>
<li><strong>带宽 (Bandwidth)</strong>——显示一个网络接口每秒使用的比特数。</li>
<li><strong>私有字节数 (Private bytes)</strong>——一个进程分配的不能被其他进程共享的字节数。它们用于测量内存泄漏和使用情况。</li>
<li><strong>已提交内存量 (Committed memory)</strong>——使用的虚拟内存量。</li>
<li><strong>内存页数/秒 (Memory pages/second)</strong>&ndash;写入磁盘或从磁盘读取以解决硬页错误的页数。 硬页错误是指从其他位置调用不是来自当前工作集的代码并从磁盘中检索到的代码。</li>
<li><strong>页面故障数/秒 (Page faults/second)</strong>—&ndash;处理器处理故障页面的总速率。 当流程需要来自其工作集之外的代码时，会再次发生这种情况。</li>
<li><strong>CPU 每秒中断数 (CPU interrupts per second)</strong>———是一个处理器每秒接收和处理的硬件中断数的平均值。</li>
<li><strong>磁盘队列长度 (Disk queue length)</strong>&ndash;为平均长度。在采样间隔内对选定磁盘排队的读和写请求的值。</li>
<li><strong>网络输出队列长度 (Network output queue length)</strong>——报文输出队列的长度。如果超过两个，就意味着需要停止延误和瓶颈。</li>
<li><strong>网络字节每秒总数 (Network bytes total per second)</strong>——在接口上发送和接收的字节的速率，包括分帧字符。</li>
<li><strong>响应时间 (Response time)</strong>——从用户输入请求到收到响应的第一个字符的时间。</li>
<li><strong>吞吐量 (Throughput)</strong>&ndash;计算机或网络每秒接收请求的速率。</li>
<li><strong>连接池的数量 (Amount of connection pooling)</strong>&ndash;池连接所满足的用户请求的数量。池中的连接满足的请求越多，性能就越好。</li>
<li><strong>最大激活会话数 (Maximum active sessions)</strong>&ndash;次可以激活的最大会话数。</li>
<li><strong>命中率 (Hit ratios)</strong>——这与缓存数据处理 SQL 语句的数量有关，而不是昂贵的 I/O 操作。这是解决瓶颈问题的好起点。</li>
<li><strong>每秒点击次数 (Hits per second)</strong>&ndash;在负载测试中，每秒钟在 web 服务器上的点击量。</li>
<li><strong>回滚段 (Rollback segment)</strong>——在任何时间点都可以回滚的数据量。</li>
<li><strong>数据库锁定 (Database locks)</strong>——表和数据库的锁定需要被监视和仔细调优。</li>
<li><strong>顶级等待 (Top waits)</strong>——监视以确定在处理从内存检索数据的速度时可以减少哪些等待时间</li>
<li><strong>线程计数 (Thread counts)</strong>——应用程序运行状况可以通过编号进行度量。正在运行且当前处于活动状态的线程。</li>
<li><strong>垃圾回收 (Garbage collectio)</strong>——它与将未使用的内存返回给系统有关。需要监控垃圾收集的效率。</li>
</ul>
<h2 id="性能测试案例">性能测试案例</h2>
<ul>
<li>当 1000 个用户同时访问网站时，验证响应时间不超过 4 秒。</li>
<li>当网络连接较慢时，验证负载下应用程序的响应时间在可接受的范围内</li>
<li>检查应用程序在崩溃前可以处理的最大用户数。</li>
<li>当同时读写 500 条记录时，请检查数据库执行时间。</li>
<li>检查高峰负载条件下应用程序和数据库服务器的 CPU 和内存使用情况</li>
<li>验证应用程序在低、正常、中等和高负载条件下的响应时间。</li>
</ul>
<p>在实际的性能测试执行过程中，模糊的术语如可接受范围、重载等被具体的数字所取代。性能工程师根据业务需求和应用程序的技术前景来设置这些数字。</p>
<h2 id="性能测试工具">性能测试工具</h2>
<p>市场上有各种各样的性能测试工具。您选择的测试工具将取决于许多因素，如支持的协议类型、许可证成本、硬件要求、平台支持等。下面是一些常用的测试工具。</p>
<ul>
<li><em><a href="https://bit.ly/2W4Ytu5">LoadNinja</a><sup>[1]</sup>
</em> 是一个革命性的加载测试的方式的工具。这个基于云的负载测试工具使团队能够记录和即时回放全面的负载测试，无需复杂的动态关联，并在真实的浏览器中大规模运行这些负载测试。团队能够增加测试覆盖率。将负载测试时间减少 60%以上。</li>
<li><em><a href="https://www.guru99.com/loadrunner-v12-tutorials.html">HP LoadRunner</a><sup>[2]</sup>
</em> -是当今市场上最流行的性能测试工具。该工具能够模拟成千上万的用户，将应用程序置于真实的负载下，以确定它们在预期负载下的行为。Loadrunner 有一个虚拟用户生成器，可以模拟真人用户的动作。</li>
<li><em><a href="https://www.guru99.com/jmeter-tutorials.html">Jmeter</a><sup>[3]</sup>
</em> ——用于 web 和应用服务器负载测试的主要工具之一。</li>
</ul>
<h2 id="faq">FAQ</h2>
<h3 id="我们应该对哪些应用程序进行性能测试">我们应该对哪些应用程序进行性能测试？</h3>
<p>性能测试总是只针对基于客户机-服务器的系统。这意味着，任何不是基于客户机-服务器架构的应用程序都不需要性能测试。
例如，微软计算器既不是基于客户机-服务器，也不是运行多个用户；因此，它不是性能测试的候选对象。
</p>
<h3 id="性能测试和性能工程的区别是什么">性能测试和性能工程的区别是什么</h3>
<p>理解性能测试与性能工程的区别具有重要意义。达成以下共识：</p>
<ul>
<li>性能测试是一门与测试和报告软件应用程序在各种参数下的当前性能有关的学科。</li>
<li>性能工程是为了实现所需的性能而对软件进行测试和调优的过程。这个过程旨在优化最重要的应用性能特征，即用户体验。</li>
<li>从历史上看，测试和调优一直是截然分开的、经常相互竞争的领域。然而，在过去的几年里，一些测试人员和开发人员已经独立合作创建了调优团队。由于这些团队已经取得了巨大的成功，将性能测试与性能调优相结合的概念已经流行起来，现在我们称之为性能工程。</li>
</ul>
<h2 id="结论">结论</h2>
<p>在软件工程中，在任何软件产品上市之前，性能测试都是必要的。它确保了客户的满意度，保护投资者的投资不受产品失败的影响。性能测试的成本通常可以通过提高客户满意度、忠诚度和保留度来弥补。</p>
<div class="references">
                <h2>参考</h2>
                <ol><li>LoadNinja: <a href="https://bit.ly/2W4Ytu5" rel="noopener noreferrer">https://bit.ly/2W4Ytu5</a></li><li>HP LoadRunner: <a href="https://www.guru99.com/loadrunner-v12-tutorials.html" rel="noopener noreferrer">https://www.guru99.com/loadrunner-v12-tutorials.html</a></li><li>Jmeter: <a href="https://www.guru99.com/jmeter-tutorials.html" rel="noopener noreferrer">https://www.guru99.com/jmeter-tutorials.html</a></li></ol>
            </div>]]></description></item></channel></rss>